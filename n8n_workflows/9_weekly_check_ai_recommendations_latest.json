{
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "pro_week_check",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "f2589f50-82b8-44f4-a4ea-bef97371358f",
      "name": "Webhook - Weekly Check",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        0,
        0
      ],
      "webhookId": "pro_week_check"
    },
    {
      "parameters": {
        "url": "=https://bespxpyftmnhbynchywl.supabase.co/rest/v1/webhook_events",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "supabaseApi",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "email_id",
              "value": "=eq.{{ $json.userId || $json.body?.userId }}"
            },
            {
              "name": "event_type",
              "value": "eq.onboarding_completed"
            },
            {
              "name": "select",
              "value": "payload"
            },
            {
              "name": "order",
              "value": "sent_at.desc"
            },
            {
              "name": "limit",
              "value": "1"
            }
          ]
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Accept",
              "value": "application/json"
            }
          ]
        },
        "options": {}
      },
      "id": "5d37e2c0-67ae-4762-a1b2-721f57209014",
      "name": "Get webhook_events",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        200,
        0
      ],
      "credentials": {
        "supabaseApi": {
          "id": "8RKkUwkeVmyvS58y",
          "name": "Supabase account NutriCheker"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Обработка данных из webhook_events + еженедельные данные\nconsole.log('=== ОБРАБОТКА WEBHOOK EVENTS + WEEKLY DATA ===');\n\n// Получаем данные из предыдущей ноды Get webhook_events\nconst webhookEventsData = $input.all();\nconst originalWeeklyRequest = $('Webhook - Weekly Check').all()[0] || {};\n\nconsole.log('Получено записей webhook_events:', webhookEventsData.length);\nconsole.log('Оригинальный weekly запрос:', JSON.stringify(originalWeeklyRequest.body || originalWeeklyRequest.json, null, 2));\n\nif (webhookEventsData.length === 0) {\n  console.error('❌ Нет данных из webhook_events');\n  return [{\n    json: {\n      error: 'No webhook_events data found',\n      user: {},\n      profile: {},\n      settings: {},\n      weeklyData: {}\n    }\n  }];\n}\n\n// Извлекаем данные еженедельной проверки из оригинального запроса\nconst weeklyRequestBody = originalWeeklyRequest.body || originalWeeklyRequest.json || {};\n\n// Проверяем разные возможные структуры для weeklyData\nlet weeklyData = {};\nif (weeklyRequestBody.weeklyData) {\n  weeklyData = weeklyRequestBody.weeklyData;\n} else if (originalWeeklyRequest.json && originalWeeklyRequest.json.weeklyData) {\n  weeklyData = originalWeeklyRequest.json.weeklyData;\n} else if (originalWeeklyRequest.body && originalWeeklyRequest.body.weeklyData) {\n  weeklyData = originalWeeklyRequest.body.weeklyData;\n} else {\n  // Если weeklyData не найден, пытаемся извлечь из корня запроса\n  weeklyData = {\n    currentWeight: weeklyRequestBody.currentWeight || null,\n    energyLevel: weeklyRequestBody.energyLevel || null,\n    motivationLevel: weeklyRequestBody.motivationLevel || null,\n    challenges: weeklyRequestBody.challenges || [],\n    dietCompliance: weeklyRequestBody.dietCompliance || null,\n    exerciseCompliance: weeklyRequestBody.exerciseCompliance || null,\n    sleepQuality: weeklyRequestBody.sleepQuality || null,\n    stressLevel: weeklyRequestBody.stressLevel || null,\n    completedAt: weeklyRequestBody.completedAt || null,\n    timestamp: weeklyRequestBody.timestamp || null\n  };\n}\n\nconsole.log('Weekly data из запроса:', weeklyData);\nconsole.log('Полная структура originalWeeklyRequest:', JSON.stringify(originalWeeklyRequest, null, 2));\n\n// Извлекаем первую запись\nconst webhookRecord = webhookEventsData[0];\n\n// Проверяем разные возможные структуры данных\nlet payloadString = null;\nif (webhookRecord.payload) {\n  payloadString = webhookRecord.payload;\n} else if (webhookRecord.json && webhookRecord.json.payload) {\n  payloadString = webhookRecord.json.payload;\n} else {\n  console.error('❌ Нет payload в webhook_events');\n  return [{\n    json: {\n      error: 'No payload in webhook_events',\n      user: {},\n      profile: {},\n      settings: {},\n      weeklyData: weeklyData\n    }\n  }];\n}\n\n// Парсим JSON payload\nlet parsedData = {};\ntry {\n  parsedData = JSON.parse(payloadString);\n  console.log('✅ Payload успешно распарсен');\n} catch (error) {\n  console.error('❌ Ошибка парсинга payload:', error.message);\n  return [{\n    json: {\n      error: 'Failed to parse payload JSON: ' + error.message,\n      user: {},\n      profile: {},\n      settings: {},\n      weeklyData: weeklyData\n    }\n  }];\n}\n\n// Извлекаем основные секции\nconst user = parsedData.user || {};\nconst profile = parsedData.profile || {};\nconst settings = parsedData.settings || {};\n\n// Функция для расчета возраста\nconst calculateAge = (birthday) => {\n  if (!birthday) return null;\n  \n  try {\n    const birthDate = new Date(birthday);\n    const today = new Date();\n    let age = today.getFullYear() - birthDate.getFullYear();\n    const monthDiff = today.getMonth() - birthDate.getMonth();\n    \n    if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birthDate.getDate())) {\n      age--;\n    }\n    \n    return age > 0 ? age : null;\n  } catch (error) {\n    return null;\n  }\n};\n\n// Рассчитываем возраст\nconst calculatedAge = calculateAge(profile.birthday);\n\n// Формируем структурированные данные с еженедельными данными\nconst processedData = {\n  // Информация о пользователе\n  user: {\n    emailId: user.emailId || weeklyRequestBody.userId || '',\n    createdAt: user.createdAt || '',\n    age: calculatedAge,\n    timezone: user.timezone || null,\n    timezoneOffset: user.timezoneOffset || null\n  },\n  \n  // Профиль пользователя (все поля как в оригинале)\n  profile: {\n    birthday: profile.birthday || null,\n    gender: profile.gender || null,\n    height: profile.height || null,\n    currentWeight: weeklyData.currentWeight || profile.currentWeight || null, // приоритет новому весу\n    goalWeight: profile.goalWeight || null,\n    weightLossRate: profile.weightLossRate || null,\n    primaryGoal: profile.primaryGoal || null,\n    activityLevel: profile.activityLevel || null,\n    dietPreference: profile.dietPreference || null,\n    nutritionFocus: profile.nutritionFocus || null,\n    mealFrequency: profile.mealFrequency || null,\n    foodPreferences: profile.foodPreferences || null,\n    foodVariety: profile.foodVariety || null,\n    weightLossPlan: profile.weightLossPlan || null,\n    exerciseIntent: profile.exerciseIntent || null,\n    showCalorieTutorial: profile.showCalorieTutorial || null,\n    useFlexibleCalories: profile.useFlexibleCalories || null,\n    intermittentFasting: profile.intermittentFasting || null,\n    confidenceLevel: profile.confidenceLevel || null,\n    challenges: Array.isArray(profile.challenges) ? profile.challenges : [],\n    mainObstacle: profile.mainObstacle || null,\n    stressResponse: profile.stressResponse || null,\n    adaptability: profile.adaptability || null,\n    challengesView: profile.challengesView || null,\n    setbacksResponse: profile.setbacksResponse || null,\n    decisionMaking: profile.decisionMaking || null,\n    difficultSituationsHandling: profile.difficultSituationsHandling || null,\n    temptationResponse: profile.temptationResponse || null,\n    eatingHabitsAssessment: profile.eatingHabitsAssessment || null\n  },\n  \n  // Настройки единиц измерения\n  settings: {\n    weightUnit: settings.weightUnit || 'kg',\n    heightUnit: settings.heightUnit || 'cm',\n    system: settings.system || 'metric'\n  },\n  \n  // НОВОЕ: Данные еженедельной проверки\n  weeklyData: {\n    currentWeight: weeklyData.currentWeight || null,\n    energyLevel: weeklyData.energyLevel || null,\n    motivationLevel: weeklyData.motivationLevel || null,\n    challenges: weeklyData.challenges || [],\n    dietCompliance: weeklyData.dietCompliance || null,\n    exerciseCompliance: weeklyData.exerciseCompliance || null,\n    sleepQuality: weeklyData.sleepQuality || null,\n    stressLevel: weeklyData.stressLevel || null,\n    completedAt: weeklyData.completedAt || new Date().toISOString(),\n    timestamp: weeklyData.timestamp || new Date().toISOString()\n  }\n};\n\nconsole.log('=== ОБРАБОТАННЫЕ ДАННЫЕ WEBHOOK + WEEKLY ===');\nconsole.log('User emailId:', processedData.user.emailId);\nconsole.log('Weekly currentWeight:', processedData.weeklyData.currentWeight);\nconsole.log('Weekly energyLevel:', processedData.weeklyData.energyLevel);\nconsole.log('Weekly challenges:', processedData.weeklyData.challenges);\n\nreturn [{ json: processedData }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        380,
        0
      ],
      "id": "5d888596-274a-43c8-8796-f13f99be0c90",
      "name": "process_webhook_events"
    },
    {
      "parameters": {
        "url": "=https://bespxpyftmnhbynchywl.supabase.co/rest/v1/profiles",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "supabaseApi",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "mailid",
              "value": "=eq.{{ $('Webhook - Weekly Check').item.json.userId || $('Webhook - Weekly Check').item.json.body?.userId }}"
            },
            {
              "name": "select",
              "value": "locale,timezone,timezone_offset,country,mailid,uuid"
            },
            {
              "name": "limit",
              "value": "1"
            }
          ]
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Accept",
              "value": "application/json"
            }
          ]
        },
        "options": {}
      },
      "id": "59423dbb-b773-4167-aac0-fe2a3f288e9d",
      "name": "Get profiles",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        560,
        0
      ],
      "credentials": {
        "supabaseApi": {
          "id": "8RKkUwkeVmyvS58y",
          "name": "Supabase account NutriCheker"
        }
      }
    },
    {
      "parameters": {
        "url": "=https://bespxpyftmnhbynchywl.supabase.co/rest/v1/meals_added",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "supabaseApi",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "mailid",
              "value": "=eq.{{ $('Webhook - Weekly Check').item.json.userId || $('Webhook - Weekly Check').item.json.body?.userId }}"
            },
            {
              "name": "select",
              "value": "dish,grams,kcal,prot,fat,carb,sugar,fiber,sodium,eaten_at,eaten_day,overallhealthscore"
            },
            {
              "name": "order",
              "value": "eaten_at.desc"
            },
            {
              "name": "limit",
              "value": "50"
            }
          ]
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Accept",
              "value": "application/json"
            }
          ]
        },
        "options": {}
      },
      "id": "bcc1af7b-2c08-4e1c-9dde-196c82140f32",
      "name": "Get meals_added",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        740,
        0
      ],
      "credentials": {
        "supabaseApi": {
          "id": "8RKkUwkeVmyvS58y",
          "name": "Supabase account NutriCheker"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Обработка данных из meals_added (как в оригинале)\nconsole.log('=== УПРОЩЕННАЯ ОБРАБОТКА MEALS ===');\n\n// Получаем данные из предыдущей ноды Get meals_added\nlet rawData = $input.all();\nconsole.log('Получено записей:', rawData.length);\n\n// Проверяем, если данные приходят в обертке\nlet mealsData = rawData;\nif (rawData.length === 1 && Array.isArray(rawData[0])) {\n  mealsData = rawData[0];\n} else if (rawData.length === 1 && rawData[0].json && Array.isArray(rawData[0].json)) {\n  mealsData = rawData[0].json;\n}\n\nconsole.log('Финальное количество блюд для обработки:', mealsData.length);\n\n// Функция для безопасного преобразования в число\nconst safeFloat = (value) => {\n  if (value === null || value === undefined || value === '') {\n    return 0;\n  }\n  const num = parseFloat(value);\n  return isNaN(num) ? 0 : num;\n};\n\n// Обрабатываем каждое блюдо с расширенными нутриентами\nconst processedMeals = mealsData.map((item, index) => {\n  let meal = item;\n  if (item.json) {\n    meal = item.json;\n  }\n  \n  const dishName = meal.dish || 'Неизвестное блюдо';\n  const calories = safeFloat(meal.kcal);\n  const protein = safeFloat(meal.prot);\n  const fat = safeFloat(meal.fat);\n  const carbs = safeFloat(meal.carb);\n  const sugar = safeFloat(meal.sugar);\n  const fiber = safeFloat(meal.fiber);\n  const sodium = safeFloat(meal.sodium);\n  const healthScore = safeFloat(meal.overallhealthscore);\n  \n  return {\n    dish: dishName,\n    calories: calories,\n    protein: protein,\n    fat: fat,\n    carbs: carbs,\n    sugar: sugar,\n    fiber: fiber,\n    sodium: sodium,\n    healthScore: healthScore\n  };\n});\n\n// Рассчитываем общую статистику\nconst totalCalories = processedMeals.reduce((sum, meal) => sum + meal.calories, 0);\nconst averageCalories = processedMeals.length > 0 ? Math.round(totalCalories / processedMeals.length) : 0;\n\n// Формируем результат\nconst result = {\n  meals: processedMeals,\n  summary: {\n    totalMeals: processedMeals.length,\n    totalCalories: totalCalories,\n    averageCalories: averageCalories\n  }\n};\n\nconsole.log('=== СТАТИСТИКА ПИТАНИЯ ===');\nconsole.log('Общее количество блюд:', result.summary.totalMeals);\nconsole.log('Общие калории:', result.summary.totalCalories);\n\nreturn [{ json: result }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        920,
        0
      ],
      "id": "82fef402-e93e-4bd5-a567-cfb675032297",
      "name": "Code"
    },
    {
      "parameters": {
        "jsCode": "// Объединение всех данных + еженедельная проверка\nconsole.log('=== ОБЪЕДИНЕНИЕ ДАННЫХ ПОЛЬЗОВАТЕЛЯ + WEEKLY CHECK ===');\n\n// Получаем данные из всех предыдущих нод\nconst webhookProcessedData = $('process_webhook_events').all();\nconst profilesData = $('Get profiles').all();\nconst mealsProcessedData = $('Code').all();\nconst originalRequest = $('Webhook - Weekly Check').all()[0] || {};\n\nconsole.log('Webhook processed data:', webhookProcessedData.length, 'записей');\nconsole.log('Profiles data:', profilesData.length, 'записей');\nconsole.log('Meals processed data:', mealsProcessedData.length, 'записей');\n\n// Проверяем наличие данных\nif (webhookProcessedData.length === 0) {\n  console.error('❌ Нет обработанных данных webhook');\n  return [{ json: { error: 'No processed webhook data' } }];\n}\n\n// Извлекаем обработанные данные\nconst webhookData = webhookProcessedData[0].json || webhookProcessedData[0];\nconst profileData = profilesData.length > 0 ? (profilesData[0].json || profilesData[0]) : {};\nconst mealsData = mealsProcessedData.length > 0 ? (mealsProcessedData[0].json || mealsProcessedData[0]) : { meals: [], summary: { totalCalories: 0 } };\n\n// Получаем userId\nconst userId = originalRequest.body?.userId || originalRequest.userId || webhookData.user?.emailId;\nconsole.log('User ID:', userId);\n\n// Функция для создания детальной сводки питания с расширенными нутриентами\nconst createDetailedNutritionSummary = (simpleMealsData) => {\n  if (!simpleMealsData || !simpleMealsData.meals) {\n    return {\n      totalCalories: 0,\n      avgCaloriesPerDay: 0,\n      mealCount: 0,\n      allDishes: [],\n      totalProtein: 0,\n      totalFat: 0,\n      totalCarbs: 0,\n      totalSugar: 0,\n      totalFiber: 0,\n      avgHealthScore: 0\n    };\n  }\n\n  const rawMeals = simpleMealsData.meals || [];\n  const totalCalories = rawMeals.reduce((sum, meal) => sum + meal.calories, 0);\n  const totalProtein = rawMeals.reduce((sum, meal) => sum + meal.protein, 0);\n  const totalFat = rawMeals.reduce((sum, meal) => sum + meal.fat, 0);\n  const totalCarbs = rawMeals.reduce((sum, meal) => sum + meal.carbs, 0);\n  const totalSugar = rawMeals.reduce((sum, meal) => sum + meal.sugar, 0);\n  const totalFiber = rawMeals.reduce((sum, meal) => sum + meal.fiber, 0);\n  const avgHealthScore = rawMeals.length > 0 ? Math.round(rawMeals.reduce((sum, meal) => sum + meal.healthScore, 0) / rawMeals.length) : 0;\n  \n  const mealCount = rawMeals.length;\n  const estimatedDays = Math.max(1, Math.min(7, Math.ceil(mealCount / 3)));\n  \n  return {\n    totalCalories: totalCalories,\n    avgCaloriesPerDay: Math.round(totalCalories / estimatedDays),\n    mealCount: mealCount,\n    totalProtein: Math.round(totalProtein),\n    totalFat: Math.round(totalFat),\n    totalCarbs: Math.round(totalCarbs),\n    totalSugar: Math.round(totalSugar),\n    totalFiber: Math.round(totalFiber),\n    avgHealthScore: avgHealthScore,\n    allDishes: rawMeals.map(meal => ({\n      dish: meal.dish,\n      calories: meal.calories,\n      protein: meal.protein,\n      healthScore: meal.healthScore\n    }))\n  };\n};\n\n// Формируем финальные структурированные данные\nconst structuredData = {\n  user: {\n    emailId: userId,\n    age: webhookData.user?.age || null,\n    timezone: profileData.timezone || webhookData.user?.timezone || 'UTC',\n    timezoneOffset: profileData.timezone_offset || webhookData.user?.timezoneOffset || 0,\n    locale: profileData.locale || 'en',\n    country: profileData.country || 'Unknown'\n  },\n  profile: {\n    // Все поля профиля как в оригинале\n    gender: webhookData.profile?.gender || null,\n    height: webhookData.profile?.height || null,\n    currentWeight: webhookData.weeklyData?.currentWeight || webhookData.profile?.currentWeight || null,\n    goalWeight: webhookData.profile?.goalWeight || null,\n    weightLossRate: webhookData.profile?.weightLossRate || null,\n    primaryGoal: webhookData.profile?.primaryGoal || null,\n    activityLevel: webhookData.profile?.activityLevel || null,\n    dietPreference: webhookData.profile?.dietPreference || null,\n    nutritionFocus: webhookData.profile?.nutritionFocus || null,\n    mealFrequency: webhookData.profile?.mealFrequency || null,\n    foodPreferences: webhookData.profile?.foodPreferences || null,\n    foodVariety: webhookData.profile?.foodVariety || null,\n    weightLossPlan: webhookData.profile?.weightLossPlan || null,\n    exerciseIntent: webhookData.profile?.exerciseIntent || null,\n    confidenceLevel: webhookData.profile?.confidenceLevel || null,\n    challenges: webhookData.profile?.challenges || [],\n    mainObstacle: webhookData.profile?.mainObstacle || null,\n    stressResponse: webhookData.profile?.stressResponse || null,\n    adaptability: webhookData.profile?.adaptability || null,\n    decisionMaking: webhookData.profile?.decisionMaking || null,\n    temptationResponse: webhookData.profile?.temptationResponse || null\n  },\n  settings: {\n    weightUnit: webhookData.settings?.weightUnit || 'kg',\n    heightUnit: webhookData.settings?.heightUnit || 'cm',\n    system: webhookData.settings?.system || 'metric'\n  },\n  weeklyNutrition: createDetailedNutritionSummary(mealsData),\n  \n  // НОВОЕ: Данные текущей еженедельной проверки\n  currentWeeklyCheck: {\n    currentWeight: webhookData.weeklyData?.currentWeight || null,\n    energyLevel: webhookData.weeklyData?.energyLevel || null,\n    motivationLevel: webhookData.weeklyData?.motivationLevel || null,\n    challenges: webhookData.weeklyData?.challenges || [],\n    dietCompliance: webhookData.weeklyData?.dietCompliance || null,\n    exerciseCompliance: webhookData.weeklyData?.exerciseCompliance || null,\n    sleepQuality: webhookData.weeklyData?.sleepQuality || null,\n    stressLevel: webhookData.weeklyData?.stressLevel || null,\n    completedAt: webhookData.weeklyData?.completedAt || new Date().toISOString()\n  }\n};\n\nconsole.log('=== ФИНАЛЬНЫЕ ОБЪЕДИНЕННЫЕ ДАННЫЕ ===');\nconsole.log('User:', structuredData.user);\nconsole.log('Weekly Check данные:', structuredData.currentWeeklyCheck);\nconsole.log('Nutrition summary:', {\n  totalCalories: structuredData.weeklyNutrition.totalCalories,\n  mealCount: structuredData.weeklyNutrition.mealCount\n});\n\nreturn [{ json: structuredData }];"
      },
      "id": "526e6c8c-810f-43a9-b61d-2e5082bbc745",
      "name": "Process User Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1080,
        0
      ]
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=You are a professional nutrition consultant providing weekly recommendations. Your tone should be friendly yet formal, informative, and focused on actionable advice.\n\n**USER PROFILE:**\n- Age: {{ $json.user.age || 'not specified' }} years\n- Gender: {{ $json.profile.gender || 'not specified' }}\n- Height: {{ $json.profile.height || 'not specified' }} cm\n- Current weight: {{ $json.profile.currentWeight || 'not specified' }} kg\n- Goal weight: {{ $json.profile.goalWeight || 'not specified' }} kg\n- Primary goal: {{ $json.profile.primaryGoal || 'not specified' }}\n- Diet preference: {{ $json.profile.dietPreference || 'standard' }}\n- Country: {{ $json.user.country }}\n- Language: {{ $json.user.locale }}\n\n**WEEKLY CHECK-IN RESULTS:**\n- **Current weight**: {{ $json.currentWeeklyCheck.currentWeight || 'not provided' }} kg\n- **Energy level**: {{ $json.currentWeeklyCheck.energyLevel || 'not provided' }}\n- **Motivation level**: {{ $json.currentWeeklyCheck.motivationLevel || 'not provided' }}\n- **Current challenges**: {{ ($json.currentWeeklyCheck.challenges || []).join(', ') || 'none reported' }}\n- **Diet compliance**: {{ $json.currentWeeklyCheck.dietCompliance || 'not provided' }}\n- **Exercise compliance**: {{ $json.currentWeeklyCheck.exerciseCompliance || 'not provided' }}\n- **Sleep quality**: {{ $json.currentWeeklyCheck.sleepQuality || 'not provided' }}\n- **Stress level**: {{ $json.currentWeeklyCheck.stressLevel || 'not provided' }}\n\n**NUTRITION DATA (Past Week):**\n- Meals logged: {{ $json.weeklyNutrition.mealCount }}\n- Total calories: {{ $json.weeklyNutrition.totalCalories }} kcal\n- Daily average: {{ $json.weeklyNutrition.avgCaloriesPerDay }} kcal\n- Protein: {{ $json.weeklyNutrition.totalProtein }}g\n- Carbs: {{ $json.weeklyNutrition.totalCarbs }}g\n- Fat: {{ $json.weeklyNutrition.totalFat }}g\n- Sugar: {{ $json.weeklyNutrition.totalSugar }}g\n- Fiber: {{ $json.weeklyNutrition.totalFiber }}g\n- Average health score: {{ $json.weeklyNutrition.avgHealthScore }}/10\n\n**RECENT MEALS:**\n{% for dish in $json.weeklyNutrition.allDishes %}\n- {{ dish.dish }}: {{ dish.calories }} kcal, {{ dish.protein }}g protein (health: {{ dish.healthScore }}/10)\n{% endfor %}\n\n**IMPORTANT CONSIDERATIONS:**\n- User may not have logged all meals - account for potential incomplete data\n- Focus on practical, country-specific food recommendations for {{ $json.user.country }}\n- Address weight progress towards goal ({{ $json.profile.goalWeight }} kg)\n- Consider user's current challenges and compliance levels\n- Provide specific, actionable advice rather than generic tips\n\n**TASK:**\nAnalyze the data and provide concise, practical nutrition recommendations. Focus on:\n1. Weight progress assessment\n2. Nutrition quality based on logged meals\n3. Specific food suggestions available in {{ $json.user.country }}\n4. Addressing reported challenges\n5. Realistic goals for next week\n\nResponse in JSON format:\n\n```json\n{\n  \"nutritionRecommendations\": {\n    \"shortSummary\": \"Brief assessment and main recommendation (MAX 150 characters)\",\n    \"bulletPoints\": [\n      \"Specific action 1 (max 60 chars)\",\n      \"Specific action 2 (max 60 chars)\",\n      \"Specific action 3 (max 60 chars)\"\n    ]\n  },\n  \"weeklyFocus\": {\n    \"mainGoal\": \"Primary focus for next week\",\n    \"specificFoods\": [\n      \"Food recommendation 1 available in {{ $json.user.country }}\",\n      \"Food recommendation 2 available in {{ $json.user.country }}\"\n    ],\n    \"avoidOrReduce\": [\n      \"Food/habit to reduce based on current data\",\n      \"Another area for improvement\"\n    ]\n  },\n  \"progressNotes\": {\n    \"weightProgress\": \"Assessment of weight change towards goal\",\n    \"nutritionQuality\": \"Brief note on meal quality based on logged data\",\n    \"encouragement\": \"Supportive message addressing current challenges\"\n  }\n}\n```\n\n**CRITICAL REQUIREMENTS:**\n1. **FRIENDLY BUT FORMAL** - Professional yet approachable tone\n2. **SPECIFIC RECOMMENDATIONS** - Concrete actions, not vague advice\n3. **COUNTRY-SPECIFIC** - Suggest foods available in {{ $json.user.country }}\n4. **ACCOUNT FOR INCOMPLETE DATA** - Acknowledge user may not log everything\n5. **ADDRESS ACTUAL CHALLENGES** - Reference specific reported issues\n6. **RESPOND IN LANGUAGE** {{ $json.user.locale === 'ru' ? 'Russian' : $json.user.locale === 'es' ? 'Spanish' : 'English' }}\n7. **CONCISE** - Keep recommendations brief and actionable\n8. **WEIGHT-FOCUSED** - Address progress towards {{ $json.profile.goalWeight }} kg goal\n\nRespond ONLY in JSON format, without additional text.",
        "hasOutputParser": true
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.6,
      "position": [
        1240,
        0
      ],
      "id": "7c80b939-dcbb-43ae-868f-0f9292eb787b",
      "name": "Generate AI Recommendations"
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $json }}",
        "options": {
          "responseHeaders": {
            "entries": [
              {
                "name": "Content-Type",
                "value": "application/json"
              },
              {
                "name": "Access-Control-Allow-Origin",
                "value": "*"
              }
            ]
          }
        }
      },
      "id": "ab55b577-5aaa-45c4-99f0-360bae325ba2",
      "name": "Success Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        1580,
        0
      ]
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.5-pro-preview-06-05",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        1260,
        220
      ],
      "id": "8790ba59-0a1c-4211-8148-06c8a50e39c2",
      "name": "Google Gemini Chat Model",
      "credentials": {
        "googlePalmApi": {
          "id": "uebwXI2R84KHmUXO",
          "name": "Google Gemini(PaLM) Api zergovprotas@gmail.com PAID"
        }
      }
    }
  ],
  "connections": {
    "Webhook - Weekly Check": {
      "main": [
        [
          {
            "node": "Get webhook_events",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get webhook_events": {
      "main": [
        [
          {
            "node": "process_webhook_events",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "process_webhook_events": {
      "main": [
        [
          {
            "node": "Get profiles",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get profiles": {
      "main": [
        [
          {
            "node": "Get meals_added",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get meals_added": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Process User Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process User Data": {
      "main": [
        [
          {
            "node": "Generate AI Recommendations",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate AI Recommendations": {
      "main": [
        [
          {
            "node": "Success Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Generate AI Recommendations",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {
    "Webhook - Weekly Check": [
      {
        "headers": {
          "connection": "upgrade",
          "host": "ttagent.website",
          "x-real-ip": "172.71.156.133",
          "x-forwarded-for": "170.51.130.82, 172.71.156.133",
          "x-forwarded-proto": "https",
          "content-length": "721",
          "cf-ray": "9515f30ebb668e03-MIA",
          "accept-encoding": "gzip, br",
          "cdn-loop": "cloudflare; loops=1",
          "accept-language": "en-GB,en-US;q=0.9,en;q=0.8",
          "user-agent": "NutriChecker/1 CFNetwork/1494.0.7 Darwin/24.5.0",
          "cf-visitor": "{\"scheme\":\"https\"}",
          "priority": "u=3, i",
          "content-type": "application/json",
          "cf-connecting-ip": "170.51.130.82",
          "cf-ipcountry": "AR",
          "accept": "*/*"
        },
        "params": {},
        "query": {},
        "body": {
          "userId": "2025061423060351229@nutrichecker.top",
          "body": {
            "userId": "2025061423060351229@nutrichecker.top"
          },
          "weeklyData": {
            "currentWeight": 88,
            "energyLevel": "Very low energy",
            "motivationLevel": "Low motivation",
            "challenges": [
              "Эмоциональное питание",
              "Социальные события",
              "Сладкие соблазны"
            ],
            "dietCompliance": "Poorly followed diet plan",
            "exerciseCompliance": "Did not exercise at all",
            "sleepQuality": "Very poor sleep quality",
            "stressLevel": "Very high stress level",
            "completedAt": "2025-06-17T22:23:05.619Z",
            "timestamp": "2025-06-17T22:23:05.619Z",
            "originalRatings": {
              "energyLevel": 1,
              "motivationLevel": 2,
              "dietCompliance": 2,
              "exerciseCompliance": 1,
              "sleepQuality": 1,
              "stressLevel": 1
            }
          }
        },
        "webhookUrl": "https://ttagent.website/webhook/pro_week_check",
        "executionMode": "production"
      }
    ]
  },
  "meta": {
    "instanceId": "3f98e65bbc53fb913ce632c695b32ab3b2d3d92ced38c3d4d86ebd2965460fa1",
    "version": "updated-no-vitamins-focused-nutrition",
    "description": "Updated workflow: removed vitamins, enhanced nutrition data, friendly but formal tone, country-specific recommendations"
  }
} 