import AsyncStorage from '@react-native-async-storage/async-storage';
import { getUserEmailId } from './onboardingApi';

const RECOMMENDATIONS_WEBHOOK_URL = 'https://ttagent.website/webhook/get-recommendations';

export interface RecommendationsRequest {
  userId: string;
  weeklyNutritionData: {
    totalCalories: number;
    totalProtein: number;
    totalFat: number;
    totalCarbs: number;
    totalSugar: number;
    daysWithData: number;
    averageCalories: number;
    calorieGoal: number;
    proteinGoal: number;
    fatGoal: number;
    carbGoal: number;
    sugarGoal: number;
  };
  userProfile: {
    age: number;
    gender: string;
    height: number;
    weight: number;
    primaryGoal: string;
    goalWeight?: number;
    activityLevel: string;
    dietPreference: string;
    challenges: string[];
    confidenceLevel: number;
  };
  preferences: {
    language: string;
    units: {
      weight: string;
      height: string;
    };
  };
}

export interface RecommendationsResponse {
  success: boolean;
  recommendations: {
    title: string;
    message: string;
    tips: string[];
    priority: 'high' | 'medium' | 'low';
  }[];
  analysis: {
    calorieBalance: string;
    macroBalance: string;
    overallScore: number;
  };
  nextSteps: string[];
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
 */
export const requestPersonalizedRecommendations = async (
  weeklyStats: any,
  userGoals: any,
  userProfile: any
): Promise<RecommendationsResponse> => {
  try {
    console.log('üéØ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏...');
    
    // –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userId = await getUserEmailId();
    
    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    const requestData: RecommendationsRequest = {
      userId,
      weeklyNutritionData: {
        totalCalories: weeklyStats?.totalCalories || 0,
        totalProtein: weeklyStats?.totalProtein || 0,
        totalFat: weeklyStats?.totalFat || 0,
        totalCarbs: weeklyStats?.totalCarbs || 0,
        totalSugar: weeklyStats?.totalSugar || 0,
        daysWithData: weeklyStats?.totalDays || 0,
        averageCalories: weeklyStats?.averageCalories || 0,
        calorieGoal: userGoals?.calories || 2000,
        proteinGoal: userGoals?.protein || 150,
        fatGoal: userGoals?.fat || 67,
        carbGoal: userGoals?.carbs || 250,
        sugarGoal: userGoals?.sugar || 50,
      },
      userProfile: {
        age: userProfile?.age || 30,
        gender: userProfile?.gender || 'male',
        height: userProfile?.height || 175,
        weight: userProfile?.weight || 75,
        primaryGoal: userProfile?.primaryGoal || 'maintain-weight',
        goalWeight: userProfile?.goalWeight,
        activityLevel: userProfile?.activityLevel || 'lightly-active',
        dietPreference: userProfile?.dietPreference || 'standard',
        challenges: userProfile?.challenges || [],
        confidenceLevel: userProfile?.confidenceLevel || 3,
      },
      preferences: {
        language: 'ru',
        units: {
          weight: 'kg',
          height: 'cm',
        },
      },
    };

    console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ:', {
      userId,
      weeklyCalories: requestData.weeklyNutritionData.totalCalories,
      goal: requestData.userProfile.primaryGoal,
      daysWithData: requestData.weeklyNutritionData.daysWithData,
    });

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
    const response = await fetch(RECOMMENDATIONS_WEBHOOK_URL, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'User-Agent': 'NutriChecker-Mobile/1.0',
      },
      body: JSON.stringify(requestData),
    });

    if (!response.ok) {
      throw new Error(`HTTP ${response.status}: ${response.statusText}`);
    }

    const result = await response.json();
    console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω—ã —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:', result);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ª–æ–∫–∞–ª—å–Ω–æ –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
    await AsyncStorage.setItem(
      'last_recommendations',
      JSON.stringify({
        data: result,
        timestamp: new Date().toISOString(),
      })
    );

    return result;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π:', error);
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º fallback —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    return {
      success: false,
      recommendations: [
        {
          title: '–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö',
          message: '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
          tips: [
            '–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø–∏—Ç–∞–Ω–∏–µ',
            '–°–æ–±–ª—é–¥–∞–π—Ç–µ –±–∞–ª–∞–Ω—Å –º–∞–∫—Ä–æ–Ω—É—Ç—Ä–∏–µ–Ω—Ç–æ–≤',
            '–ü–µ–π—Ç–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤–æ–¥—ã',
          ],
          priority: 'medium' as const,
        },
      ],
      analysis: {
        calorieBalance: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö',
        macroBalance: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö',
        overallScore: 50,
      },
      nextSteps: ['–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π'],
    };
  }
};

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏–∑ –∫—ç—à–∞
 */
export const getCachedRecommendations = async (): Promise<RecommendationsResponse | null> => {
  try {
    const cached = await AsyncStorage.getItem('last_recommendations');
    if (!cached) return null;

    const { data, timestamp } = JSON.parse(cached);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —É—Å—Ç–∞—Ä–µ–ª–∏ –ª–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ (24 —á–∞—Å–∞)
    const cacheAge = Date.now() - new Date(timestamp).getTime();
    const maxAge = 24 * 60 * 60 * 1000; // 24 —á–∞—Å–∞
    
    if (cacheAge > maxAge) {
      await AsyncStorage.removeItem('last_recommendations');
      return null;
    }

    return data;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π:', error);
    return null;
  }
}; 