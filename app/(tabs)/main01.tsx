import { Ionicons } from '@expo/vector-icons';
import AsyncStorage from '@react-native-async-storage/async-storage';
import { Image } from 'expo-image';
import { Link, useFocusEffect, useRouter } from 'expo-router';
import React, { useCallback, useEffect, useRef, useState } from 'react';
import { Alert, Dimensions, RefreshControl, ScrollView, Text, TextInput, TouchableOpacity, useColorScheme, View } from 'react-native';
import { SafeAreaView } from 'react-native-safe-area-context';
import CalorieAwareDatePicker, { CalorieStatus, DayCalorieData } from '../../components/CalorieAwareDatePicker';
import CircularProgress from '../../components/CircularProgress';
import { ProductData } from '../../components/ProductCard';
import VitaminMineralCircle from '../../components/VitaminMineralCircle';
import WelcomeCard from '../../components/WelcomeCard';
import { useTranslation } from '../../i18n/i18n';
import { DailyNutritionData, formatDateToString, getDailyNutrition } from '../../services/dailyNutrition';
import { navigateToHistoryDashboard, navigateToProductDetail } from '../../services/navigationService';
import { getRecentScans } from '../../services/scanHistory';
import { getYesterdayCalories, isFirstTimeUser } from '../../utils/calorieCalculations';
import { prefetchImages } from '../../utils/imageCache';
import { getDailyMotivationMessage } from '../../utils/motivationMessages';
import { NutritionCalculationResult } from '../../utils/nutritionCalculator';
import { styles } from './main01.styles';

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å history.tsx)
interface ScanHistoryItem {
  id: string;
  name: string;
  calories: number;
  protein: number;
  fat: number;
  carbs: number;
  image: string;
  timestamp: number;
}

// –¶–≤–µ—Ç–∞ –º–∞–∫—Ä–æ–Ω—É—Ç—Ä–∏–µ–Ω—Ç–æ–≤ (—Ç–∞–∫–∏–µ –∂–µ –∫–∞–∫ –≤ history.tsx)
const MACRO_COLORS = {
  Protein: {
    light: '#FF6B6B',
    dark: '#FF8A8A'
  },
  Fat: {
    light: '#FFD93D',
    dark: '#FFE066'
  },
  Carbs: {
    light: '#4ECDC4',
    dark: '#6FD8D2'
  }
};

interface MacronutrientData {
  current: number;
  goal: number;
  name: string;
  color: string;
  colorDark: string;
}

interface WeeklyStats {
  averageCalories: number;
  averageProtein: number;
  averageFat: number;
  averageCarbs: number;
  averageSugar: number;
  totalCalories: number;
  totalProtein: number;
  totalFat: number;
  totalCarbs: number;
  totalSugar: number;
  daysInGoal: number;
  totalDays: number;
  caloriesTrend: number; // –ø—Ä–æ—Ü–µ–Ω—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –Ω–µ–¥–µ–ª–∏
  proteinPercentage: number;
  fatPercentage: number;
  carbsPercentage: number;
  sugarPercentage: number;
  dailyData: Array<{
    day: string;
    calories: number;
    hasData: boolean;
  }>;
}

interface VitaminMineralData {
  name: string;
  shortName: string;
  current: number;
  goal: number;
  color: string;
  // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å AI –¥–∞–Ω–Ω—ã–º–∏
  currentWeeklyIntake?: string;
  weeklyGoal?: string;
  percentage?: number;
  status?: string;
}

interface WeeklyVitaminMinerals {
  vitamins: VitaminMineralData[];
  minerals: VitaminMineralData[];
  vitaminScore: number;
  mineralScore: number;
  deficiencies: string[];
  recommendations: string[];
  // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—è –∏–∑ AI –æ—Ç–≤–µ—Ç–∞
  overallVitaminScore?: number;
  overallMineralScore?: number;
  deficiencyList?: string[];
}

// –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–∏–ø—ã –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
interface RecommendationsResponse {
  success: boolean;
  recommendations: {
    title: string;
    message: string;
    tips: string[];
    priority: 'high' | 'medium' | 'low';
  }[];
  analysis: {
    calorieBalance: string;
    macroBalance: string;
    overallScore: number;
  };
  nextSteps: string[];
}

// –ù–æ–≤—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è AI —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –∏–∑ N8N
interface AIRecommendationsResponse {
  success: boolean;
  shortSummary: string;
  bulletPoints: string[];
  detailedAnalysis?: string;
  recommendations?: string[];
  timestamp: string;
  // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ –¥–ª—è –≤–∏—Ç–∞–º–∏–Ω–Ω–æ–≥–æ –¥–∞—à–±–æ—Ä–¥–∞
  vitaminMineralDashboard?: {
    vitamins: Array<{
      name: string;
      shortName: string;
      currentWeeklyIntake: string;
      weeklyGoal: string;
      percentage: number;
      status: string;
    }>;
    minerals: Array<{
      name: string;
      shortName: string;
      currentWeeklyIntake: string;
      weeklyGoal: string;
      percentage: number;
      status: string;
    }>;
    overallVitaminScore: number;
    overallMineralScore: number;
    deficiencyList: string[];
    recommendations: string[];
  };
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ Recent Scans –±–ª–æ–∫–µ (—Ç–∞–∫–æ–π –∂–µ –∫–∞–∫ –≤ history.tsx)
const RecentProductItem = ({ 
  item, 
  isDark, 
  t, 
  onDelete 
}: { 
  item: ProductData; 
  isDark: boolean; 
  t: (key: string) => string;
  onDelete?: () => void;
}) => {
  const proteinColor = isDark ? MACRO_COLORS.Protein.dark : MACRO_COLORS.Protein.light;
  const fatColor = isDark ? MACRO_COLORS.Fat.dark : MACRO_COLORS.Fat.light;
  const carbsColor = isDark ? MACRO_COLORS.Carbs.dark : MACRO_COLORS.Carbs.light;

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —ç–∫—Ä–∞–Ω –ø—Ä–æ–¥—É–∫—Ç–∞ (–∫–æ–ø–∏—è –∏–∑ ProductCard)
  const handleProductPress = () => {
    // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º ScanHistoryItem
    const calories = item.calories ?? 0;
    const protein = item.macros?.protein ?? 0;
    const fat = item.macros?.fat ?? 0;
    const carbs = item.macros?.carbs ?? 0;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –≤–∞–ª–∏–¥–Ω—ã
    if (calories === 0 && protein === 0 && fat === 0 && carbs === 0) {
      console.warn('–ü–æ–ø—ã—Ç–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –ø—Ä–æ–¥—É–∫—Ç–∞:', item);
      return; // –ù–µ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã
    }
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ ProductData –≤ ScanHistoryItem –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    const scanItem = {
      id: item.id,
      name: item.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç',
      calories: calories,
      protein: protein,
      fat: fat,
      carbs: carbs,
      image: item.imageUrl,
      date: new Date().toLocaleTimeString(),
      timestamp: item.timestamp?.getTime() ?? Date.now(),
      scanDate: item.timestamp?.toLocaleDateString() ?? new Date().toLocaleDateString(),
      fullData: item.fullData // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    };
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –µ–¥–∏–Ω—ã–π –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å
    navigateToProductDetail(scanItem);
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞
  const handleDelete = async () => {
    const baseMessage = t('common.deleteFromHistoryMessage');
    const message = baseMessage.replace('—É–¥–∞–ª–∏—Ç—å', `—É–¥–∞–ª–∏—Ç—å "${item.name}"`).replace('eliminar', `eliminar "${item.name}"`).replace('delete', `delete "${item.name}"`);
    
    Alert.alert(
      t('common.deleteProduct'),
      message,
      [
        {
          text: t('common.cancel'),
          style: 'cancel',
        },
        {
          text: t('common.delete'),
          style: 'destructive',
          onPress: async () => {
            try {
              const { deleteScanFromHistory } = await import('../../services/scanHistory');
              // –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π ID –∏–∑ —Å–æ—Å—Ç–∞–≤–Ω–æ–≥–æ ID (–¥–æ –ø–µ—Ä–≤–æ–≥–æ –¥–µ—Ñ–∏—Å–∞)
              const originalId = item.id.split('-')[0];
              console.log('üóëÔ∏è –£–¥–∞–ª—è–µ–º –ø—Ä–æ–¥—É–∫—Ç –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π. –°–æ—Å—Ç–∞–≤–Ω–æ–π ID:', item.id, '–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π ID:', originalId);
              const success = await deleteScanFromHistory(originalId);
              if (success && onDelete) {
                onDelete(); // –í—ã–∑—ã–≤–∞–µ–º callback –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞
              }
            } catch (error) {
              console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞:', error);
              Alert.alert(t('common.error'), t('common.failedToDeleteProduct'));
            }
          },
        },
      ]
    );
  };

  return (
    <TouchableOpacity onPress={handleProductPress}>
      <View style={[styles.recentProductItem, isDark && styles.darkRecentProductItem]}>
        <Image 
          source={{ uri: item.imageUrl }} 
          style={styles.recentProductImage}
          contentFit="cover"
          cachePolicy="memory-disk"
          transition={200} 
          placeholder={{ blurhash: 'LGF5?xYk^6#M@-5c,1J5@[or[Q6.' }}
          onError={(error: any) => {
            console.warn('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ RecentProductItem:', error);
          }}
          recyclingKey={item.id}
        />
        <View style={styles.recentProductInfoContainer}>
          <View style={styles.recentProductHeader}>
            <Text style={[styles.recentProductName, isDark && styles.darkText]} numberOfLines={1}>{item.name}</Text>
            
            {/* –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è */}
            <TouchableOpacity 
              style={styles.recentDeleteButton}
              onPress={handleDelete}
              hitSlop={{ top: 10, bottom: 10, left: 10, right: 10 }}
            >
              <Ionicons 
                name="trash-outline" 
                size={16} 
                color={isDark ? "#888888" : "#666666"} 
              />
            </TouchableOpacity>
          </View>
          <Text style={[styles.recentCaloriesText, isDark && styles.darkText]}>{item.calories ?? 0} {t('history.calories')}</Text>
          <View style={styles.recentMacrosRowScanned}>
            <View style={styles.recentMacroDetail}>
              <View style={[styles.recentMacroCircle, { backgroundColor: proteinColor }]}>
                <Text style={styles.recentMacroLetter}>P</Text>
              </View>
              <Text style={[styles.recentMacroValue, isDark && styles.darkTextSecondary]}>{Math.round(item.macros?.protein ?? 0)}{t('common.gram')}</Text>
            </View>
            <View style={styles.recentMacroDetail}>
              <View style={[styles.recentMacroCircle, { backgroundColor: fatColor }]}>
                <Text style={styles.recentMacroLetter}>F</Text>
              </View>
              <Text style={[styles.recentMacroValue, isDark && styles.darkTextSecondary]}>{Math.round(item.macros?.fat ?? 0)}{t('common.gram')}</Text>
            </View>
            <View style={styles.recentMacroDetail}>
              <View style={[styles.recentMacroCircle, { backgroundColor: carbsColor }]}>
                <Text style={styles.recentMacroLetter}>C</Text>
              </View>
              <Text style={[styles.recentMacroValue, isDark && styles.darkTextSecondary]}>{Math.round(item.macros?.carbs ?? 0)}{t('common.gram')}</Text>
            </View>
          </View>
        </View>
      </View>
    </TouchableOpacity>
  );
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ–¥–∞–≤–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ (–∏–∑ –¥–Ω–µ–≤–Ω–∏–∫–∞)
const RecentAddedProductItem = ({ 
  item, 
  isDark, 
  t, 
  onDelete 
}: { 
  item: ProductData; 
  isDark: boolean; 
  t: (key: string) => string;
  onDelete?: () => void;
}) => {
  const router = useRouter();
  
  const proteinColor = isDark ? MACRO_COLORS.Protein.dark : MACRO_COLORS.Protein.light;
  const fatColor = isDark ? MACRO_COLORS.Fat.dark : MACRO_COLORS.Fat.light;
  const carbsColor = isDark ? MACRO_COLORS.Carbs.dark : MACRO_COLORS.Carbs.light;

  const handleProductPress = () => {
    // –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ RecentProductItem, –Ω–æ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏–∑ –¥–Ω–µ–≤–Ω–∏–∫–∞
    const scanItem = {
      id: item.id,
      name: item.name,
      calories: item.calories ?? 0,
      protein: item.macros?.protein ?? 0,
      fat: item.macros?.fat ?? 0,
      carbs: item.macros?.carbs ?? 0,
      sugar: 0,
      image: item.imageUrl,
      timestamp: item.timestamp?.getTime() ?? Date.now(),
      scanDate: item.timestamp?.toLocaleDateString() ?? new Date().toLocaleDateString(),
      date: item.timestamp?.toLocaleDateString() ?? new Date().toLocaleDateString(), // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ date
      fullData: item.fullData
    };
    
    navigateToProductDetail(scanItem);
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ –∏–∑ –¥–Ω–µ–≤–Ω–∏–∫–∞ –ø–∏—Ç–∞–Ω–∏—è
  const handleDeleteFromDiary = async () => {
    const baseMessage = t('common.deleteFromDiaryMessage');
    const message = baseMessage.replace('—É–¥–∞–ª–∏—Ç—å', `—É–¥–∞–ª–∏—Ç—å "${item.name}"`).replace('eliminar', `eliminar "${item.name}"`).replace('delete', `delete "${item.name}"`);
    
    Alert.alert(
      t('common.deleteFromDiary'),
      message,
      [
        {
          text: t('common.cancel'),
          style: 'cancel',
        },
        {
          text: t('common.delete'),
          style: 'destructive',
          onPress: async () => {
            try {
              const { removeProductFromDay } = await import('../../services/dailyNutrition');
              
              console.log('üóëÔ∏è –£–¥–∞–ª—è–µ–º –ø—Ä–æ–¥—É–∫—Ç –∏–∑ –¥–Ω–µ–≤–Ω–∏–∫–∞:', item.name, 'ID:', item.id);
              
              // –£–¥–∞–ª—è–µ–º –ø—Ä–æ–¥—É–∫—Ç –∏–∑ –¥–Ω–µ–≤–Ω–∏–∫–∞ –ø–∏—Ç–∞–Ω–∏—è
              const updatedData = await removeProductFromDay(item.id);
              
              if (updatedData && onDelete) {
                console.log('‚úÖ –ü—Ä–æ–¥—É–∫—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –¥–Ω–µ–≤–Ω–∏–∫–∞');
                onDelete(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
              }
            } catch (error) {
              console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞ –∏–∑ –¥–Ω–µ–≤–Ω–∏–∫–∞:', error);
              Alert.alert(t('common.error'), t('common.failedToDeleteFromDiary'));
            }
          },
        },
      ]
    );
  };

  return (
    <TouchableOpacity onPress={handleProductPress}>
      <View style={[styles.recentProductItem, isDark && styles.darkRecentProductItem]}>
        <Image 
          source={{ uri: item.imageUrl }} 
          style={styles.recentProductImage}
          contentFit="cover"
          cachePolicy="memory-disk"
          transition={200} 
          placeholder={{ blurhash: 'LGF5?xYk^6#M@-5c,1J5@[or[Q6.' }}
          onError={(error: any) => {
            console.warn('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ RecentAddedProductItem:', error);
          }}
          recyclingKey={item.id}
        />
        <View style={styles.recentProductInfoContainer}>
          <View style={styles.recentProductHeader}>
            <Text style={[styles.recentProductName, isDark && styles.darkText]} numberOfLines={1}>{item.name}</Text>
            
            {/* –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –¥–Ω–µ–≤–Ω–∏–∫–∞ */}
            <TouchableOpacity 
              style={styles.recentDeleteButton}
              onPress={handleDeleteFromDiary}
              hitSlop={{ top: 10, bottom: 10, left: 10, right: 10 }}
            >
              <Ionicons 
                name="trash-outline" 
                size={16} 
                color={isDark ? "#888888" : "#666666"} 
              />
            </TouchableOpacity>
          </View>
          <Text style={[styles.recentCaloriesText, isDark && styles.darkText]}>{item.calories ?? 0} {t('history.calories')}</Text>
          <View style={styles.recentMacrosRowScanned}>
            <View style={styles.recentMacroDetail}>
              <View style={[styles.recentMacroCircle, { backgroundColor: proteinColor }]}>
                <Text style={styles.recentMacroLetter}>P</Text>
              </View>
              <Text style={[styles.recentMacroValue, isDark && styles.darkTextSecondary]}>{Math.round(item.macros?.protein ?? 0)}{t('common.gram')}</Text>
            </View>
            <View style={styles.recentMacroDetail}>
              <View style={[styles.recentMacroCircle, { backgroundColor: fatColor }]}>
                <Text style={styles.recentMacroLetter}>F</Text>
              </View>
              <Text style={[styles.recentMacroValue, isDark && styles.darkTextSecondary]}>{Math.round(item.macros?.fat ?? 0)}{t('common.gram')}</Text>
            </View>
            <View style={styles.recentMacroDetail}>
              <View style={[styles.recentMacroCircle, { backgroundColor: carbsColor }]}>
                <Text style={styles.recentMacroLetter}>C</Text>
              </View>
              <Text style={[styles.recentMacroValue, isDark && styles.darkTextSecondary]}>{Math.round(item.macros?.carbs ?? 0)}{t('common.gram')}</Text>
            </View>
          </View>
        </View>
      </View>
    </TouchableOpacity>
  );
};

// –í—Ä–µ–º–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π (–∑–∞–≥–ª—É—à–∫–∞)
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ AI —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –∏–∑ N8N
const requestAIRecommendations = async (userEmail: string, locale: string): Promise<AIRecommendationsResponse> => {
  try {
    console.log('ü§ñ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ N8N –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è AI —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π...');
    
    const response = await fetch('https://ttagent.website/webhook/get-recommendations', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        userId: userEmail,
        requestedAt: new Date().toISOString(),
        locale: locale, // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —è–∑—ã–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
      }),
    });

    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }

    const data = await response.json();
    console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω—ã AI —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:', data);

    // N8N –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∫–∞–∫ –æ–±—ä–µ–∫—Ç —Å –ø–æ–ª–µ–º text
    let aiData;
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏—à–ª–∏ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
      if (data && data.text) {
        // –ò–∑–≤–ª–µ–∫–∞–µ–º JSON –∏–∑ markdown –±–ª–æ–∫–∞
        const jsonText = data.text.replace(/```json\n/, '').replace(/\n```$/, '');
        aiData = JSON.parse(jsonText);
        console.log('‚úÖ AI –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω—ã:', aiData);
      } else if (Array.isArray(data) && data.length > 0 && data[0].text) {
        // Fallback –¥–ª—è —Å–ª—É—á–∞—è –µ—Å–ª–∏ N8N –≤–µ—Ä–Ω–µ—Ç –º–∞—Å—Å–∏–≤
        const jsonText = data[0].text.replace(/```json\n/, '').replace(/\n```$/, '');
        aiData = JSON.parse(jsonText);
        console.log('‚úÖ AI –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω—ã (–º–∞—Å—Å–∏–≤):', aiData);
      } else {
        console.error('‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç N8N:', data);
        throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç N8N');
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ AI –æ—Ç–≤–µ—Ç–∞:', error);
      console.error('‚ùå –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', data);
      throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç AI');
    }

    return {
      success: true,
      shortSummary: aiData.nutritionRecommendations?.shortSummary || '–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≥–æ—Ç–æ–≤—ã',
      bulletPoints: aiData.nutritionRecommendations?.bulletPoints || ['–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø–∏—Ç–∞–Ω–∏–µ'],
      detailedAnalysis: aiData.calorieAnalysis?.assessment,
      recommendations: aiData.nutritionRecommendations,
      timestamp: new Date().toISOString(),
      vitaminMineralDashboard: aiData.vitaminMineralDashboard
    };
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ AI —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π:', error);
    throw error;
  }
};

const requestPersonalizedRecommendations = async (
  weeklyStats: any,
  userGoals: any,
  userProfile: any
): Promise<RecommendationsResponse> => {
  // –ò–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–¥–µ—Ä–∂–∫—É —Å–µ—Ç–∏
  await new Promise(resolve => setTimeout(resolve, 2000));
  
  return {
    success: true,
    recommendations: [
      {
        title: '–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏',
        message: '–ù–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é, –º—ã –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø–∏—Ç–∞–Ω–∏—è.',
        tips: [
          '–£–≤–µ–ª–∏—á—å—Ç–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –±–µ–ª–∫–∞ –Ω–∞ 15%',
          '–î–æ–±–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ –æ–≤–æ—â–µ–π –≤ —Ä–∞—Ü–∏–æ–Ω',
          '–ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–π—Ç–µ —Ä–∞–∑–º–µ—Ä –ø–æ—Ä—Ü–∏–π',
          '–ü–µ–π—Ç–µ –±–æ–ª—å—à–µ –≤–æ–¥—ã –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è'
        ],
        priority: 'high' as const,
      },
    ],
    analysis: {
      calorieBalance: '–°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π',
      macroBalance: '–¢—Ä–µ–±—É–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏',
      overallScore: 75,
    },
    nextSteps: [
      '–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø–∏—Ç–∞–Ω–∏–µ',
      '–î–æ–±–∞–≤—å—Ç–µ —Ñ–∏–∑–∏—á–µ—Å–∫—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å',
      '–ü–ª–∞–Ω–∏—Ä—É–π—Ç–µ –ø—Ä–∏–µ–º—ã –ø–∏—â–∏ –∑–∞—Ä–∞–Ω–µ–µ'
    ],
  };
};

export default function Main01Screen() { 
  const colorScheme = useColorScheme();
  const isDark = colorScheme === 'dark';
  const { t, locale } = useTranslation();
  const router = useRouter();
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è –∏–∑ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
  const [nutritionPlan, setNutritionPlan] = useState<NutritionCalculationResult | null>(null);
  
  // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ü–µ–ª–µ–π –ø–∏—Ç–∞–Ω–∏—è
  const [isEditingGoals, setIsEditingGoals] = useState(false);
  const [editedGoals, setEditedGoals] = useState({
    calories: '',
    protein: '',
    fat: '',
    carbs: '',
    sugar: ''
  });
  
  // –ó–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –¥–Ω–µ–≤–Ω—ã—Ö —Ü–µ–ª–µ–π (fallback –µ—Å–ª–∏ –ø–ª–∞–Ω –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω)
  const defaultCalorieGoal = 2000;
  const defaultMaxSugar = 25;
  const defaultProteinGoal = 120;
  const defaultFatGoal = 110;
  const defaultCarbGoal = 190;
  
  // –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  const dailyCalorieGoal = nutritionPlan?.targetCalories || defaultCalorieGoal;
  const maxSugar = nutritionPlan?.maxHiddenSugar || defaultMaxSugar;
  const proteinGoal = nutritionPlan?.dailyMacros.protein || defaultProteinGoal;
  const fatGoal = nutritionPlan?.dailyMacros.fat || defaultFatGoal;
  const carbGoal = nutritionPlan?.dailyMacros.carbs || defaultCarbGoal;
  
  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –≤ useEffect –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–Ω–µ–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–∏—Ç–∞–Ω–∏—è
  const [dailyNutritionData, setDailyNutritionData] = useState<DailyNutritionData | null>(null);
  const [currentDate, setCurrentDate] = useState<Date>(new Date());
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∫–∞–ª–æ—Ä–∏—è—Ö –∑–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–Ω–∏
  const [historicalCalorieData, setHistoricalCalorieData] = useState<DayCalorieData[]>([]);
  
  // –ó–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
  const consumedCalories = dailyNutritionData?.caloriesConsumed || 0;
  const burnedCalories = 0; // –í —Ç–µ–∫—É—â–µ–π –≤–µ—Ä—Å–∏–∏ –Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —Å–æ–∂–∂–µ–Ω–Ω—ã–µ –∫–∞–ª–æ—Ä–∏–∏
  const caloriesActuallyConsumed = consumedCalories - burnedCalories;
  const caloriesLeft = dailyCalorieGoal - caloriesActuallyConsumed; 
  const circularProgressPercentage = (caloriesActuallyConsumed / dailyCalorieGoal) * 100;
  
  // –î–∞–Ω–Ω—ã–µ –ø–æ —Å–∫—Ä—ã—Ç–æ–º—É —Å–∞—Ö–∞—Ä—É
  const currentSugar = dailyNutritionData?.sugar || 0;
  
  // –ú–∞–∫—Ä–æ–Ω—É—Ç—Ä–∏–µ–Ω—Ç—ã —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
  const [macronutrients, setMacronutrients] = useState<MacronutrientData[]>([
    { name: t('dashboard.protein'), current: 0, goal: proteinGoal, color: '#FF8A80', colorDark: '#FF6B6B' },
    { name: t('dashboard.fat'), current: 0, goal: fatGoal, color: '#FFCF50', colorDark: '#FFD166' },
    { name: t('dashboard.carbs'), current: 0, goal: carbGoal, color: '#80D8FF', colorDark: '#06D6A0' },
    { name: t('nutrition.hiddenSugar'), current: 0, goal: maxSugar, color: '#FF3B30', colorDark: '#FF3B30' },
  ]);
  
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
  const [recentScans, setRecentScans] = useState<ProductData[]>([]);
  const [recentAdded, setRecentAdded] = useState<ProductData[]>([]);
  const [refreshing, setRefreshing] = useState(false);
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –±–ª–æ–∫–∞ Recent Scans/Added —Å –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–º —Å–∫—Ä–æ–ª–ª–æ–º
  const [currentRecentSlide, setCurrentRecentSlide] = useState(0);
  const recentScrollViewRef = useRef<ScrollView>(null);
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –Ω–µ–¥–µ–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ —Å–∫—Ä–æ–ª–ª–∞
  const [weeklyStats, setWeeklyStats] = useState<WeeklyStats | null>(null);
  const [weeklyVitaminMinerals, setWeeklyVitaminMinerals] = useState<WeeklyVitaminMinerals | null>(null);
  const [currentSlide, setCurrentSlide] = useState(0);
  const scrollViewRef = useRef<ScrollView>(null);
  const screenWidth = Dimensions.get('window').width;
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –º–æ—Ç–∏–≤–∏—Ä—É—é—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
  const [dailyMotivationMessage, setDailyMotivationMessage] = useState<string>('');
  
  // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
  const [isLoadingRecommendations, setIsLoadingRecommendations] = useState(false);
  const [recommendationsProgress, setRecommendationsProgress] = useState(0);
  const [recommendationsProgressText, setRecommendationsProgressText] = useState('');
  const [personalizedRecommendations, setPersonalizedRecommendations] = useState<RecommendationsResponse | null>(null);
  
  // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è AI —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –∏–∑ N8N
  const [aiRecommendations, setAiRecommendations] = useState<AIRecommendationsResponse | null>(null);
  const [lastRecommendationDate, setLastRecommendationDate] = useState<string | null>(null);
  const [recommendationError, setRecommendationError] = useState<boolean>(false);
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
  const [isRecommendationsExpanded, setIsRecommendationsExpanded] = useState(false);
  const [isVitaminRecommendationsExpanded, setIsVitaminRecommendationsExpanded] = useState(false);
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞—Ç—ã
  const handleDateChange = (date: Date) => {
    console.log(`–í—ã–±—Ä–∞–Ω–∞ –Ω–æ–≤–∞—è –¥–∞—Ç–∞: ${formatDateToString(date)}`);
    setCurrentDate(date);
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç—ã –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–µ–µ
    loadNutritionData(date);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ Recently Added –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç—ã
    loadRecentAdded(date);
    
    // –ë–æ–ª—å—à–µ –Ω–µ –∑–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –∫–∞–∂–¥–æ–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –¥–∞—Ç—ã
    // –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–±–ª–µ–º —Å –ø–µ—Ä–µ–∑–∞–ø–∏—Å—å—é –¥–∞–Ω–Ω—ã—Ö –∏ –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
  };
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ pull-to-refresh
  const onRefresh = useCallback(() => {
    setRefreshing(true);
    Promise.all([
      loadNutritionData(currentDate),
      loadRecentScans(),
      loadRecentAdded()
    ]).finally(() => {
      setRefreshing(false);
    });
  }, [currentDate]);
  
  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫—ç—à–µ–º AI —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
  const saveAIRecommendationsToCache = async (recommendations: AIRecommendationsResponse, date: string) => {
    try {
      await AsyncStorage.setItem('aiRecommendations', JSON.stringify(recommendations));
      await AsyncStorage.setItem('lastRecommendationDate', date);
      console.log('üíæ AI —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –∫—ç—à –¥–ª—è –¥–∞—Ç—ã:', date);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è AI —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π:', error);
    }
  };

  const loadAIRecommendationsFromCache = async () => {
    try {
      const [cachedRecommendations, cachedDate] = await Promise.all([
        AsyncStorage.getItem('aiRecommendations'),
        AsyncStorage.getItem('lastRecommendationDate')
      ]);

      if (cachedRecommendations && cachedDate) {
        const today = new Date().toDateString();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫—ç—à –∞–∫—Ç—É–∞–ª–µ–Ω (—Å–µ–≥–æ–¥–Ω—è—à–Ω—è—è –¥–∞—Ç–∞)
        if (cachedDate === today) {
          const recommendations = JSON.parse(cachedRecommendations) as AIRecommendationsResponse;
          
          // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ª—å–∫–æ —É—Å–ø–µ—à–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏–∑ –∫—ç—à–∞
          if (recommendations.success) {
            setAiRecommendations(recommendations);
            setLastRecommendationDate(cachedDate);
            setRecommendationError(false);
            console.log('üì± –ó–∞–≥—Ä—É–∂–µ–Ω—ã AI —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏–∑ –∫—ç—à–∞ –¥–ª—è –¥–∞—Ç—ã:', cachedDate);
            console.log('üìä –î–∞–Ω–Ω—ã–µ –Ω–µ–¥–µ–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π:', {
              shortSummary: recommendations.shortSummary,
              bulletPointsCount: recommendations.bulletPoints?.length || 0,
              bulletPoints: recommendations.bulletPoints,
              hasVitaminData: !!recommendations.vitaminMineralDashboard
            });
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏—Ç–∞–º–∏–Ω–Ω—ã–π –¥–∞—à–±–æ—Ä–¥ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –æ—Ç AI
            if (recommendations.vitaminMineralDashboard) {
              console.log('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏—Ç–∞–º–∏–Ω–Ω—ã–π –¥–∞—à–±–æ—Ä–¥ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –æ—Ç AI...');
              await loadWeeklyVitaminMinerals(recommendations);
            }
            
            return true;
          } else {
            // –ï—Å–ª–∏ –≤ –∫—ç—à–µ –æ—à–∏–±–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –æ—á–∏—â–∞–µ–º –∏—Ö
            console.log('üóëÔ∏è –í –∫—ç—à–µ –æ—à–∏–±–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –æ—á–∏—â–∞–µ–º');
            await AsyncStorage.removeItem('aiRecommendations');
            await AsyncStorage.removeItem('lastRecommendationDate');
          }
        } else {
          console.log('üóëÔ∏è –ö—ç—à —É—Å—Ç–∞—Ä–µ–ª, –æ—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ');
          await AsyncStorage.removeItem('aiRecommendations');
          await AsyncStorage.removeItem('lastRecommendationDate');
        }
      }
      return false;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ AI —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –∏–∑ –∫—ç—à–∞:', error);
      return false;
    }
  };

  const canRequestRecommendations = () => {
    const today = new Date().toDateString();
    // –ö–Ω–æ–ø–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –µ—Å–ª–∏:
    // 1. –°–µ–≥–æ–¥–Ω—è –µ—â–µ –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    // 2. –ò–ª–∏ –±—ã–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–º –∑–∞–ø—Ä–æ—Å–µ
    return !lastRecommendationDate || lastRecommendationDate !== today || recommendationError;
  };

  // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
  useEffect(() => {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ AsyncStorage
    const loadSavedData = async () => {
      try {
        const savedHistoricalData = await AsyncStorage.getItem('historicalCalorieData');
        if (savedHistoricalData) {
          const parsedData = JSON.parse(savedHistoricalData) as DayCalorieData[];
          // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫–∏ –¥–∞—Ç –≤ –æ–±—ä–µ–∫—Ç—ã Date
          const processedData = parsedData.map(item => ({
            ...item,
            date: new Date(item.date)
          }));
          console.log(`–ó–∞–≥—Ä—É–∂–µ–Ω—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: ${processedData.length} –∑–∞–ø–∏—Å–µ–π`);
          setHistoricalCalorieData(processedData);
        }

        // –ó–∞–≥—Ä—É–∂–∞–µ–º AI —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏–∑ –∫—ç—à–∞
        await loadAIRecommendationsFromCache();
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', error);
      }
    };
    
    loadSavedData();
  }, []);
  
  // –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–ª–∏ –º–∞–∫—Ä–æ–Ω—É—Ç—Ä–∏–µ–Ω—Ç–æ–≤ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è
  useEffect(() => {
    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–ª–µ–π –ø–∏—Ç–∞–Ω–∏—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–∏
    console.log('üéØ –û–±–Ω–æ–≤–ª–µ–Ω—ã —Ü–µ–ª–∏ –ø–∏—Ç–∞–Ω–∏—è:', {
      hasNutritionPlan: !!nutritionPlan,
      dailyCalorieGoal,
      proteinGoal,
      fatGoal,
      carbGoal,
      maxSugar,
      source: nutritionPlan ? '–ò–ó –ü–õ–ê–ù–ê' : '–ü–û –£–ú–û–õ–ß–ê–ù–ò–Æ'
    });
    
    setMacronutrients(prevMacros => [
      { ...prevMacros[0], goal: proteinGoal },
      { ...prevMacros[1], goal: fatGoal },
      { ...prevMacros[2], goal: carbGoal },
      { ...(prevMacros[3] || { name: t('nutrition.hiddenSugar'), current: 0, color: '#FF3B30', colorDark: '#FF3B30' }), goal: maxSugar },
    ]);
  }, [proteinGoal, fatGoal, carbGoal, maxSugar]);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–µ —ç–∫—Ä–∞–Ω–∞
  // –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ –¥–≤–∞ useEffect –¥–ª—è –¥–≤—É—Ö —Ä–∞–∑–Ω—ã—Ö —Ñ–∞–∑ –∑–∞–≥—Ä—É–∑–∫–∏
  useEffect(() => {
    console.log('–ü–µ—Ä–≤–∏—á–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö - —Ñ–∞–∑–∞ 1');
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –∏–∑ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
    loadNutritionPlan();
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å
    loadNutritionData(currentDate);
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–∫–∞–Ω—ã
    loadRecentScans();
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã
    loadRecentAdded();
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–µ–¥–µ–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    loadWeeklyStats();
    
    // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
    setCalorieData(getCalorieData());
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ 13 –∏ 12 –º–∞—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    loadHistoricalData();
  }, []);
  
  // –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ –æ—Ç–∫–ª—é—á–∏–ª–∏ –ø–æ–ª–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É –∏—Å—Ç–æ—Ä–∏–∏ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∞ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
  useEffect(() => {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ –Ω–∞—á–∞–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–µ
    // –ò –±–æ–ª—å—à–µ –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ–º –Ω–∏–∫–∞–∫–∏—Ö —Ç–∞–π–º–µ—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    console.log('–ù–∞—á–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö');
    loadHistoricalData();
    
    // –ù–µ –∑–∞–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –ø–æ —Ç–∞–π–º–µ—Ä—É, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –ø—Ä–∏–≤–æ–¥–∏—Ç –∫ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö
  }, []);
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –Ω–∞ —ç–∫—Ä–∞–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞)
  useFocusEffect(
    useCallback(() => {
      console.log('–≠–∫—Ä–∞–Ω –ø–æ–ª—É—á–∏–ª —Ñ–æ–∫—É—Å, –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–∏—Ç–∞–Ω–∏—è...');
      
      // –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–±–∏—Ä–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
      // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –ª—é–±—ã–µ –¥–∞—Ç—ã
      // const today = new Date();
      // const isNewDay = !isSameDay(currentDate, today);
      // 
      // if (isNewDay) {
      //   console.log(`üóìÔ∏è –î–µ–Ω—å —Å–º–µ–Ω–∏–ª—Å—è! –ë—ã–ª–æ: ${formatDateToString(currentDate)}, —Å—Ç–∞–ª–æ: ${formatDateToString(today)}`);
      //   setCurrentDate(today);
      // }
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è (–º–æ–∂–µ—Ç –æ–±–Ω–æ–≤–∏—Ç—å—Å—è –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞)
      loadNutritionPlan();
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¢–ï–ö–£–©–ï–ô –í–´–ë–†–ê–ù–ù–û–ô –¥–∞—Ç—ã (–Ω–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º –Ω–∞ —Å–µ–≥–æ–¥–Ω—è)
      loadNutritionData(currentDate);
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–∫–∞–Ω—ã
      loadRecentScans();
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç—ã
      loadRecentAdded(currentDate);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–µ–¥–µ–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      loadWeeklyStats();

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ—Ç–∏–≤–∏—Ä—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      loadDailyMotivationMessage();
      
      return () => {};
    }, [currentDate])
  );

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤–∏—Ç–∞–º–∏–Ω–æ–≤ –∏ –º–∏–Ω–µ—Ä–∞–ª–æ–≤ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–µ–¥–µ–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  useFocusEffect(
    useCallback(() => {
      if (weeklyStats) {
        loadWeeklyVitaminMinerals();
      }
    }, [weeklyStats])
  );
  
  // –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø–∏—Ç–∞–Ω–∏–∏ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É
  const loadNutritionData = async (date: Date) => {
    try {
      console.log('üîÑ === –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–• –ü–ò–¢–ê–ù–ò–Ø ===');
      console.log('üìÖ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–∞—Ç—ã:', formatDateToString(date));
      
      const dateString = formatDateToString(date);
      console.log(`–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ –ø–∏—Ç–∞–Ω–∏–∏ –∑–∞ ${dateString}...`);
      
      const nutritionData = await getDailyNutrition(dateString);
      setDailyNutritionData(nutritionData);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –º–∞–∫—Ä–æ–Ω—É—Ç—Ä–∏–µ–Ω—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      setMacronutrients([
        { name: t('dashboard.protein'), current: nutritionData?.protein || 0, goal: proteinGoal, color: '#FF8A80', colorDark: '#FF6B6B' },
        { name: t('dashboard.fat'), current: nutritionData?.fat || 0, goal: fatGoal, color: '#FFCF50', colorDark: '#FFD166' },
        { name: t('dashboard.carbs'), current: nutritionData?.carbs || 0, goal: carbGoal, color: '#80D8FF', colorDark: '#06D6A0' },
        { name: t('nutrition.hiddenSugar'), current: nutritionData?.sugar || 0, goal: maxSugar, color: '#FF3B30', colorDark: '#FF3B30' },
      ]);
       
      console.log(`–ó–∞–≥—Ä—É–∂–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ –ø–∏—Ç–∞–Ω–∏–∏: –∫–∞–ª–æ—Ä–∏–∏=${nutritionData?.caloriesConsumed || 0}, —Å–∞—Ö–∞—Ä=${nutritionData?.sugar || 0}`);
      
      // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ
      const today = new Date();
      const isDateToday = isSameDay(date, today);
      const existingData = historicalCalorieData.find(d => 
        isSameDay(new Date(d.date), date)
      );
      
      // –í–ê–ñ–ù–û: –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –±—É–¥—É—â–∏—Ö –¥–∞—Ç!
      const isFutureDate = isDateAfterToday(date);
      if (isFutureDate) {
        console.log(`üö´ –ë—É–¥—É—â–∞—è –¥–∞—Ç–∞ ${formatDateToString(date)}: –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å`);
        
        // –ï—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∑–∞–ø–∏—Å—å –¥–ª—è –±—É–¥—É—â–µ–π –¥–∞—Ç—ã - —É–¥–∞–ª—è–µ–º –µ—ë
        if (existingData) {
          console.log(`üóëÔ∏è –£–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –±—É–¥—É—â–µ–π –¥–∞—Ç—ã ${formatDateToString(date)}`);
          setHistoricalCalorieData(prevData => 
            prevData.filter(d => !isSameDay(new Date(d.date), date))
          );
        }
        return; // –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –±—É–¥—É—â–∏—Ö –¥–∞—Ç
      }
      
      // –î–ª—è —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è: –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª—è–µ–º –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏, –µ—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö
      if (isDateToday && (!nutritionData || nutritionData.caloriesConsumed <= 0)) {
        console.log(`–¢–µ–∫—É—â–∏–π –¥–µ–Ω—å ${formatDateToString(date)}: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö, —É–¥–∞–ª—è–µ–º –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏`);
      
        // –ï—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å - —É–¥–∞–ª—è–µ–º –µ—ë
        if (existingData) {
          setHistoricalCalorieData(prevData => 
            prevData.filter(d => !isSameDay(new Date(d.date), date))
          );
        }
      } 
      // –î–ª—è –¥–Ω–µ–π —Å –¥–∞–Ω–Ω—ã–º–∏: –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö –≤ –∏—Å—Ç–æ—Ä–∏—é
      else if (nutritionData && nutritionData.caloriesConsumed > 0) {
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è
        let status = CalorieStatus.EMPTY;
        const consumed = nutritionData.caloriesConsumed;
        const actualGoal = nutritionPlan?.targetCalories || dailyCalorieGoal;
        
        if (consumed > actualGoal * 1.05) {
          status = CalorieStatus.OVER;   // –ü–µ—Ä–µ–±–æ—Ä –∫–∞–ª–æ—Ä–∏–π (–∫—Ä–∞—Å–Ω—ã–π)
        } else if (consumed >= actualGoal * 0.95 && consumed <= actualGoal * 1.05) {
          status = CalorieStatus.NORMAL; // –í –ø—Ä–µ–¥–µ–ª–∞—Ö –Ω–æ—Ä–º—ã (–∂–µ–ª—Ç—ã–π)
        } else if (consumed > 0) {
          status = CalorieStatus.UNDER;  // –ù–µ–¥–æ–±–æ—Ä –∫–∞–ª–æ—Ä–∏–π (–∑–µ–ª–µ–Ω—ã–π)
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é –¥–∞–Ω–Ω—ã–µ –æ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–Ω—ã—Ö –∫–∞–ª–æ—Ä–∏—è—Ö
        if (!existingData || existingData.consumed !== consumed) {
          console.log(`–î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è ${formatDateToString(date)}: ${consumed} –∫–∫–∞–ª, —Ü–µ–ª—å=${actualGoal}, —Å—Ç–∞—Ç—É—Å=${status}`);
          setHistoricalCalorieData(prevData => {
            // –£–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å, –µ—Å–ª–∏ –µ—Å—Ç—å
            const filteredData = prevData.filter(d => !isSameDay(new Date(d.date), date));
            return [...filteredData, {
              date: date,
              consumed: consumed,
              goal: actualGoal,
              status: status
            }];
          });
        }
      }
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–∏—Ç–∞–Ω–∏–∏:', error);
    }
  };
  
  // –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –æ –ø–∏—Ç–∞–Ω–∏–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é
  const loadHistoricalData = async () => {
    try {
      console.log('–ó–∞–ø—É—â–µ–Ω–∞ –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é...');
      const today = new Date();
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
      const todayData = historicalCalorieData.find(d => isSameDay(new Date(d.date), today));
      
      // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤ –¥–∞–Ω–Ω—ã—Ö, —á—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å –∏—Ö –≤—Å–µ —Å—Ä–∞–∑—É
      let newHistoricalData: DayCalorieData[] = [...historicalCalorieData];
      let dataChanged = false;
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π (—Ç–æ–ª—å–∫–æ –ø—Ä–æ—à–ª—ã–µ –∏ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å)
      const dates = [];
      for (let i = -7; i <= 0; i++) {
        const date = new Date(today);
        date.setDate(today.getDate() + i);
        // –í–ê–ñ–ù–û: –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–æ—à–ª—ã—Ö –¥–∞—Ç –∏ —Å–µ–≥–æ–¥–Ω—è
        // –ù–µ –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –±—É–¥—É—â–∏—Ö –¥–∞—Ç!
        if (isDateBeforeOrEqualToday(date)) {
          dates.push(date);
        }
      }
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å–µ—Ö –¥–∞—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
      const promises = dates.map(date => {
        const dateString = formatDateToString(date);
        return getDailyNutrition(dateString)
          .then(nutritionData => {
            if (nutritionData && nutritionData.caloriesConsumed > 0) {
              console.log(`–ó–∞–≥—Ä—É–∂–µ–Ω—ã –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –∑–∞ ${dateString}: –∫–∞–ª–æ—Ä–∏–∏=${nutritionData.caloriesConsumed}`);
              
              // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è
              let status = CalorieStatus.EMPTY;
              const consumed = nutritionData.caloriesConsumed;
              if (consumed > dailyCalorieGoal * 1.05) {
                status = CalorieStatus.OVER;
              } else if (consumed >= dailyCalorieGoal * 0.95 && consumed <= dailyCalorieGoal * 1.05) {
                status = CalorieStatus.NORMAL;
              } else if (consumed > 0) {
                status = CalorieStatus.UNDER;
              }
              
              // –î–æ–±–∞–≤–ª—è–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –Ω–∞—à–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–º –º–∞—Å—Å–∏–≤–µ
              const existingIndex = newHistoricalData.findIndex(d => isSameDay(new Date(d.date), date));
              if (existingIndex !== -1) {
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
                if (newHistoricalData[existingIndex].consumed !== consumed || 
                    newHistoricalData[existingIndex].status !== status) {
                  newHistoricalData[existingIndex] = {
                    date: date,
                    consumed: consumed,
                    goal: dailyCalorieGoal,
                    status: status
                  };
                  dataChanged = true;
                }
              } else {
                // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
                newHistoricalData.push({
                  date: date,
                  consumed: consumed,
                  goal: dailyCalorieGoal,
                  status: status
                });
                dataChanged = true;
              }
            } else if (isSameDay(date, today) && (!nutritionData || nutritionData.caloriesConsumed <= 0)) {
              // –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è –±–µ–∑ –¥–∞–Ω–Ω—ã—Ö
              const existingIndex = newHistoricalData.findIndex(d => isSameDay(new Date(d.date), date));
              if (existingIndex !== -1) {
                newHistoricalData.splice(existingIndex, 1);
                dataChanged = true;
              }
            }
            return null;
          })
          .catch(error => {
            console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞ ${dateString}:`, error);
            return null;
          });
      });
      
      // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
      await Promise.all(promises);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∏ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å
      if (dataChanged) {
        // –ï—Å–ª–∏ —É –Ω–∞—Å –±—ã–ª–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è, —É–±–µ–¥–∏–º—Å—è —á—Ç–æ –æ–Ω–∏ –Ω–µ –ø–æ—Ç–µ—Ä—è–ª–∏—Å—å
        if (todayData && todayData.consumed > 0) {
          const todayExists = newHistoricalData.some(d => isSameDay(new Date(d.date), today));
          if (!todayExists) {
            // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–µ–≥–æ–¥–Ω—è –ø—Ä–æ–ø–∞–ª–∏, –≤–µ—Ä–Ω–µ–º –∏—Ö –æ–±—Ä–∞—Ç–Ω–æ
            newHistoricalData.push(todayData);
            console.log('–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è:', todayData);
          }
        }
        
        console.log('–û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è, –Ω–∞–π–¥–µ–Ω–æ –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π:', newHistoricalData.length);
        setHistoricalCalorieData(newHistoricalData);
        
        // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è
        setCalorieData(getCalorieData());
      }
      
      console.log('–ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –∑–∞–ø–∏—Å–µ–π:', newHistoricalData.length);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö:', error);
    }
  };

  // –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
  const loadRecentScans = async () => {
    try {
      console.log('–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π...');
      const recentHistory = await getRecentScans(3);
      console.log('–ü–æ–ª—É—á–µ–Ω–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π:', recentHistory.length);
      
      if (recentHistory.length > 0) {
        console.log('–ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ:', recentHistory[0].name, '–î–∞—Ç–∞:', recentHistory[0].scanDate);
      }
      
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç ProductData –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ ProductCard
      const formattedScans: ProductData[] = recentHistory.map((item, index) => ({
        id: `${item.id}-${item.timestamp}-${index}`, // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á —Å timestamp –∏ –∏–Ω–¥–µ–∫—Å–æ–º
        name: item.name,
        calories: item.calories,
        macros: { 
          protein: item.protein, 
          fat: item.fat, 
          carbs: item.carbs 
        },
        timestamp: new Date(item.timestamp),
        imageUrl: item.image || 'https://images.unsplash.com/photo-1546069901-ba9599a7e63c?q=80&w=400',
        fullData: item.fullData // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
      }));
      
      setRecentScans(formattedScans);
      console.log('–û–±–Ω–æ–≤–ª–µ–Ω—ã –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–∫–∞–Ω—ã –Ω–∞ –≥–ª–∞–≤–Ω–æ–º —ç–∫—Ä–∞–Ω–µ');
      
      // –ü—Ä–æ–∞–∫—Ç–∏–≤–Ω–æ–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ —Ñ–æ–Ω–µ
      const imageUrls = formattedScans
        .map(scan => scan.imageUrl)
        .filter((url): url is string => url != null && !url.includes('unsplash.com')); // –ò—Å–∫–ª—é—á–∞–µ–º placeholder'—ã
      
      if (imageUrls.length > 0) {
        console.log(`üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ ${imageUrls.length} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ —Ñ–æ–Ω–µ...`);
        // –ù–µ –∂–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è, —á—Ç–æ–±—ã –Ω–µ –∑–∞–º–µ–¥–ª—è—Ç—å UI
        prefetchImages(imageUrls).catch(error => 
          console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–∞–∫—Ç–∏–≤–Ω–æ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–∏:', error)
        );
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π:', error);
    } finally {
      setRefreshing(false);
    }
  };
  
  // –î–æ–±–∞–≤–∏–º –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –¥–∞—Ç
  const isSameDay = (date1: Date, date2: Date): boolean => {
    return date1.getDate() === date2.getDate() && 
           date1.getMonth() === date2.getMonth() && 
           date1.getFullYear() === date2.getFullYear();
  };

  // –ü–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã—Ö –¥–∞—Ç (–±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏)
  const isDateAfterToday = (date: Date): boolean => {
    const today = new Date();
    const todayCalendar = new Date(today.getFullYear(), today.getMonth(), today.getDate());
    const dateCalendar = new Date(date.getFullYear(), date.getMonth(), date.getDate());
    return dateCalendar > todayCalendar;
  };

  const isDateBeforeOrEqualToday = (date: Date): boolean => {
    const today = new Date();
    const todayCalendar = new Date(today.getFullYear(), today.getMonth(), today.getDate());
    const dateCalendar = new Date(date.getFullYear(), date.getMonth(), date.getDate());
    return dateCalendar <= todayCalendar;
  };

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∫–∞–ª–æ—Ä–∏–π
  const determineCalorieStatus = (consumed: number, goal: number): CalorieStatus => {
    if (consumed <= 0) {
      return CalorieStatus.EMPTY;
    } else if (consumed > goal * 1.05) {
      return CalorieStatus.OVER;   // –ü–µ—Ä–µ–±–æ—Ä –∫–∞–ª–æ—Ä–∏–π (–∫—Ä–∞—Å–Ω—ã–π)
    } else if (consumed >= goal * 0.95 && consumed <= goal * 1.05) {
      return CalorieStatus.NORMAL; // –í –ø—Ä–µ–¥–µ–ª–∞—Ö –Ω–æ—Ä–º—ã (–∂–µ–ª—Ç—ã–π)
    } else {
      return CalorieStatus.UNDER;  // –ù–µ–¥–æ–±–æ—Ä –∫–∞–ª–æ—Ä–∏–π (–∑–µ–ª–µ–Ω—ã–π)
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –∫–∞–ª–æ—Ä–∏—è—Ö –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
  const getCalorieData = useCallback((): DayCalorieData[] => {
    console.log('** –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ getCalorieData **');
    const today = new Date();
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ü–µ–ª—å –∫–∞–ª–æ—Ä–∏–π
    const actualCalorieGoal = nutritionPlan?.targetCalories || dailyCalorieGoal;
    console.log('üéØ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ü–µ–ª—å –∫–∞–ª–æ—Ä–∏–π:', actualCalorieGoal, '–∏–∑ –ø–ª–∞–Ω–∞:', !!nutritionPlan);
    
    // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –¢–û–õ–¨–ö–û –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
    // –ù–µ —Å–º–µ—à–∏–≤–∞–µ–º —Å —Ç–µ–∫—É—â–∏–º–∏ dailyNutritionData –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç—ã
    let data: DayCalorieData[] = [...historicalCalorieData]
      .filter(item => {
        const itemDate = new Date(item.date);
        return isDateBeforeOrEqualToday(itemDate); // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–æ—à–ª—ã–µ –∏ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ
      })
      .map(item => ({
        ...item,
        goal: actualCalorieGoal, // –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–ª—å –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é
        // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ü–µ–ª–∏
        status: determineCalorieStatus(item.consumed, actualCalorieGoal)
      }));
    
    console.log(`–í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è: ${data.length} –∑–∞–ø–∏—Å–µ–π`);
    data.forEach(item => {
      const dateStr = formatDateToString(new Date(item.date));
      console.log(`- ${dateStr}: ${item.consumed}/${item.goal} –∫–∫–∞–ª, —Å—Ç–∞—Ç—É—Å: ${item.status}`);
    });
    
    return data;
  }, [historicalCalorieData, dailyCalorieGoal, nutritionPlan]); // –£–±—Ä–∞–ª–∏ dailyNutritionData –∏–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π!

  // –î–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è
  const [calorieData, setCalorieData] = useState<DayCalorieData[]>([]);
  
  // –í–∞–∂–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç: –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
  useEffect(() => {
    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    console.log(`–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–∞–ª–µ–Ω–¥–∞—Ä—è: –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö: ${historicalCalorieData.length}`);
    const newCalorieData = getCalorieData();
    setCalorieData(newCalorieData);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ AsyncStorage –¥–ª—è –ø–æ—Å—Ç–æ—è–Ω—Å—Ç–≤–∞ –º–µ–∂–¥—É –∑–∞–ø—É—Å–∫–∞–º–∏
    const saveData = async () => {
      try {
        await AsyncStorage.setItem('historicalCalorieData', JSON.stringify(historicalCalorieData));
        console.log('–î–∞–Ω–Ω—ã–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ');
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:', error);
      }
    };
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —á—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å
    if (historicalCalorieData.length > 0) {
      saveData();
    }
  }, [historicalCalorieData, nutritionPlan, getCalorieData]); // –£–±—Ä–∞–ª–∏ dailyNutritionData

  // –ù–û–í–´–ô –≠–§–§–ï–ö–¢: –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ –¥–ª—è –°–ï–ì–û–î–ù–Ø–®–ù–ï–ì–û –¥–Ω—è
  useEffect(() => {
    const today = new Date();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏:
    // 1. –ï—Å—Ç—å dailyNutritionData
    // 2. –¢–µ–∫—É—â–∞—è –≤—ã–±—Ä–∞–Ω–Ω–∞—è –¥–∞—Ç–∞ —ç—Ç–æ —Å–µ–≥–æ–¥–Ω—è (—á—Ç–æ–±—ã –Ω–µ –æ–±–Ω–æ–≤–ª—è—Ç—å –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –ø—Ä–æ—à–ª—ã—Ö –¥–Ω–µ–π)
    if (dailyNutritionData && isSameDay(currentDate, today)) {
      const existingData = historicalCalorieData.find(d => 
        isSameDay(new Date(d.date), today)
      );
      
      if (!existingData || existingData.status === CalorieStatus.EMPTY) {
        // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è
        let status = CalorieStatus.EMPTY;
        const consumed = dailyNutritionData.caloriesConsumed;
        const actualGoal = nutritionPlan?.targetCalories || dailyCalorieGoal;
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        if (consumed > actualGoal * 1.05) {
          status = CalorieStatus.OVER;   // –ü–µ—Ä–µ–±–æ—Ä –∫–∞–ª–æ—Ä–∏–π (–∫—Ä–∞—Å–Ω—ã–π)
        } else if (consumed >= actualGoal * 0.95 && consumed <= actualGoal * 1.05) {
          status = CalorieStatus.NORMAL; // –í –ø—Ä–µ–¥–µ–ª–∞—Ö –Ω–æ—Ä–º—ã (–∂–µ–ª—Ç—ã–π)
        } else if (consumed > 0) {
          status = CalorieStatus.UNDER;  // –ù–µ–¥–æ–±–æ—Ä –∫–∞–ª–æ—Ä–∏–π (–∑–µ–ª–µ–Ω—ã–π)
        }
        
        const newData = {
          date: today,
          consumed,
          goal: actualGoal,
          status
        };
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ —Å—Ç–∞—Ç—É—Å –Ω–µ EMPTY
        if (status !== CalorieStatus.EMPTY) {
          console.log(`–û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ —Å–µ–≥–æ–¥–Ω—è: ${consumed}/${actualGoal} –∫–∫–∞–ª, —Å—Ç–∞—Ç—É—Å: ${status}`);
          setHistoricalCalorieData(prevData => {
            // –£–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å, –µ—Å–ª–∏ –µ—Å—Ç—å
            const filteredData = prevData.filter(d => !isSameDay(new Date(d.date), today));
            return [...filteredData, newData];
          });
        }
      }
    }
  }, [dailyNutritionData, currentDate, nutritionPlan, dailyCalorieGoal]);

  // –û–±–Ω–æ–≤–ª—è–µ–º –º–∞–∫—Ä–æ–Ω—É—Ç—Ä–∏–µ–Ω—Ç—ã –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è
  useEffect(() => {
    if (nutritionPlan) {
      console.log('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –º–∞–∫—Ä–æ–Ω—É—Ç—Ä–∏–µ–Ω—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è:', {
        protein: proteinGoal,
        fat: fatGoal,
        carbs: carbGoal
      });
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –º–∞–∫—Ä–æ–Ω—É—Ç—Ä–∏–µ–Ω—Ç—ã —Å –Ω–æ–≤—ã–º–∏ —Ü–µ–ª–µ–≤—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
      setMacronutrients(prevMacros => [
        { ...prevMacros[0], goal: proteinGoal },
        { ...prevMacros[1], goal: fatGoal },
        { ...prevMacros[2], goal: carbGoal },
      ]);
    }
  }, [nutritionPlan, proteinGoal, fatGoal, carbGoal]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è –∏–∑ AsyncStorage
  const loadNutritionPlan = async () => {
    try {
      console.log('üîç –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è...');
      
      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–µ —Ü–µ–ª–∏
      const customGoals = await AsyncStorage.getItem('customNutritionGoals');
      if (customGoals) {
        const goals = JSON.parse(customGoals);
        console.log('üéØ –ù–∞–π–¥–µ–Ω—ã –∫–∞—Å—Ç–æ–º–Ω—ã–µ —Ü–µ–ª–∏:', goals);
        
        // –°–æ–∑–¥–∞–µ–º –ø–ª–∞–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —Ü–µ–ª–µ–π
        const customPlan: NutritionCalculationResult = {
          targetCalories: goals.calories,
          maxHiddenSugar: goals.sugar,
          dailyMacros: {
            protein: goals.protein,
            fat: goals.fat,
            carbs: goals.carbs,
            percentages: { protein: 25, fat: 30, carbs: 45 }
          },
          bmr: goals.calories * 0.8, // –ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
          tdee: goals.calories,
          weeklyTargets: {
            calories: goals.calories * 7,
            protein: goals.protein * 7,
            fat: goals.fat * 7,
            carbs: goals.carbs * 7,
            hiddenSugar: goals.sugar * 7
          },
          expectedWeightChange: -0.5,
          appliedAdjustments: {
            diet: 1.0,
            stress: 1.0,
            mealFrequency: 1.0,
            foodPreferences: 1.0,
            total: 1.0
          }
        };
        
        setNutritionPlan(customPlan);
        console.log('‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∫–∞—Å—Ç–æ–º–Ω—ã–µ —Ü–µ–ª–∏ –ø–∏—Ç–∞–Ω–∏—è');
        return;
      }
      
      const savedPlan = await AsyncStorage.getItem('nutritionPlan');
      console.log('üì¶ –°—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ AsyncStorage:', savedPlan);
      
      if (savedPlan) {
        const plan = JSON.parse(savedPlan) as NutritionCalculationResult;
        console.log('‚úÖ –ü–ª–∞–Ω —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω:', plan);
        setNutritionPlan(plan);
        console.log('üìä –ó–∞–≥—Ä—É–∂–µ–Ω –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è:', {
          calories: plan.targetCalories,
          protein: plan.dailyMacros.protein,
          fat: plan.dailyMacros.fat,
          carbs: plan.dailyMacros.carbs,
          sugar: plan.maxHiddenSugar
        });
      } else {
        console.log('‚ö†Ô∏è –ü–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ AsyncStorage');
        console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—Ä—É–≥–∏–µ –∫–ª—é—á–∏ –≤ AsyncStorage...');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥—Ä—É–≥–∏–µ –¥–∞–Ω–Ω—ã–µ
        const userProfile = await AsyncStorage.getItem('userProfile');
        const hasCompleted = await AsyncStorage.getItem('hasCompletedOnboarding');
        
        console.log('üë§ userProfile –≤ AsyncStorage:', userProfile ? '–ï–°–¢–¨' : '–ù–ï–¢');
        console.log('‚úÖ hasCompletedOnboarding:', hasCompleted ? '–ï–°–¢–¨' : '–ù–ï–¢');
        
        if (userProfile && !savedPlan) {
          console.log('üß™ –¢–ï–°–¢: –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø–ª–∞–Ω –∏–∑ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è...');
          try {
            const profile = JSON.parse(userProfile);
            console.log('üë§ –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å:', profile);
            
            // –ü—Ä–æ–±—É–µ–º —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø–ª–∞–Ω –ø—Ä—è–º–æ –∑–¥–µ—Å—å –¥–ª—è —Ç–µ—Å—Ç–∞
            if (profile.weight && profile.height && profile.birthday && profile.gender) {
              const { calculateCompleteNutrition } = await import('../../utils/nutritionCalculator');
              const testPlan = calculateCompleteNutrition({
                ...profile,
                currentWeight: profile.weight
              });
              console.log('üßÆ –¢–ï–°–¢: –†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–π –ø–ª–∞–Ω:', testPlan);
              
              if (testPlan) {
                setNutritionPlan(testPlan);
                console.log('üîÑ –¢–ï–°–¢: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–π –ø–ª–∞–Ω –≤–º–µ—Å—Ç–æ –ø—É—Å—Ç–æ–≥–æ');
              }
            }
          } catch (testError) {
            console.error('‚ùå –¢–ï–°–¢: –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–∞—Å—á—ë—Ç–µ:', testError);
          }
        } else if (!userProfile && !hasCompleted) {
          // –°–æ–∑–¥–∞—ë–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞–Ω –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
          console.log('üéØ –°–û–ó–î–ê–Å–ú –¢–ï–°–¢–û–í–´–ô –ü–õ–ê–ù –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏...');
          const testPlan: NutritionCalculationResult = {
            targetCalories: 1918,
            dailyMacros: {
              protein: 119,
              fat: 64,
              carbs: 217,
              percentages: { protein: 25, fat: 30, carbs: 45 }
            },
            maxHiddenSugar: 48,
            bmr: 1598,
            tdee: 1918,
            weeklyTargets: {
              calories: 13426,
              protein: 833,
              fat: 448,
              carbs: 1519,
              hiddenSugar: 336
            },
            expectedWeightChange: -0.5,
            appliedAdjustments: {
              diet: 1.0,
              stress: 0.95,
              mealFrequency: 1.0,
              foodPreferences: 1.0,
              total: 0.95
            }
          };
          
          setNutritionPlan(testPlan);
          console.log('üéØ –¢–ï–°–¢–û–í–´–ô –ü–õ–ê–ù —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:', testPlan);
        }
        
        console.log('‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é');
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è:', error);
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–µ–¥–µ–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  const loadWeeklyStats = async () => {
    try {
      const today = new Date();
      const weekDates = [];
      
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
      for (let i = 6; i >= 0; i--) {
        const date = new Date(today);
        date.setDate(today.getDate() - i);
        weekDates.push(date);
      }
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
      const weeklyData = await Promise.all(
        weekDates.map(async (date) => {
          const dateString = formatDateToString(date);
          try {
            const nutritionData = await getDailyNutrition(dateString);
            return {
              date,
              calories: nutritionData?.caloriesConsumed || 0,
              protein: nutritionData?.protein || 0,
              fat: nutritionData?.fat || 0,
              carbs: nutritionData?.carbs || 0,
              sugar: nutritionData?.sugar || 0,
            };
          } catch (error) {
            console.error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∑–∞ ${dateString}:`, error);
            return {
              date,
              calories: 0,
              protein: 0,
              fat: 0,
              carbs: 0,
              sugar: 0,
            };
          }
        })
      );
      
      // –í—ã—á–∏—Å–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      const daysWithData = weeklyData.filter(day => day.calories > 0);
      const totalDays = daysWithData.length;
      
      if (totalDays === 0) {
        setWeeklyStats(null);
        return;
      }
      
      // –°—á–∏—Ç–∞–µ–º –æ–±—â–µ–µ –Ω–µ–¥–µ–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (–Ω–µ —Å—Ä–µ–¥–Ω–µ–µ)
      const totalCalories = daysWithData.reduce((sum, day) => sum + day.calories, 0);
      const totalProtein = Math.round(daysWithData.reduce((sum, day) => sum + day.protein, 0));
      const totalFat = Math.round(daysWithData.reduce((sum, day) => sum + day.fat, 0));
      const totalCarbs = Math.round(daysWithData.reduce((sum, day) => sum + day.carbs, 0));
      const totalSugar = Math.round(daysWithData.reduce((sum, day) => sum + day.sugar, 0));
      
      // –°—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–æ–≤ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤
      const averageCalories = Math.round(totalCalories / totalDays);
      const averageProtein = Math.round(totalProtein / totalDays);
      const averageFat = Math.round(totalFat / totalDays);
      const averageCarbs = Math.round(totalCarbs / totalDays);
      const averageSugar = Math.round(totalSugar / totalDays);
      
      // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–Ω–∏ –≤ —Ü–µ–ª–∏ (–≤ –ø—Ä–µ–¥–µ–ª–∞—Ö ¬±5% –æ—Ç —Ü–µ–ª–µ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π)
      const daysInGoal = daysWithData.filter(day => {
        const calorieGoalMet = day.calories >= dailyCalorieGoal * 0.95 && day.calories <= dailyCalorieGoal * 1.05;
        return calorieGoalMet;
      }).length;
      
      // –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç—ã –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–µ–π
      const proteinPercentage = Math.round((averageProtein / proteinGoal) * 100);
      const fatPercentage = Math.round((averageFat / fatGoal) * 100);
      const carbsPercentage = Math.round((averageCarbs / carbGoal) * 100);
      const sugarPercentage = Math.round((averageSugar / maxSugar) * 100);
      
      // –ü—Ä–æ—Å—Ç–æ–π —Ä–∞—Å—á–µ—Ç —Ç—Ä–µ–Ω–¥–∞ (–º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å)
      const caloriesTrend = averageCalories > dailyCalorieGoal ? 
        Math.round(((averageCalories - dailyCalorieGoal) / dailyCalorieGoal) * 100) : 
        Math.round(((averageCalories - dailyCalorieGoal) / dailyCalorieGoal) * 100);
      
      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –º–∏–Ω–∏-–≥—Ä–∞—Ñ–∏–∫–∞
      const dayNames = ['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–í—Å'];
      const dailyData = weeklyData.map((dayData, index) => ({
        day: dayNames[index],
        calories: dayData.calories,
        hasData: dayData.calories > 0,
      }));

      const stats: WeeklyStats = {
        averageCalories,
        averageProtein,
        averageFat,
        averageCarbs,
        averageSugar,
        totalCalories,
        totalProtein,
        totalFat,
        totalCarbs,
        totalSugar,
        daysInGoal,
        totalDays,
        caloriesTrend,
        proteinPercentage,
        fatPercentage,
        carbsPercentage,
        sugarPercentage,
        dailyData,
      };
      
      setWeeklyStats(stats);
      console.log('–ó–∞–≥—Ä—É–∂–µ–Ω–∞ –Ω–µ–¥–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:', stats);
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–µ–¥–µ–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
      setWeeklyStats(null);
    }
  };

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤–∏—Ç–∞–º–∏–Ω–æ–≤ –∏ –º–∏–Ω–µ—Ä–∞–ª–æ–≤
  const loadWeeklyVitaminMinerals = async (aiData?: any) => {
    try {
      console.log('üìä –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤–∏—Ç–∞–º–∏–Ω–æ–≤ –∏ –º–∏–Ω–µ—Ä–∞–ª–æ–≤...');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –æ—Ç AI (–ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä—è–º—É—é –∏–ª–∏ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è)
      const vitaminData = aiData?.vitaminMineralDashboard || aiRecommendations?.vitaminMineralDashboard;
      
      console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤–∏—Ç–∞–º–∏–Ω–æ–≤:', {
        hasAiData: !!aiData,
        hasVitaminData: !!vitaminData,
        hasAiRecommendations: !!aiRecommendations,
        vitaminDataKeys: vitaminData ? Object.keys(vitaminData) : '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö'
      });
      
      if (vitaminData) {
        console.log('ü§ñ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç AI –¥–ª—è –≤–∏—Ç–∞–º–∏–Ω–Ω–æ–≥–æ –¥–∞—à–±–æ—Ä–¥–∞');
        console.log('üìä –î–∞–Ω–Ω—ã–µ –≤–∏—Ç–∞–º–∏–Ω–æ–≤ –æ—Ç AI:', {
          vitaminsCount: vitaminData.vitamins?.length || 0,
          mineralsCount: vitaminData.minerals?.length || 0,
          overallVitaminScore: vitaminData.overallVitaminScore,
          overallMineralScore: vitaminData.overallMineralScore
        });
        
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç AI –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        const vitamins: VitaminMineralData[] = vitaminData.vitamins.map((vitamin: any) => ({
          name: vitamin.name,
          shortName: vitamin.shortName,
          current: vitamin.percentage,
          goal: 100, // –¶–µ–ª—å –≤—Å–µ–≥–¥–∞ 100%
          color: '#4CAF50', // –ï–¥–∏–Ω—ã–π –∑–µ–ª–µ–Ω—ã–π —Ü–≤–µ—Ç –¥–ª—è –≤—Å–µ—Ö –≤–∏—Ç–∞–º–∏–Ω–æ–≤
          currentWeeklyIntake: vitamin.currentWeeklyIntake,
          weeklyGoal: vitamin.weeklyGoal,
          percentage: vitamin.percentage,
          status: vitamin.status
        }));

        const minerals: VitaminMineralData[] = vitaminData.minerals.map((mineral: any) => ({
          name: mineral.name,
          shortName: mineral.shortName,
          current: mineral.percentage,
          goal: 100, // –¶–µ–ª—å –≤—Å–µ–≥–¥–∞ 100%
          color: '#607D8B', // –ï–¥–∏–Ω—ã–π —Å—Ç–∞–ª—å–Ω–æ–π —Ü–≤–µ—Ç –¥–ª—è –≤—Å–µ—Ö –º–∏–Ω–µ—Ä–∞–ª–æ–≤
          currentWeeklyIntake: mineral.currentWeeklyIntake,
          weeklyGoal: mineral.weeklyGoal,
          percentage: mineral.percentage,
          status: mineral.status
        }));

        const vitaminMineralData: WeeklyVitaminMinerals = {
          vitamins,
          minerals,
          vitaminScore: vitaminData.overallVitaminScore,
          mineralScore: vitaminData.overallMineralScore,
          deficiencies: vitaminData.deficiencyList || [],
          recommendations: vitaminData.recommendations || [],
          overallVitaminScore: vitaminData.overallVitaminScore,
          overallMineralScore: vitaminData.overallMineralScore,
          deficiencyList: vitaminData.deficiencyList
        };

        setWeeklyVitaminMinerals(vitaminMineralData);
        console.log('‚úÖ –†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–∏—Ç–∞–º–∏–Ω–æ–≤ –∏ –º–∏–Ω–µ—Ä–∞–ª–æ–≤ –æ—Ç AI –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', vitaminMineralData);
        return;
      }

      // –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ—Ç AI - —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º null (—Å–æ—Å—Ç–æ—è–Ω–∏–µ "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
      console.log('üìä –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ—Ç AI - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"');
      setWeeklyVitaminMinerals(null);
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –≤–∏—Ç–∞–º–∏–Ω–æ–≤ –∏ –º–∏–Ω–µ—Ä–∞–ª–æ–≤:', error);
      setWeeklyVitaminMinerals(null);
    }
  };

  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ü–µ–ª–µ–π –ø–∏—Ç–∞–Ω–∏—è
  const handleStartEditingGoals = () => {
    setEditedGoals({
      calories: String(dailyCalorieGoal),
      protein: String(proteinGoal),
      fat: String(fatGoal),
      carbs: String(carbGoal),
      sugar: String(maxSugar)
    });
    setIsEditingGoals(true);
  };

  const handleSaveEditingGoals = async () => {
    try {
      // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      const calories = parseFloat(editedGoals.calories) || defaultCalorieGoal;
      const protein = parseFloat(editedGoals.protein) || defaultProteinGoal;
      const fat = parseFloat(editedGoals.fat) || defaultFatGoal;
      const carbs = parseFloat(editedGoals.carbs) || defaultCarbGoal;
      const sugar = parseFloat(editedGoals.sugar) || defaultMaxSugar;

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–∞–∑—É–º–Ω—ã–µ –ø—Ä–µ–¥–µ–ª—ã
      if (calories < 800 || calories > 4000) {
        Alert.alert('–û—à–∏–±–∫–∞', '–ö–∞–ª–æ—Ä–∏–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç 800 –¥–æ 4000');
        return;
      }

      // –°–æ–∑–¥–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è
      const updatedPlan: NutritionCalculationResult = {
        ...nutritionPlan,
        targetCalories: calories,
        maxHiddenSugar: sugar,
        dailyMacros: {
          ...nutritionPlan?.dailyMacros,
          protein,
          fat,
          carbs,
          percentages: nutritionPlan?.dailyMacros?.percentages || { protein: 25, fat: 30, carbs: 45 }
        }
      } as NutritionCalculationResult;
      
      setNutritionPlan(updatedPlan);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ü–µ–ª–∏ –≤ AsyncStorage
      await AsyncStorage.setItem('customNutritionGoals', JSON.stringify({
        calories,
        protein,
        fat,
        carbs,
        sugar,
        isCustom: true,
        updatedAt: new Date().toISOString()
      }));
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –º–∞–∫—Ä–æ–Ω—É—Ç—Ä–∏–µ–Ω—Ç—ã
      setMacronutrients([
        { name: t('dashboard.protein'), current: macronutrients[0].current, goal: protein, color: '#FF8A80', colorDark: '#FF6B6B' },
        { name: t('dashboard.fat'), current: macronutrients[1].current, goal: fat, color: '#FFCF50', colorDark: '#FFD166' },
        { name: t('dashboard.carbs'), current: macronutrients[2].current, goal: carbs, color: '#80D8FF', colorDark: '#06D6A0' },
        { name: t('nutrition.hiddenSugar'), current: macronutrients[3]?.current || 0, goal: sugar, color: '#FF3B30', colorDark: '#FF3B30' },
      ]);
      
      console.log('–¶–µ–ª–∏ –ø–∏—Ç–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã:', { calories, protein, fat, carbs, sugar });
      setIsEditingGoals(false);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ü–µ–ª–µ–π:', error);
      Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è');
    }
  };

  const handleCancelEditingGoals = () => {
    setIsEditingGoals(false);
    setEditedGoals({
      calories: dailyCalorieGoal.toString(),
      protein: proteinGoal.toString(),
      fat: fatGoal.toString(),
      carbs: carbGoal.toString(),
      sugar: maxSugar.toString()
    });
  };

  // –ù–∞–≤–∏–≥–∞—Ü–∏—è –∫ —ç–∫—Ä–∞–Ω—É —Ä—É—á–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞
  const handleAddManualProduct = () => {
    router.push('/add-manual-product' as any);
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∫—Ä–æ–ª–ª–∞ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º–µ–∂–¥—É —Å–ª–∞–π–¥–∞–º–∏
  const handleScroll = (event: any) => {
    const slideSize = screenWidth - 32; // —É—á–∏—Ç—ã–≤–∞–µ–º padding
    const currentIndex = Math.round(event.nativeEvent.contentOffset.x / slideSize);
    setCurrentSlide(currentIndex);
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å–ª–∞–π–¥–æ–≤
  const scrollToSlide = (index: number) => {
    const slideSize = screenWidth - 32;
    scrollViewRef.current?.scrollTo({
      x: index * slideSize,
      animated: true,
    });
    setCurrentSlide(index);
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∫—Ä–æ–ª–ª–∞ –¥–ª—è Recent –±–ª–æ–∫–∞
  const handleRecentScroll = (event: any) => {
    const slideSize = screenWidth - 32; // —É—á–∏—Ç—ã–≤–∞–µ–º padding
    const currentIndex = Math.round(event.nativeEvent.contentOffset.x / slideSize);
    setCurrentRecentSlide(currentIndex);
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è Recent —Å–ª–∞–π–¥–æ–≤
  const scrollToRecentSlide = (index: number) => {
    const slideSize = screenWidth - 32;
    recentScrollViewRef.current?.scrollTo({
      x: index * slideSize,
      animated: true,
    });
    setCurrentRecentSlide(index);
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ Recent –±–ª–æ–∫–∞
  const getRecentSectionTitle = () => {
    return currentRecentSlide === 0 ? t('dashboard.recentAdded') : t('dashboard.recentScans');
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ View All –≤ Recent –±–ª–æ–∫–µ
  const handleRecentViewAll = () => {
    if (currentRecentSlide === 0) {
      // –ü–µ—Ä–µ—Ö–æ–¥ –∫ –∏—Å—Ç–æ—Ä–∏–∏ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö (—Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º tab=dashboard)
      router.push('/history?tab=dashboard');
    } else {
      // –ü–µ—Ä–µ—Ö–æ–¥ –∫ –∏—Å—Ç–æ—Ä–∏–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
      router.push('/history');
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
  const getRecommendationText = () => {
    if (!dailyNutritionData) {
      return "–î–æ–±–∞–≤—å—Ç–µ –ø—Ä–æ–¥—É–∫—Ç—ã, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏";
    }

    const recommendations = [];
    
    // –ê–Ω–∞–ª–∏–∑ –±–µ–ª–∫–æ–≤
    const proteinProgress = (dailyNutritionData.protein / proteinGoal) * 100;
    if (proteinProgress < 50) {
      recommendations.push("–î–æ–±–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ –±–µ–ª–∫–∞: —è–π—Ü–∞, —Ä—ã–±—É –∏–ª–∏ –∫—É—Ä–∏—Ü—É");
    }
    
    // –ê–Ω–∞–ª–∏–∑ –∂–∏—Ä–æ–≤
    const fatProgress = (dailyNutritionData.fat / fatGoal) * 100;
    if (fatProgress < 50) {
      recommendations.push("–í–∫–ª—é—á–∏—Ç–µ –ø–æ–ª–µ–∑–Ω—ã–µ –∂–∏—Ä—ã: –æ—Ä–µ—Ö–∏, –∞–≤–æ–∫–∞–¥–æ, –æ–ª–∏–≤–∫–æ–≤–æ–µ –º–∞—Å–ª–æ");
    }
    
    // –ê–Ω–∞–ª–∏–∑ —É–≥–ª–µ–≤–æ–¥–æ–≤
    const carbProgress = (dailyNutritionData.carbs / carbGoal) * 100;
    if (carbProgress < 50) {
      recommendations.push("–î–æ–±–∞–≤—å—Ç–µ —Å–ª–æ–∂–Ω—ã–µ —É–≥–ª–µ–≤–æ–¥—ã: –æ–≤—Å—è–Ω–∫—É, –≥—Ä–µ—á–∫—É, –æ–≤–æ—â–∏");
    }
    
    // –ê–Ω–∞–ª–∏–∑ —Å–∞—Ö–∞—Ä–∞
    const sugarProgress = (dailyNutritionData.sugar / maxSugar) * 100;
    if (sugarProgress > 80) {
      recommendations.push("–û–≥—Ä–∞–Ω–∏—á—å—Ç–µ —Å–ª–∞–¥–∫–æ–µ –∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã");
    }
    
    // –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    if (recommendations.length === 0) {
      const generalTips = [
        "–ü–µ–π—Ç–µ –±–æ–ª—å—à–µ –≤–æ–¥—ã –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è",
        "–î–æ–±–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ –æ–≤–æ—â–µ–π –∏ —Ñ—Ä—É–∫—Ç–æ–≤",
        "–ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –ø—Ä–æ –≤–∏—Ç–∞–º–∏–Ω D –∏ –æ–º–µ–≥–∞-3",
        "–í–∫–ª—é—á–∏—Ç–µ –≤ —Ä–∞—Ü–∏–æ–Ω –∑–µ–ª–µ–Ω—å –∏ —è–≥–æ–¥—ã",
        "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–æ–≤—ã–µ –ø–æ–ª–µ–∑–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã"
      ];
      return generalTips[Math.floor(Math.random() * generalTips.length)];
    }
    
    return recommendations[0];
  };

  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
  const truncateText = (text: string, maxLines: number = 5): string => {
    const words = text.split(' ');
    // –î–ª—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞: –ø—Ä–∏–º–µ—Ä–Ω–æ 4-5 —Å–ª–æ–≤ –Ω–∞ —Å—Ç—Ä–æ–∫—É
    const wordsPerLine = 4;
    const maxWords = maxLines * wordsPerLine;
    
    if (words.length <= maxWords) {
      return text;
    }
    
    return words.slice(0, maxWords).join(' ') + '...';
  };

  const truncateBulletPoints = (bulletPoints: string[], maxPoints: number = 2): string[] => {
    if (bulletPoints.length <= maxPoints) {
      return bulletPoints;
    }
    return bulletPoints.slice(0, maxPoints);
  };

  const toggleRecommendationsExpansion = () => {
    setIsRecommendationsExpanded(!isRecommendationsExpanded);
  };

  const truncateVitaminText = (text: string, maxLines: number = 2): string => {
    const words = text.split(' ');
    // –î–ª—è –≤–∏—Ç–∞–º–∏–Ω–Ω–æ–≥–æ –±–ª–æ–∫–∞: 2 —Å—Ç—Ä–æ–∫–∏, –ø—Ä–∏–º–µ—Ä–Ω–æ 4 —Å–ª–æ–≤–∞ –Ω–∞ —Å—Ç—Ä–æ–∫—É
    const wordsPerLine = 4;
    const maxWords = maxLines * wordsPerLine;
    
    if (words.length <= maxWords) {
      return text;
    }
    
    return words.slice(0, maxWords).join(' ') + '...';
  };

  const toggleVitaminRecommendationsExpansion = () => {
    setIsVitaminRecommendationsExpanded(!isVitaminRecommendationsExpanded);
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ—Ç–∏–≤–∏—Ä—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
  const loadDailyMotivationMessage = async () => {
    try {
      console.log('üìù –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ—Ç–∏–≤–∏—Ä—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è...');
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º import'–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
      const yesterdayCalories = await getYesterdayCalories();
      const isFirstTime = await isFirstTimeUser();
      
      console.log('üìä –î–∞–Ω–Ω—ã–µ –¥–ª—è –º–æ—Ç–∏–≤–∏—Ä—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:', {
        isFirstTime,
        yesterdayCalories,
        calorieGoal: dailyCalorieGoal
      });
      
      const message = await getDailyMotivationMessage(isFirstTime, yesterdayCalories, dailyCalorieGoal, t);
      console.log('‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –º–æ—Ç–∏–≤–∏—Ä—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:', message);
      
      setDailyMotivationMessage(message);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ—Ç–∏–≤–∏—Ä—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
      setDailyMotivationMessage(t('dashboard.motivationMessages.firstTime') || '–û—Ç–ª–∏—á–Ω—ã–π –¥–µ–Ω—å –¥–ª—è –∑–¥–æ—Ä–æ–≤–æ–≥–æ –ø–∏—Ç–∞–Ω–∏—è! –î–∞–≤–∞–π—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –∏ –¥–æ—Å—Ç–∏–≥–∞—Ç—å —Ü–µ–ª–µ–π! üéØ');
    }
  };

  // –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ—Ç–∏–≤–∏—Ä—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ü–µ–ª–∏ –∫–∞–ª–æ—Ä–∏–π –∏–ª–∏ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
  useEffect(() => {
    loadDailyMotivationMessage();
  }, [dailyCalorieGoal]); // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ü–µ–ª–∏ –∫–∞–ª–æ—Ä–∏–π

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
  const handleRequestRecommendations = async () => {
    if (isLoadingRecommendations) return;
    
    setIsLoadingRecommendations(true);
    setRecommendationsProgress(0);
    setAiRecommendations(null);
    setRecommendationError(false); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –ø—Ä–∏ –Ω–æ–≤–æ–º –∑–∞–ø—Ä–æ—Å–µ
    
    try {
      // –ü–æ–ª—É—á–∞–µ–º email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è –∏–ª–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π
      const userProfile = await AsyncStorage.getItem('userProfile');
      const parsedProfile = userProfile ? JSON.parse(userProfile) : {};
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º email –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      let userEmail = parsedProfile.email;
      if (!userEmail) {
        // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º getUserId –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ email
        const { getUserId } = await import('../../services/userService');
        userEmail = await getUserId();
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º email –≤ –ø—Ä–æ—Ñ–∏–ª–µ –¥–ª—è –±—É–¥—É—â–∏—Ö –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π
        const updatedProfile = { ...parsedProfile, email: userEmail };
        await AsyncStorage.setItem('userProfile', JSON.stringify(updatedProfile));
        console.log('üíæ Email —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ø—Ä–æ—Ñ–∏–ª–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userEmail);
      }
      
      console.log('üë§ –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userEmail);
      
      // –°—Ä–∞–∑—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ N8N –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º
      const aiRecommendationsPromise = requestAIRecommendations(userEmail, locale);
      
      // –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –ø–æ–∫–∞–∑–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ - 10 —Å–µ–∫—É–Ω–¥
      const minProgressTime = 10000;
      const stepDuration = 500; // 0.5 —Å–µ–∫—É–Ω–¥—ã –Ω–∞ —à–∞–≥
      let aiRecommendationsResult = null;
      let requestCompleted = false;
      
      // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
      aiRecommendationsPromise.then(result => {
        aiRecommendationsResult = result;
        requestCompleted = true;
      }).catch(() => {
        requestCompleted = true; // –î–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ —Å—á–∏—Ç–∞–µ–º –∑–∞–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–º
      });
      
      // –≠—Ç–∞–ø 1: –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö (0-30%)
      setRecommendationsProgressText(t('dashboard.analyzingData'));
      for (let i = 0; i <= 30; i += 6) {
        setRecommendationsProgress(i);
        await new Promise(resolve => setTimeout(resolve, stepDuration));
      }
      
      // –≠—Ç–∞–ø 2: –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω—É—Ç—Ä–∏–µ–Ω—Ç–æ–≤ (30-60%)
      setRecommendationsProgressText(t('dashboard.processingNutrition'));
      for (let i = 30; i <= 60; i += 6) {
        setRecommendationsProgress(i);
        await new Promise(resolve => setTimeout(resolve, stepDuration));
      }
      
      // –≠—Ç–∞–ø 3: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π (60-90%)
      setRecommendationsProgressText(t('dashboard.generatingRecommendations'));
      for (let i = 60; i <= 90; i += 6) {
        setRecommendationsProgress(i);
        await new Promise(resolve => setTimeout(resolve, stepDuration));
        
        // –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –∏ –ø—Ä–æ—à–ª–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è, —É—Å–∫–æ—Ä—è–µ–º
        if (requestCompleted && i >= 80) {
          break;
        }
      }
      
      // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –∫ N8N (–µ—Å–ª–∏ –µ—â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è)
      if (!requestCompleted) {
        aiRecommendationsResult = await aiRecommendationsPromise;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—É—á–µ–Ω
      if (!aiRecommendationsResult) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞');
      }
      
      // –≠—Ç–∞–ø 4: –§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è (90-100%)
      setRecommendationsProgressText(t('dashboard.almostReady'));
      for (let i = 90; i <= 100; i += 5) {
        setRecommendationsProgress(i);
        await new Promise(resolve => setTimeout(resolve, 200)); // –ë—ã—Å—Ç—Ä–æ –≤ –∫–æ–Ω—Ü–µ
      }
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ –∫—ç—à–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –ø–æ–ª—É—á–µ–Ω–∏–∏
      const today = new Date().toDateString();
      setAiRecommendations(aiRecommendationsResult);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É –∏ –∫—ç—à–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —É—Å–ø–µ—à–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
      if (aiRecommendationsResult.success) {
        setLastRecommendationDate(today);
        await saveAIRecommendationsToCache(aiRecommendationsResult, today);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏—Ç–∞–º–∏–Ω–Ω—ã–π –¥–∞—à–±–æ—Ä–¥ —Å –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –æ—Ç AI
        console.log('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏—Ç–∞–º–∏–Ω–Ω—ã–π –¥–∞—à–±–æ—Ä–¥ —Å –¥–∞–Ω–Ω—ã–º–∏ –æ—Ç AI...');
        await loadWeeklyVitaminMinerals(aiRecommendationsResult);
      }
      
      setRecommendationError(false); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –æ—à–∏–±–∫–∏ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –ø–æ–ª—É—á–µ–Ω–∏–∏
      console.log('‚úÖ AI —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ AI —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π:', error);
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –æ—à–∏–±–∫–∏, —á—Ç–æ–±—ã –∫–Ω–æ–ø–∫–∞ —Å—Ç–∞–ª–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
      setRecommendationError(true);
      
      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º fallback
      const fallbackRecommendations: AIRecommendationsResponse = {
        success: false,
        shortSummary: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
        bulletPoints: [
          '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ',
          '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ',
          '–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç'
        ],
        timestamp: new Date().toISOString(),
      };
      
      setAiRecommendations(fallbackRecommendations);
    } finally {
      setIsLoadingRecommendations(false);
    }
  };





  // –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤
  const loadRecentAdded = async (date?: Date) => {
    try {
      const targetDate = date || currentDate;
      console.log('–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤...');
      
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–∏—Ç–∞–Ω–∏—è –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É
      const { formatDateToString } = await import('../../services/dailyNutrition');
      const selectedDateStr = formatDateToString(targetDate);
      const { getDailyNutrition } = await import('../../services/dailyNutrition');
      const dayData = await getDailyNutrition(selectedDateStr);
      
      if (!dayData || dayData.addedProducts.length === 0) {
        console.log('–ù–µ—Ç –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É:', selectedDateStr);
        setRecentAdded([]);
        return;
      }
      
      // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è (–æ—Ç –Ω–æ–≤—ã—Ö –∫ —Å—Ç–∞—Ä—ã–º)
      const sortedProducts = [...dayData.addedProducts].sort((a, b) => {
        if (a.timestamp && b.timestamp) {
          return b.timestamp - a.timestamp;
        }
        // –ï—Å–ª–∏ –Ω–µ—Ç timestamp, —Å—Ç–∞–≤–∏–º –≤ –∫–æ–Ω–µ—Ü
        if (a.timestamp && !b.timestamp) return -1;
        if (!a.timestamp && b.timestamp) return 1;
        return 0;
      });
      
      // –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–∞ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É
      const recentAddedHistory = sortedProducts.slice(0, 3);
      console.log('–ü–æ–ª—É—á–µ–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∑–∞', selectedDateStr, ':', recentAddedHistory.length);
      
      if (recentAddedHistory.length > 0) {
        console.log('–ü–æ—Å–ª–µ–¥–Ω–∏–π –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç:', recentAddedHistory[0].name, 'Timestamp:', recentAddedHistory[0].timestamp);
      }
      
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç ProductData –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ ProductCard
      const formattedAdded: ProductData[] = recentAddedHistory.map((item: any, index: number) => ({
        id: `${item.productId}-${item.timestamp || Date.now()}-${index}`, // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á —Å timestamp –∏ –∏–Ω–¥–µ–∫—Å–æ–º
        name: item.name,
        calories: item.calories,
        macros: { 
          protein: item.protein, 
          fat: item.fat, 
          carbs: item.carbs 
        },
        timestamp: item.timestamp ? new Date(item.timestamp) : new Date(),
        imageUrl: item.image || 'https://images.unsplash.com/photo-1546069901-ba9599a7e63c?q=80&w=400',
        fullData: item.fullData // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
      }));
      
      setRecentAdded(formattedAdded);
      console.log('–û–±–Ω–æ–≤–ª–µ–Ω—ã –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã –Ω–∞ –≥–ª–∞–≤–Ω–æ–º —ç–∫—Ä–∞–Ω–µ –¥–ª—è –¥–∞—Ç—ã:', selectedDateStr);
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤:', error);
      setRecentAdded([]);
    }
  };

  return (
    <SafeAreaView style={[styles.safeArea, isDark && styles.darkSafeArea]}>
      <ScrollView 
        style={[styles.scrollViewContainer, isDark && styles.darkContainer]}
        contentContainerStyle={styles.scrollContentContainer}
        showsVerticalScrollIndicator={false}
        refreshControl={
          <RefreshControl
            refreshing={refreshing}
            onRefresh={onRefresh}
            colors={['#0D6EFD']}
            tintColor={isDark ? '#FFFFFF' : '#0D6EFD'}
          />
        }
      >
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –∏–∫–æ–Ω–∫–∏ –¥–∏–µ—Ç—ã –∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ç–µ–ø–µ—Ä—å –≤ —Å–∞–º–æ–º –≤–µ—Ä—Ö—É */}
        <View style={styles.header}>
          <Text style={[styles.title, isDark && styles.darkText]}>{t('dashboard.title')}</Text>
          <View style={styles.headerButtons}>

            
            <TouchableOpacity 
              style={[styles.headerIconButton, { marginRight: 12 }]}
              onPress={() => router.push('/(tabs)/diets')}
            >
              <Ionicons name="nutrition-outline" size={24} color={isDark ? "#FFFFFF" : "#000000"} />
            </TouchableOpacity>
            <Link href="/settings" asChild> 
              <TouchableOpacity style={styles.headerIconButton}>
                <Ionicons name="settings-outline" size={24} color={isDark ? "#FFFFFF" : "#000000"} />
              </TouchableOpacity>
            </Link>
          </View>
        </View>
        
        {/* –ö–∞–ª–µ–Ω–¥–∞—Ä—å —Å –≤—ã–±–æ—Ä–æ–º –¥–∞—Ç - —Ç–µ–ø–µ—Ä—å –Ω–∏–∂–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ */}
        <CalorieAwareDatePicker
          calorieData={calorieData}
          onDateSelected={handleDateChange}
          dailyCalorieGoal={dailyCalorieGoal}
        />

        {/* –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π */}
        <WelcomeCard
          userCalories={dailyCalorieGoal}
          userProtein={proteinGoal}
          userFat={fatGoal}
          userCarbs={carbGoal}
        />

        {/* –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π —Å–∫—Ä–æ–ª–ª Dashboard */}
        <View style={styles.dashboardContainer}>
          <ScrollView
            ref={scrollViewRef}
            horizontal
            pagingEnabled
            showsHorizontalScrollIndicator={false}
            onScroll={handleScroll}
            scrollEventThrottle={16}
            style={styles.dashboardScrollView}
            contentContainerStyle={{ paddingHorizontal: 0 }}
          >
            {/* –ü–µ—Ä–≤—ã–π —Å–ª–∞–π–¥ - –æ–±—ã—á–Ω—ã–π Dashboard */}
            <View style={[styles.dashboardSlide, { width: screenWidth - 32 }]}>
              <View style={[
                styles.calorieCard, 
                isDark && styles.darkCard, 
                isDark && styles.darkCardShadow,
                isEditingGoals && styles.editingContainer,
                isEditingGoals && isDark && styles.darkEditingContainer
              ]}>
          <View style={styles.calorieCardHeader}>
            <TouchableOpacity 
              onPress={navigateToHistoryDashboard}
              activeOpacity={0.7}
              style={styles.calorieStatusHeader}
              disabled={isEditingGoals}
            >
              <Text style={[styles.calorieSummaryText, isDark && styles.darkText]}>
                {isEditingGoals ? t('dashboard.editingGoals') : 
                  `${t('nutrition.goal')}: ${consumedCalories}/${dailyCalorieGoal} ${t('nutrition.kcal')} (${Math.round(circularProgressPercentage) || 0}%)`
                }
              </Text>
            </TouchableOpacity>
            
            <View style={styles.editButtonsContainer}>
              <TouchableOpacity
                style={[styles.editButton, isDark && styles.darkEditButton]}
                onPress={isEditingGoals ? handleSaveEditingGoals : handleStartEditingGoals}
                hitSlop={{ top: 10, bottom: 10, left: 10, right: 10 }}
              >
                <Ionicons 
                  name={isEditingGoals ? "checkmark" : "pencil"} 
                  size={16} 
                  color={isDark ? "#888888" : "#666666"} 
                />
              </TouchableOpacity>
            </View>
          </View>
          
          {isEditingGoals ? (
            // –†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ü–µ–ª–µ–π
            <View style={styles.editingGoalsContainer}>
              <View style={[styles.goalEditRow, isDark && styles.darkGoalEditRow]}>
                <Text style={[styles.goalEditLabel, isDark && styles.darkText]}>
                  {t('nutrition.calories')}:
                </Text>
                <TextInput
                  style={[styles.goalEditInput, isDark && styles.darkInput]}
                  value={editedGoals.calories}
                  onChangeText={(text) => setEditedGoals(prev => ({ ...prev, calories: text }))}
                  keyboardType="numeric"
                  placeholder="2000"
                  placeholderTextColor={isDark ? '#666' : '#999'}
                />
                <Text style={[styles.goalEditUnit, isDark && styles.darkText]}>
                  {t('nutrition.kcal')}
                </Text>
              </View>
              
              <View style={[styles.goalEditRow, isDark && styles.darkGoalEditRow]}>
                <Text style={[styles.goalEditLabel, isDark && styles.darkText]}>
                  {t('dashboard.protein')}:
                </Text>
                <TextInput
                  style={[styles.goalEditInput, isDark && styles.darkInput]}
                  value={editedGoals.protein}
                  onChangeText={(text) => setEditedGoals(prev => ({ ...prev, protein: text }))}
                  keyboardType="numeric"
                  placeholder="120"
                  placeholderTextColor={isDark ? '#666' : '#999'}
                />
                <Text style={[styles.goalEditUnit, isDark && styles.darkText]}>{t('common.gram')}</Text>
              </View>
              
              <View style={[styles.goalEditRow, isDark && styles.darkGoalEditRow]}>
                <Text style={[styles.goalEditLabel, isDark && styles.darkText]}>
                  {t('dashboard.fat')}:
                </Text>
                <TextInput
                  style={[styles.goalEditInput, isDark && styles.darkInput]}
                  value={editedGoals.fat}
                  onChangeText={(text) => setEditedGoals(prev => ({ ...prev, fat: text }))}
                  keyboardType="numeric"
                  placeholder="110"
                  placeholderTextColor={isDark ? '#666' : '#999'}
                />
                <Text style={[styles.goalEditUnit, isDark && styles.darkText]}>{t('common.gram')}</Text>
              </View>
              
              <View style={[styles.goalEditRow, isDark && styles.darkGoalEditRow]}>
                <Text style={[styles.goalEditLabel, isDark && styles.darkText]}>
                  {t('dashboard.carbs')}:
                </Text>
                <TextInput
                  style={[styles.goalEditInput, isDark && styles.darkInput]}
                  value={editedGoals.carbs}
                  onChangeText={(text) => setEditedGoals(prev => ({ ...prev, carbs: text }))}
                  keyboardType="numeric"
                  placeholder="190"
                  placeholderTextColor={isDark ? '#666' : '#999'}
                />
                <Text style={[styles.goalEditUnit, isDark && styles.darkText]}>{t('common.gram')}</Text>
              </View>
              
              <View style={[styles.goalEditRow, isDark && styles.darkGoalEditRow]}>
                <Text style={[styles.goalEditLabel, isDark && styles.darkText]}>
                  {t('nutrition.hiddenSugar')}:
                </Text>
                <TextInput
                  style={[styles.goalEditInput, isDark && styles.darkInput]}
                  value={editedGoals.sugar}
                  onChangeText={(text) => setEditedGoals(prev => ({ ...prev, sugar: text }))}
                  keyboardType="numeric"
                  placeholder="25"
                  placeholderTextColor={isDark ? '#666' : '#999'}
                />
                <Text style={[styles.goalEditUnit, isDark && styles.darkText]}>{t('common.gram')}</Text>
              </View>
            </View>
          ) : (
            // –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            <>
              <TouchableOpacity 
                onPress={navigateToHistoryDashboard}
                activeOpacity={0.7}
                style={styles.summaryContainer}
              >
                <View style={styles.circularProgressContainer}>
                  <CircularProgress
                    size={135} /* –£–≤–µ–ª–∏—á–∏–ª–∏ —Ä–∞–∑–º–µ—Ä —Å 110 –¥–æ 135 */
                    strokeWidth={12} /* –£–≤–µ–ª–∏—á–∏–ª–∏ —Ç–æ–ª—â–∏–Ω—É –∫—Ä—É–≥–∞ */
                    progressPercentage={circularProgressPercentage}
                    caloriesLeft={caloriesLeft}
                    burnedCalories={burnedCalories}
                    progressColorLight={isDark? '#06D6A0' : '#4CAF50'}
                    progressColorDark={isDark? '#06D6A0' : '#4CAF50'}
                  />
                </View>

                <View style={styles.macronutrientsContainer}>
                  {[
                    { 
                      name: t('dashboard.protein'), 
                      current: dailyNutritionData?.protein || 0, 
                      goal: proteinGoal, 
                      color: '#FF8A80', 
                      colorDark: '#FF6B6B' 
                    },
                    { 
                      name: t('dashboard.fat'), 
                      current: dailyNutritionData?.fat || 0, 
                      goal: fatGoal, 
                      color: '#FFCF50', 
                      colorDark: '#FFD166' 
                    },
                    { 
                      name: t('dashboard.carbs'), 
                      current: dailyNutritionData?.carbs || 0, 
                      goal: carbGoal, 
                      color: '#80D8FF', 
                      colorDark: '#06D6A0' 
                    },
                    { 
                      name: t('nutrition.hiddenSugar'), 
                      current: dailyNutritionData?.sugar || 0, 
                      goal: maxSugar, 
                      color: '#FF3B30', 
                      colorDark: '#FF3B30' 
                    },
                  ].map((macro) => {
                    const progress = (macro.current / macro.goal) * 100;
                    const macroBarColor = isDark ? macro.colorDark : macro.color;
                    return (
                      <View key={macro.name} style={styles.macroItem}>
                        <View style={styles.macroHeader}>
                          <Text style={[styles.macroName, isDark && styles.darkText]}>{macro.name}</Text>
                          <Text style={[styles.macroValues, isDark && styles.darkTextSecondary]}>
                            {macro.current}/{macro.goal}–≥
                          </Text>
                        </View>
                        <View style={[styles.linearProgressBar, isDark && styles.darkLinearProgressBar]}>
                          <View 
                            style={[
                              styles.linearProgressFill, 
                              { 
                                width: `${Math.min(progress, 100)}%`,
                                backgroundColor: macroBarColor 
                              }
                            ]} 
                          />
                        </View>
                      </View>
                    );
                  })}
                </View>
              </TouchableOpacity>
              
              {/* –ë–ª–æ–∫ —Å –º–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è */}
              <TouchableOpacity 
                onPress={navigateToHistoryDashboard}
                activeOpacity={0.7}
                style={styles.activityContainer}
              >
                <View style={[
                  styles.recommendationContainer,
                  isDark && { 
                    backgroundColor: 'rgba(0, 122, 255, 0.15)',
                    borderLeftColor: '#0A84FF'
                  },
                  { marginTop: 0 }
                ]}>
                  {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –≤–Ω—É—Ç—Ä–∏ –±–ª–æ–∫–∞ */}
                  <View style={[styles.sugarBarContainer, { marginBottom: 12 }]}>
                    <Text style={[styles.sugarTitle, isDark && styles.darkText]}>
                      üí° {t('dashboard.dailyRecommendations')}
                    </Text>
                  </View>
                  <Text style={[
                    styles.recommendationText, 
                    isDark && { color: '#E5E5E7' }
                  ]}>
                    {dailyMotivationMessage || t('dashboard.loadingMotivationMessage')}
                  </Text>
                </View>
              </TouchableOpacity>
            </>
          )}
              </View>
            </View>

            {/* –í—Ç–æ—Ä–æ–π —Å–ª–∞–π–¥ - –Ω–µ–¥–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
            <View style={[styles.dashboardSlide, { width: screenWidth - 32 }]}>
              <View style={[
                styles.calorieCard,
                isDark && styles.darkCard,
                isDark && styles.darkCardShadow
              ]}>
                <View style={styles.calorieCardHeader}>
                  <TouchableOpacity 
                    onPress={navigateToHistoryDashboard}
                    activeOpacity={0.7}
                    style={styles.calorieStatusHeader}
                    disabled={false}
                  >
                    <Text style={[styles.calorieSummaryText, isDark && styles.darkText]}>
                      {weeklyStats ? 
                        t('dashboard.weeklyStatsDetailed', {
                          consumed: weeklyStats.totalCalories,
                          goal: dailyCalorieGoal * 7,
                          percentage: Math.round((weeklyStats.totalCalories / (dailyCalorieGoal * 7)) * 100)
                        }) :
                        t('dashboard.weeklyStats')
                      }
                    </Text>
                  </TouchableOpacity>
                </View>

                {weeklyStats ? (
                  <>
                    {/* –í–µ—Ä—Ö–Ω—è—è —á–∞—Å—Ç—å: —Ç–æ—á–Ω–æ –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º Dashboard */}
                    <TouchableOpacity 
                      onPress={navigateToHistoryDashboard}
                      activeOpacity={0.7}
                      style={styles.summaryContainer}
                    >
                      <View style={styles.circularProgressContainer}>
                        <CircularProgress
                          size={135}
                          strokeWidth={12}
                          progressPercentage={(weeklyStats.totalCalories / (dailyCalorieGoal * 7)) * 100}
                          caloriesLeft={weeklyStats.totalCalories}
                          burnedCalories={0}
                          isWeeklyView={true}
                          progressColorLight={isDark? '#06D6A0' : '#4CAF50'}
                          progressColorDark={isDark? '#06D6A0' : '#4CAF50'}
                        />
                      </View>

                      <View style={styles.macronutrientsContainer}>
                        {[
                          { 
                            name: t('dashboard.protein'), 
                            current: weeklyStats.totalProtein, 
                            goal: proteinGoal * 7, 
                            color: '#FF8A80', 
                            colorDark: '#FF6B6B' 
                          },
                          { 
                            name: t('dashboard.fat'), 
                            current: weeklyStats.totalFat, 
                            goal: fatGoal * 7, 
                            color: '#FFCF50', 
                            colorDark: '#FFD166' 
                          },
                          { 
                            name: t('dashboard.carbs'), 
                            current: weeklyStats.totalCarbs, 
                            goal: carbGoal * 7, 
                            color: '#80D8FF', 
                            colorDark: '#06D6A0' 
                          },
                          { 
                            name: t('nutrition.hiddenSugar'), 
                            current: weeklyStats.totalSugar, 
                            goal: maxSugar * 7, 
                            color: '#FF3B30', 
                            colorDark: '#FF3B30' 
                          },
                        ].map((macro) => {
                          const progress = (macro.current / macro.goal) * 100;
                          const macroBarColor = isDark ? macro.colorDark : macro.color;
                          return (
                            <View key={macro.name} style={styles.macroItem}>
                              <View style={styles.macroHeader}>
                                <Text style={[styles.macroName, isDark && styles.darkText]}>{macro.name}</Text>
                                <Text style={[styles.macroValues, isDark && styles.darkTextSecondary]}>
                                  {macro.current}/{macro.goal}–≥
                                </Text>
                              </View>
                              <View style={[styles.linearProgressBar, isDark && styles.darkLinearProgressBar]}>
                                <View 
                                  style={[
                                    styles.linearProgressFill, 
                                    { 
                                      width: `${Math.min(progress, 100)}%`,
                                      backgroundColor: macroBarColor 
                                    }
                                  ]} 
                                />
                              </View>
                            </View>
                          );
                        })}
                      </View>
                    </TouchableOpacity>
                    
                    {/* –ë–ª–æ–∫ —Å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–º–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏ */}
                    <View style={styles.activityContainer}>
                      
                      {!isLoadingRecommendations && !aiRecommendations && canRequestRecommendations() && (
                        <TouchableOpacity 
                          style={[
                            styles.recommendationsButton,
                            recommendationError && styles.recommendationsRetryButton
                          ]}
                          onPress={handleRequestRecommendations}
                          activeOpacity={0.8}
                        >
                          <Ionicons 
                            name={recommendationError ? "refresh-outline" : "analytics-outline"} 
                            size={18} 
                            color="#FFFFFF" 
                          />
                          <Text style={styles.recommendationsButtonText}>
                            {recommendationError ? t('dashboard.retryRequest') : t('dashboard.getPersonalizedRecommendations')}
                          </Text>
                        </TouchableOpacity>
                      )}
                      
                      {isLoadingRecommendations && (
                        <View style={{ width: '100%', marginTop: 16 }}>
                          <View style={[
                            styles.recommendationsProgressBar,
                            isDark && styles.darkRecommendationsProgressBar
                          ]}>
                            <View 
                              style={[
                                styles.recommendationsProgressFill,
                                { width: `${recommendationsProgress}%` }
                              ]} 
                            />
                          </View>
                          <Text style={[
                            styles.recommendationsProgressText,
                            isDark && styles.darkRecommendationsProgressText
                          ]}>
                            {recommendationsProgressText}
                          </Text>
                        </View>
                      )}
                      
                                            {aiRecommendations && aiRecommendations.success && (
                        <View style={[
                          styles.recommendationContainer,
                          isDark && { 
                            backgroundColor: 'rgba(0, 122, 255, 0.15)',
                            borderLeftColor: '#0A84FF'
                          },
                          { marginTop: 0 }
                        ]}>
                          {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∏–∫–æ–Ω–∫–æ–π –≤–Ω—É—Ç—Ä–∏ –±–ª–æ–∫–∞ */}
                          <View style={[styles.sugarBarContainer, { flexDirection: 'row', justifyContent: 'space-between', alignItems: 'center', marginBottom: 12 }]}>
                            <Text style={[styles.sugarTitle, isDark && styles.darkText]}>
                              üí° {t('dashboard.personalizedRecommendations')}
                            </Text>
                            <TouchableOpacity
                              style={[styles.helpButton, isDark && styles.darkHelpButton]}
                              onPress={() => {
                                Alert.alert(
                                  t('dashboard.personalizedRecommendationsInfo'),
                                  t('dashboard.personalizedRecommendationsDescription'),
                                  [{ text: t('common.done'), style: 'default' }]
                                );
                              }}
                              hitSlop={{ top: 10, bottom: 10, left: 10, right: 10 }}
                            >
                              <Ionicons 
                                name="help-circle-outline" 
                                size={20} 
                                color={isDark ? "#888888" : "#666666"} 
                              />
                            </TouchableOpacity>
                          </View>
                          <Text style={[
                            styles.recommendationText, 
                            isDark && { color: '#E5E5E7' }
                          ]}>
                            {isRecommendationsExpanded ? aiRecommendations.shortSummary : truncateText(aiRecommendations.shortSummary)}
                          </Text>
                          {isRecommendationsExpanded && (
                            <View style={{ marginTop: 12 }}>
                              {aiRecommendations.bulletPoints.length > 0 ? (
                                aiRecommendations.bulletPoints.map((point, index) => (
                                  <Text key={index} style={[
                                    styles.recommendationText,
                                    isDark && { color: '#E5E5E7' },
                                    { marginTop: 6, fontSize: 14 }
                                  ]}>
                                    ‚Ä¢ {point}
                                  </Text>
                                ))
                              ) : (
                                <Text style={[
                                  styles.recommendationText,
                                  isDark && { color: '#E5E5E7' },
                                  { marginTop: 6, fontSize: 14 }
                                ]}>
                                  ‚Ä¢ {t('goalTracking.dataProcessing')}
                                </Text>
                              )}
                            </View>
                          )}
                          {(aiRecommendations.shortSummary.split(' ').length > 20 || aiRecommendations.bulletPoints.length > 0) && (
                            <TouchableOpacity
                              onPress={toggleRecommendationsExpansion}
                              style={{ marginTop: 12, alignSelf: 'flex-start' }}
                            >
                              <Text style={[
                                styles.recommendationText,
                                { color: '#0D6EFD', fontWeight: '600', fontSize: 14 }
                              ]}>
                                {isRecommendationsExpanded ? t('dashboard.showLess') : t('dashboard.readMore')}
                              </Text>
                            </TouchableOpacity>
                          )}
                        </View>
                      )}

                      {aiRecommendations && !aiRecommendations.success && (
                        <View style={[
                          styles.recommendationContainer,
                          isDark && { 
                            backgroundColor: 'rgba(255, 152, 0, 0.15)',
                            borderLeftColor: '#FF9500'
                          },
                          !isDark && { 
                            backgroundColor: 'rgba(255, 152, 0, 0.08)',
                            borderLeftColor: '#FF9500'
                          },
                          { marginTop: 0 }
                        ]}>
                          {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∏–∫–æ–Ω–∫–æ–π –≤–Ω—É—Ç—Ä–∏ –±–ª–æ–∫–∞ */}
                          <View style={[styles.sugarBarContainer, { flexDirection: 'row', justifyContent: 'space-between', alignItems: 'center', marginBottom: 12 }]}>
                            <Text style={[styles.sugarTitle, isDark && styles.darkText]}>
                              üí° {t('dashboard.personalizedRecommendations')}
                            </Text>
                            <TouchableOpacity
                              style={[styles.helpButton, isDark && styles.darkHelpButton]}
                              onPress={() => {
                                Alert.alert(
                                  t('dashboard.personalizedRecommendationsInfo'),
                                  t('dashboard.personalizedRecommendationsDescription'),
                                  [{ text: t('common.done'), style: 'default' }]
                                );
                              }}
                              hitSlop={{ top: 10, bottom: 10, left: 10, right: 10 }}
                            >
                              <Ionicons 
                                name="help-circle-outline" 
                                size={20} 
                                color={isDark ? "#888888" : "#666666"} 
                              />
                            </TouchableOpacity>
                          </View>
                          <Text style={[
                            styles.recommendationText,
                            isDark && { color: '#E5E5E7' },
                            { fontWeight: '600', marginBottom: 8 }
                          ]}>
                            ‚ö†Ô∏è {t('dashboard.recommendationsError')}
                          </Text>
                          <Text style={[
                            styles.recommendationText,
                            isDark && { color: '#E5E5E7' }
                          ]}>
                            {isRecommendationsExpanded ? aiRecommendations.shortSummary : truncateText(aiRecommendations.shortSummary)}
                          </Text>
                          {isRecommendationsExpanded && (
                            <View style={{ marginTop: 12 }}>
                              {aiRecommendations.bulletPoints.length > 0 ? (
                                aiRecommendations.bulletPoints.map((point, index) => (
                                  <Text key={index} style={[
                                    styles.recommendationText,
                                    isDark && { color: '#E5E5E7' },
                                    { marginTop: 6, fontSize: 14 }
                                  ]}>
                                    ‚Ä¢ {point}
                                  </Text>
                                ))
                              ) : (
                                <Text style={[
                                  styles.recommendationText,
                                  isDark && { color: '#E5E5E7' },
                                  { marginTop: 6, fontSize: 14 }
                                ]}>
                                  ‚Ä¢ {t('goalTracking.dataProcessing')}
                                </Text>
                              )}
                            </View>
                          )}
                          {(aiRecommendations.shortSummary.split(' ').length > 20 || aiRecommendations.bulletPoints.length > 0) && (
                            <TouchableOpacity
                              onPress={toggleRecommendationsExpansion}
                              style={{ marginTop: 12, alignSelf: 'flex-start' }}
                            >
                              <Text style={[
                                styles.recommendationText,
                                { color: '#FF9500', fontWeight: '600', fontSize: 14 }
                              ]}>
                                {isRecommendationsExpanded ? t('dashboard.showLess') : t('dashboard.readMore')}
                              </Text>
                            </TouchableOpacity>
                          )}
                        </View>
                      )}


                    </View>
                  </>
                ) : (
                  <>
                    {/* –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ü–µ–ª–∏ –Ω–∞ –Ω–µ–¥–µ–ª—é –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –¥–∞–Ω–Ω—ã—Ö */}
                    <TouchableOpacity 
                      onPress={navigateToHistoryDashboard}
                      activeOpacity={0.7}
                      style={styles.summaryContainer}
                    >
                      <View style={styles.circularProgressContainer}>
                        <CircularProgress
                          size={135}
                          strokeWidth={12}
                          progressPercentage={0}
                          caloriesLeft={dailyCalorieGoal * 7}
                          burnedCalories={0}
                          isWeeklyView={true}
                          progressColorLight={isDark? '#06D6A0' : '#4CAF50'}
                          progressColorDark={isDark? '#06D6A0' : '#4CAF50'}
                        />
                      </View>

                      <View style={styles.macronutrientsContainer}>
                        {[
                          { 
                            name: t('dashboard.protein'), 
                            current: 0, 
                            goal: proteinGoal * 7, 
                            color: '#FF8A80', 
                            colorDark: '#FF6B6B' 
                          },
                          { 
                            name: t('dashboard.fat'), 
                            current: 0, 
                            goal: fatGoal * 7, 
                            color: '#FFCF50', 
                            colorDark: '#FFD166' 
                          },
                          { 
                            name: t('dashboard.carbs'), 
                            current: 0, 
                            goal: carbGoal * 7, 
                            color: '#80D8FF', 
                            colorDark: '#06D6A0' 
                          },
                          { 
                            name: t('nutrition.hiddenSugar'), 
                            current: 0, 
                            goal: maxSugar * 7, 
                            color: '#FF3B30', 
                            colorDark: '#FF3B30' 
                          },
                        ].map((macro) => {
                          const progress = 0;
                          const macroBarColor = isDark ? macro.colorDark : macro.color;
                          return (
                            <View key={macro.name} style={styles.macroItem}>
                              <View style={styles.macroHeader}>
                                <Text style={[styles.macroName, isDark && styles.darkText]}>{macro.name}</Text>
                                <Text style={[styles.macroValues, isDark && styles.darkTextSecondary]}>
                                  {macro.current}/{macro.goal}–≥
                                </Text>
                              </View>
                              <View style={[styles.linearProgressBar, isDark && styles.darkLinearProgressBar]}>
                                <View 
                                  style={[
                                    styles.linearProgressFill, 
                                    { 
                                      width: `${Math.min(progress, 100)}%`,
                                      backgroundColor: macroBarColor 
                                    }
                                  ]} 
                                />
                              </View>
                            </View>
                          );
                        })}
                      </View>
                    </TouchableOpacity>
                    
                    {/* –ë–ª–æ–∫ —Å –∫–Ω–æ–ø–∫–æ–π Get Recommendations */}
                    <View style={styles.activityContainer}>
                      {!isLoadingRecommendations && !aiRecommendations && canRequestRecommendations() && (
                        <TouchableOpacity 
                          style={[
                            styles.recommendationsButton,
                            recommendationError && styles.recommendationsRetryButton
                          ]}
                          onPress={handleRequestRecommendations}
                          activeOpacity={0.8}
                        >
                          <Ionicons 
                            name={recommendationError ? "refresh-outline" : "analytics-outline"} 
                            size={18} 
                            color="#FFFFFF" 
                          />
                          <Text style={styles.recommendationsButtonText}>
                            {recommendationError ? t('dashboard.retryRequest') : t('dashboard.getPersonalizedRecommendations')}
                          </Text>
                        </TouchableOpacity>
                      )}
                      
                      {isLoadingRecommendations && (
                        <View style={{ width: '100%', marginTop: 16 }}>
                          <View style={[
                            styles.recommendationsProgressBar,
                            isDark && styles.darkRecommendationsProgressBar
                          ]}>
                            <View 
                              style={[
                                styles.recommendationsProgressFill,
                                { width: `${recommendationsProgress}%` }
                              ]} 
                            />
                          </View>
                          <Text style={[
                            styles.recommendationsProgressText,
                            isDark && styles.darkRecommendationsProgressText
                          ]}>
                            {recommendationsProgressText}
                          </Text>
                        </View>
                      )}
                    </View>
                  </>
                )}
              </View>
            </View>

            {/* –¢—Ä–µ—Ç–∏–π —Å–ª–∞–π–¥ - –≤–∏—Ç–∞–º–∏–Ω—ã –∏ –º–∏–Ω–µ—Ä–∞–ª—ã */}
            <View style={[styles.dashboardSlide, { width: screenWidth - 32 }]}>
              <View style={[
                styles.calorieCard,
                isDark && styles.darkCard,
                isDark && styles.darkCardShadow
              ]}>
                <View style={styles.calorieCardHeader}>
                  <TouchableOpacity 
                    onPress={navigateToHistoryDashboard}
                    activeOpacity={0.7}
                    style={styles.calorieStatusHeader}
                    disabled={false}
                  >
                    <Text style={[styles.calorieSummaryText, isDark && styles.darkText]}>
                      {t('dashboard.vitaminsAndMineralsWeekly')}
                    </Text>
                  </TouchableOpacity>
                </View>

                {weeklyVitaminMinerals ? (
                  <>
                    {/* –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç - –∫—Ä—É–≥–∏ —Å –ª–µ–≥–µ–Ω–¥–∞–º–∏ */}
                    <View style={styles.vitaminMineralMainContainer}>
                      {/* –õ–µ–≤–∞—è —á–∞—Å—Ç—å - –í–∏—Ç–∞–º–∏–Ω—ã */}
                      <View style={styles.vitaminMineralSection}>
                        <VitaminMineralCircle
                          data={weeklyVitaminMinerals.vitamins}
                          title={t('product.vitamins')}
                          totalScore={weeklyVitaminMinerals.vitaminScore}
                          size={110}
                        />
                        
                        {/* –õ–µ–≥–µ–Ω–¥–∞ –≤–∏—Ç–∞–º–∏–Ω–æ–≤ */}
                        <View style={styles.compactLegendContainer}>
                          {weeklyVitaminMinerals.vitamins.map((vitamin, index) => (
                            <View key={vitamin.name} style={styles.compactLegendItem}>
                              <View style={[styles.legendColorDot, { backgroundColor: vitamin.color }]} />
                              <Text style={[styles.compactLegendText, isDark && styles.darkText]}>
                                {vitamin.shortName} {Math.round((vitamin.current / vitamin.goal) * 100)}%
                              </Text>
                            </View>
                          ))}
                        </View>
                      </View>

                      {/* –ü—Ä–∞–≤–∞—è —á–∞—Å—Ç—å - –ú–∏–Ω–µ—Ä–∞–ª—ã */}
                      <View style={styles.vitaminMineralSection}>
                        <VitaminMineralCircle
                          data={weeklyVitaminMinerals.minerals}
                          title={t('product.minerals')}
                          totalScore={weeklyVitaminMinerals.mineralScore}
                          size={110}
                        />
                        
                        {/* –õ–µ–≥–µ–Ω–¥–∞ –º–∏–Ω–µ—Ä–∞–ª–æ–≤ */}
                        <View style={styles.compactLegendContainer}>
                          {weeklyVitaminMinerals.minerals.map((mineral, index) => (
                            <View key={mineral.name} style={styles.compactLegendItem}>
                              <View style={[styles.legendColorDot, { backgroundColor: mineral.color }]} />
                              <Text style={[styles.compactLegendText, isDark && styles.darkText]}>
                                {mineral.shortName} {Math.round((mineral.current / mineral.goal) * 100)}%
                              </Text>
                            </View>
                          ))}
                        </View>
                      </View>
                    </View>

                    {/* –î–µ—Ñ–∏—Ü–∏—Ç—ã –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ - –∫–æ–º–ø–∞–∫—Ç–Ω–æ */}
                    {weeklyVitaminMinerals.deficiencies.length > 0 && (
                      <View style={[
                        styles.recommendationContainer,
                        isDark && { 
                          backgroundColor: 'rgba(255, 152, 0, 0.15)',
                          borderLeftColor: '#FF9800'
                        },
                        { marginTop: 0 }
                      ]}>
                        <Text style={[styles.compactDeficiencyTitle, isDark && styles.darkText]}>
                          ‚ö†Ô∏è {t('dashboard.deficiency')}: {weeklyVitaminMinerals.deficiencies.join(', ')}
                        </Text>
                        <Text style={[
                          styles.compactRecommendationText, 
                          isDark && { color: '#E5E5E7' }
                        ]}>
                          {isVitaminRecommendationsExpanded 
                            ? weeklyVitaminMinerals.recommendations.join(' ')
                            : truncateVitaminText(weeklyVitaminMinerals.recommendations.join(' '))
                          }
                        </Text>
                        {weeklyVitaminMinerals.recommendations.join(' ').split(' ').length > 8 && (
                          <TouchableOpacity
                            onPress={toggleVitaminRecommendationsExpansion}
                            style={{ marginTop: 8, alignSelf: 'flex-start' }}
                          >
                            <Text style={[
                              styles.compactRecommendationText,
                              { color: '#0D6EFD', fontWeight: '600', fontSize: 14 }
                            ]}>
                              {isVitaminRecommendationsExpanded ? t('dashboard.showLess') : t('dashboard.readMore')}
                            </Text>
                          </TouchableOpacity>
                        )}
                      </View>
                    )}
                  </>
                ) : (
                  <>
                    {/* –°–æ—Å—Ç–æ—è–Ω–∏–µ "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö" - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä—É–≥–∏ —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ */}
                    <View style={styles.vitaminMineralMainContainer}>
                      {/* –õ–µ–≤–∞—è —á–∞—Å—Ç—å - –í–∏—Ç–∞–º–∏–Ω—ã —Å –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–æ–º */}
                      <View style={styles.vitaminMineralSection}>
                        <VitaminMineralCircle
                          data={[]}
                          title={t('product.vitamins')}
                          totalScore={0}
                          size={110}
                          showPlaceholder={true}
                        />
                        
                        {/* –õ–µ–≥–µ–Ω–¥–∞ –≤–∏—Ç–∞–º–∏–Ω–æ–≤ —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ */}
                        <View style={styles.compactLegendContainer}>
                          {['C', 'D', 'B12', 'B9', 'A', 'E'].map((shortName, index) => (
                            <View key={shortName} style={styles.compactLegendItem}>
                              <View style={[styles.legendColorDot, { backgroundColor: '#4CAF50' }]} />
                              <Text style={[styles.compactLegendText, isDark && styles.darkText]}>
                                {shortName} ?
                              </Text>
                            </View>
                          ))}
                        </View>
                      </View>

                      {/* –ü—Ä–∞–≤–∞—è —á–∞—Å—Ç—å - –ú–∏–Ω–µ—Ä–∞–ª—ã —Å –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–æ–º */}
                      <View style={styles.vitaminMineralSection}>
                        <VitaminMineralCircle
                          data={[]}
                          title={t('product.minerals')}
                          totalScore={0}
                          size={110}
                          showPlaceholder={true}
                        />
                        
                        {/* –õ–µ–≥–µ–Ω–¥–∞ –º–∏–Ω–µ—Ä–∞–ª–æ–≤ —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ */}
                        <View style={styles.compactLegendContainer}>
                          {['Ca', 'Fe', 'Mg', 'Zn', 'K', 'Na'].map((shortName, index) => (
                            <View key={shortName} style={styles.compactLegendItem}>
                              <View style={[styles.legendColorDot, { backgroundColor: '#607D8B' }]} />
                              <Text style={[styles.compactLegendText, isDark && styles.darkText]}>
                                {shortName} ?
                              </Text>
                            </View>
                          ))}
                        </View>
                      </View>
                    </View>

                    {/* –ö–Ω–æ–ø–∫–∞ Get Recommendations */}
                    <View style={{ alignItems: 'center', paddingTop: 0 }}>
                      {!isLoadingRecommendations && (
                        <TouchableOpacity
                          style={[
                            styles.recommendationsButton,
                            !canRequestRecommendations() && styles.recommendationsDisabled
                          ]}
                          onPress={handleRequestRecommendations}
                          disabled={isLoadingRecommendations || !canRequestRecommendations()}
                        >
                          <Text style={styles.recommendationsButtonText}>
                            {t('dashboard.getPersonalizedRecommendations')}
                          </Text>
                        </TouchableOpacity>
                      )}
                      
                      {isLoadingRecommendations && (
                        <View style={{ width: '100%', marginTop: 16 }}>
                          <View style={[
                            styles.recommendationsProgressBar,
                            isDark && styles.darkRecommendationsProgressBar
                          ]}>
                            <View 
                              style={[
                                styles.recommendationsProgressFill,
                                { width: `${recommendationsProgress}%` }
                              ]} 
                            />
                          </View>
                          <Text style={[
                            styles.recommendationsProgressText,
                            isDark && styles.darkRecommendationsProgressText
                          ]}>
                            {recommendationsProgressText}
                          </Text>
                        </View>
                      )}
                    </View>
                  </>
                )}
              </View>
            </View>
          </ScrollView>

          {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —Å–ª–∞–π–¥–æ–≤ */}
          <View style={styles.slideIndicatorContainer}>
            {[0, 1, 2].map((index) => (
              <TouchableOpacity
                key={index}
                style={[
                  styles.slideIndicator,
                  currentSlide === index && styles.slideIndicatorActive,
                  isDark && currentSlide !== index && { backgroundColor: '#3A3A3C' }
                ]}
                onPress={() => scrollToSlide(index)}
              />
            ))}
          </View>
        </View>
        
        {/* Recent Scans/Added —Å –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–º —Å–∫—Ä–æ–ª–ª–æ–º */}
        <View style={styles.recentContainer}>
        <View style={styles.sectionHeader}>
            <Text style={[styles.sectionHeaderTitle, isDark && styles.darkText]}>
              {getRecentSectionTitle()}
            </Text>
            <TouchableOpacity onPress={handleRecentViewAll}>
              <Text style={[styles.viewAllText, isDark && styles.darkTextSecondary]}>
                {t('common.viewAll')}
              </Text>
            </TouchableOpacity>
        </View>
        
          <ScrollView
            ref={recentScrollViewRef}
            horizontal
            pagingEnabled
            showsHorizontalScrollIndicator={false}
            onScroll={handleRecentScroll}
            scrollEventThrottle={16}
            style={styles.recentScrollView}
            contentContainerStyle={{ paddingHorizontal: 0 }}
          >
            {/* –°—Ç—Ä–∞–Ω–∏—Ü–∞ 1 - Recently Added */}
            <View style={[styles.recentSlide, { width: screenWidth - 32 }]}>
              {recentAdded.length > 0 ? (
                <View style={styles.productCardsContainer}>
                  {recentAdded.map(product => (
                    <RecentAddedProductItem 
                      key={product.id} 
                      item={product} 
                      isDark={isDark}
                      t={t}
                      onDelete={() => {
                        loadRecentScans();
                        loadRecentAdded();
                        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–∏—Ç–∞–Ω–∏—è –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –¥–Ω–µ–≤–Ω–∏–∫–∞
                        loadNutritionData(currentDate);
                      }}
                    />
                  ))}
                </View>
              ) : (
                <View style={styles.emptyStateContainer}>
                  <Ionicons name="restaurant-outline" size={48} color={isDark ? "#666" : "#CCC"} />
                  <Text style={[styles.emptyStateText, isDark && styles.darkTextSecondary]}>
                    {t('dashboard.noAddedProducts')}
                  </Text>
                  <Link href="/add-manual-product" asChild> 
                    <TouchableOpacity style={styles.scanButton}>
                      <Text style={styles.scanButtonText}>{t('dashboard.addProduct')}</Text>
                    </TouchableOpacity>
                  </Link>
                </View>
              )}
            </View>

            {/* –°—Ç—Ä–∞–Ω–∏—Ü–∞ 2 - Recent Scans */}
            <View style={[styles.recentSlide, { width: screenWidth - 32 }]}>
        {recentScans.length > 0 ? (
          <View style={styles.productCardsContainer}>
            {recentScans.map(product => (
                    <RecentProductItem 
                key={product.id} 
                      item={product} 
                      isDark={isDark}
                      t={t}
                      onDelete={() => {
                        loadRecentScans();
                        loadRecentAdded();
                      }}
              />
            ))}
          </View>
        ) : (
          <View style={styles.emptyStateContainer}>
            <Ionicons name="camera-outline" size={48} color={isDark ? "#666" : "#CCC"} />
            <Text style={[styles.emptyStateText, isDark && styles.darkTextSecondary]}>
              {t('dashboard.noScannedProducts')}
            </Text>
            <Link href="/scan" asChild> 
              <TouchableOpacity style={styles.scanButton}>
                <Text style={styles.scanButtonText}>{t('common.scanProduct')}</Text>
              </TouchableOpacity>
            </Link>
          </View>
        )}
            </View>
          </ScrollView>

          {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —Å—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è Recent –±–ª–æ–∫–∞ */}
          <View style={styles.recentIndicatorContainer}>
            {[0, 1].map((index) => (
              <TouchableOpacity
                key={index}
                style={[
                  styles.recentIndicator,
                  currentRecentSlide === index && styles.recentIndicatorActive,
                  isDark && currentRecentSlide !== index && { backgroundColor: '#3A3A3C' }
                ]}
                onPress={() => scrollToRecentSlide(index)}
              />
            ))}
          </View>
        </View>

        {/* Quick Access Section */}
        <View style={styles.quickAccessSection}>
          <View style={styles.sectionHeader}>
            <Text style={[styles.sectionHeaderTitle, isDark && styles.darkText]}>
              {t('dashboard.quickAccess')}
            </Text>
          </View>
          
          <View style={styles.quickAccessGrid}>
            {/* How Calculations Work */}
            <TouchableOpacity 
              style={[styles.quickAccessCard, isDark && styles.darkQuickAccessCard]}
              onPress={() => router.push('/calculation-science')}
              activeOpacity={0.7}
            >
              <View style={[styles.quickAccessIconContainer, { backgroundColor: 'rgba(52, 199, 89, 0.15)' }]}>
                <Ionicons name="flask-outline" size={24} color="#34C759" />
              </View>
              <Text style={[styles.quickAccessTitle, isDark && styles.darkText]}>
                {t('dashboard.calculationsWork')}
              </Text>
              <Text style={[styles.quickAccessDescription, isDark && styles.darkTextSecondary]}>
                {t('dashboard.calculationsWorkDesc')}
              </Text>
            </TouchableOpacity>

            {/* User Profile */}
            <TouchableOpacity 
              style={[styles.quickAccessCard, isDark && styles.darkQuickAccessCard]}
              onPress={() => router.push('/user-profile')}
              activeOpacity={0.7}
            >
              <View style={[styles.quickAccessIconContainer, { backgroundColor: 'rgba(13, 110, 253, 0.15)' }]}>
                <Ionicons name="person-outline" size={24} color="#0D6EFD" />
              </View>
              <Text style={[styles.quickAccessTitle, isDark && styles.darkText]}>
                {t('dashboard.userProfile')}
              </Text>
              <Text style={[styles.quickAccessDescription, isDark && styles.darkTextSecondary]}>
                {t('dashboard.userProfileDesc')}
              </Text>
            </TouchableOpacity>

            {/* Adjust Plan */}
            <TouchableOpacity 
              style={[styles.quickAccessCard, isDark && styles.darkQuickAccessCard]}
              onPress={() => router.push('/goal-tracking/plan-settings')}
              activeOpacity={0.7}
            >
              <View style={[styles.quickAccessIconContainer, { backgroundColor: 'rgba(255, 149, 0, 0.15)' }]}>
                <Ionicons name="settings-outline" size={24} color="#FF9500" />
              </View>
              <Text style={[styles.quickAccessTitle, isDark && styles.darkText]}>
                {t('dashboard.adjustPlan')}
              </Text>
              <Text style={[styles.quickAccessDescription, isDark && styles.darkTextSecondary]}>
                {t('dashboard.adjustPlanDesc')}
              </Text>
            </TouchableOpacity>

            {/* Detailed Statistics */}
            <TouchableOpacity 
              style={[styles.quickAccessCard, isDark && styles.darkQuickAccessCard]}
              onPress={() => {
                Alert.alert(
                  t('dashboard.comingSoon'),
                  t('dashboard.comingSoonDescription')
                );
              }}
              activeOpacity={0.7}
            >
              <View style={[styles.quickAccessIconContainer, { backgroundColor: 'rgba(255, 59, 48, 0.15)' }]}>
                <Ionicons name="bar-chart-outline" size={24} color="#FF3B30" />
              </View>
              <Text style={[styles.quickAccessTitle, isDark && styles.darkText]}>
                {t('dashboard.detailedStats')}
              </Text>
              <Text style={[styles.quickAccessDescription, isDark && styles.darkTextSecondary]}>
                {t('dashboard.detailedStatsDesc')}
              </Text>
            </TouchableOpacity>
          </View>
        </View>
      </ScrollView>
    </SafeAreaView>
  );
}

