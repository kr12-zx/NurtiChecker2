import { Ionicons } from '@expo/vector-icons';
import AsyncStorage from '@react-native-async-storage/async-storage';
import { Link, useFocusEffect, useRouter } from 'expo-router';
import React, { useCallback, useEffect, useRef, useState } from 'react';
import { Dimensions, RefreshControl, ScrollView, Text, TouchableOpacity, useColorScheme, View } from 'react-native';
import { SafeAreaView } from 'react-native-safe-area-context';
import CalorieAwareDatePicker, { CalorieStatus, DayCalorieData } from '../../components/CalorieAwareDatePicker';
import CircularProgress from '../../components/CircularProgress';
import ProductCard, { ProductData } from '../../components/ProductCard';
import { useTranslation } from '../../i18n/i18n';
import { DailyNutritionData, formatDateToString, getDailyNutrition } from '../../services/dailyNutrition';
import { navigateToHistoryDashboard } from '../../services/navigationService';
import { getRecentScans } from '../../services/scanHistory';
import { NutritionCalculationResult } from '../../utils/nutritionCalculator';
import { styles } from './main01.styles';

interface MacronutrientData {
  current: number;
  goal: number;
  name: string;
  color: string;
  colorDark: string;
}

interface WeeklyStats {
  averageCalories: number;
  averageProtein: number;
  averageFat: number;
  averageCarbs: number;
  averageSugar: number;
  totalCalories: number;
  totalProtein: number;
  totalFat: number;
  totalCarbs: number;
  totalSugar: number;
  daysInGoal: number;
  totalDays: number;
  caloriesTrend: number; // –ø—Ä–æ—Ü–µ–Ω—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –Ω–µ–¥–µ–ª–∏
  proteinPercentage: number;
  fatPercentage: number;
  carbsPercentage: number;
  sugarPercentage: number;
  dailyData: Array<{
    day: string;
    calories: number;
    hasData: boolean;
  }>;
}

interface VitaminMineralData {
  name: string;
  shortName: string;
  current: number;
  goal: number;
  color: string;
  // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å AI –¥–∞–Ω–Ω—ã–º–∏
  currentWeeklyIntake?: string;
  weeklyGoal?: string;
  percentage?: number;
  status?: string;
}

interface WeeklyVitaminMinerals {
  vitamins: VitaminMineralData[];
  minerals: VitaminMineralData[];
  vitaminScore: number;
  mineralScore: number;
  deficiencies: string[];
  recommendations: string[];
  // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—è –∏–∑ AI –æ—Ç–≤–µ—Ç–∞
  overallVitaminScore?: number;
  overallMineralScore?: number;
  deficiencyList?: string[];
}

// –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–∏–ø—ã –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
interface RecommendationsResponse {
  success: boolean;
  recommendations: {
    title: string;
    message: string;
    tips: string[];
    priority: 'high' | 'medium' | 'low';
  }[];
  analysis: {
    calorieBalance: string;
    macroBalance: string;
    overallScore: number;
  };
  nextSteps: string[];
}

// –ù–æ–≤—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è AI —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –∏–∑ N8N
interface AIRecommendationsResponse {
  success: boolean;
  shortSummary: string;
  bulletPoints: string[];
  detailedAnalysis?: string;
  recommendations?: string[];
  timestamp: string;
  // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ –¥–ª—è –≤–∏—Ç–∞–º–∏–Ω–Ω–æ–≥–æ –¥–∞—à–±–æ—Ä–¥–∞
  vitaminMineralDashboard?: {
    vitamins: Array<{
      name: string;
      shortName: string;
      currentWeeklyIntake: string;
      weeklyGoal: string;
      percentage: number;
      status: string;
    }>;
    minerals: Array<{
      name: string;
      shortName: string;
      currentWeeklyIntake: string;
      weeklyGoal: string;
      percentage: number;
      status: string;
    }>;
    overallVitaminScore: number;
    overallMineralScore: number;
    deficiencyList: string[];
    recommendations: string[];
  };
}

// –í—Ä–µ–º–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π (–∑–∞–≥–ª—É—à–∫–∞)
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ AI —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –∏–∑ N8N
const requestAIRecommendations = async (userEmail: string, locale: string): Promise<AIRecommendationsResponse> => {
  try {
    console.log('ü§ñ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ N8N –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è AI —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π...');
    
    const response = await fetch('https://ttagent.website/webhook/get-recommendations', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        userId: userEmail,
        requestedAt: new Date().toISOString(),
        locale: locale, // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —è–∑—ã–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
      }),
    });

    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }

    const data = await response.json();
    console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω—ã AI —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:', data);

    // N8N –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ –ø–æ–ª–µ text –∫–∞–∫ JSON —Å—Ç—Ä–æ–∫—É
    let aiData;
    try {
      // –ò–∑–≤–ª–µ–∫–∞–µ–º JSON –∏–∑ markdown –±–ª–æ–∫–∞
      const jsonText = data.text.replace(/```json\n/, '').replace(/\n```$/, '');
      aiData = JSON.parse(jsonText);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ AI –æ—Ç–≤–µ—Ç–∞:', error);
      throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç AI');
    }

    return {
      success: true,
      shortSummary: aiData.nutritionRecommendations?.shortSummary || '–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≥–æ—Ç–æ–≤—ã',
      bulletPoints: aiData.nutritionRecommendations?.bulletPoints || ['–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø–∏—Ç–∞–Ω–∏–µ'],
      detailedAnalysis: aiData.calorieAnalysis?.assessment,
      recommendations: aiData.nutritionRecommendations,
      timestamp: new Date().toISOString(),
      vitaminMineralDashboard: aiData.vitaminMineralDashboard
    };
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ AI —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π:', error);
    throw error;
  }
};

const requestPersonalizedRecommendations = async (
  weeklyStats: any,
  userGoals: any,
  userProfile: any
): Promise<RecommendationsResponse> => {
  // –ò–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–¥–µ—Ä–∂–∫—É —Å–µ—Ç–∏
  await new Promise(resolve => setTimeout(resolve, 2000));
  
  return {
    success: true,
    recommendations: [
      {
        title: '–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏',
        message: '–ù–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é, –º—ã –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø–∏—Ç–∞–Ω–∏—è.',
        tips: [
          '–£–≤–µ–ª–∏—á—å—Ç–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –±–µ–ª–∫–∞ –Ω–∞ 15%',
          '–î–æ–±–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ –æ–≤–æ—â–µ–π –≤ —Ä–∞—Ü–∏–æ–Ω',
          '–ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–π—Ç–µ —Ä–∞–∑–º–µ—Ä –ø–æ—Ä—Ü–∏–π',
          '–ü–µ–π—Ç–µ –±–æ–ª—å—à–µ –≤–æ–¥—ã –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è'
        ],
        priority: 'high' as const,
      },
    ],
    analysis: {
      calorieBalance: '–°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π',
      macroBalance: '–¢—Ä–µ–±—É–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏',
      overallScore: 75,
    },
    nextSteps: [
      '–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø–∏—Ç–∞–Ω–∏–µ',
      '–î–æ–±–∞–≤—å—Ç–µ —Ñ–∏–∑–∏—á–µ—Å–∫—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å',
      '–ü–ª–∞–Ω–∏—Ä—É–π—Ç–µ –ø—Ä–∏–µ–º—ã –ø–∏—â–∏ –∑–∞—Ä–∞–Ω–µ–µ'
    ],
  };
};

export default function Main01Screen() { 
  const colorScheme = useColorScheme();
  const isDark = colorScheme === 'dark';
  const { t, locale } = useTranslation();
  const router = useRouter();
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è –∏–∑ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
  const [nutritionPlan, setNutritionPlan] = useState<NutritionCalculationResult | null>(null);
  
  // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ü–µ–ª–µ–π –ø–∏—Ç–∞–Ω–∏—è
  const [isEditingGoals, setIsEditingGoals] = useState(false);
  const [editedGoals, setEditedGoals] = useState({
    calories: '',
    protein: '',
    fat: '',
    carbs: '',
    sugar: ''
  });
  
  // –ó–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –¥–Ω–µ–≤–Ω—ã—Ö —Ü–µ–ª–µ–π (fallback –µ—Å–ª–∏ –ø–ª–∞–Ω –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω)
  const defaultCalorieGoal = 2000;
  const defaultMaxSugar = 25;
  const defaultProteinGoal = 120;
  const defaultFatGoal = 110;
  const defaultCarbGoal = 190;
  
  // –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  const dailyCalorieGoal = nutritionPlan?.targetCalories || defaultCalorieGoal;
  const maxSugar = nutritionPlan?.maxHiddenSugar || defaultMaxSugar;
  const proteinGoal = nutritionPlan?.dailyMacros.protein || defaultProteinGoal;
  const fatGoal = nutritionPlan?.dailyMacros.fat || defaultFatGoal;
  const carbGoal = nutritionPlan?.dailyMacros.carbs || defaultCarbGoal;
  
  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –≤ useEffect –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–Ω–µ–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–∏—Ç–∞–Ω–∏—è
  const [dailyNutritionData, setDailyNutritionData] = useState<DailyNutritionData | null>(null);
  const [currentDate, setCurrentDate] = useState<Date>(new Date());
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∫–∞–ª–æ—Ä–∏—è—Ö –∑–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–Ω–∏
  const [historicalCalorieData, setHistoricalCalorieData] = useState<DayCalorieData[]>([]);
  
  // –ó–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
  const consumedCalories = dailyNutritionData?.caloriesConsumed || 0;
  const burnedCalories = 0; // –í —Ç–µ–∫—É—â–µ–π –≤–µ—Ä—Å–∏–∏ –Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —Å–æ–∂–∂–µ–Ω–Ω—ã–µ –∫–∞–ª–æ—Ä–∏–∏
  const caloriesActuallyConsumed = consumedCalories - burnedCalories;
  const caloriesLeft = dailyCalorieGoal - caloriesActuallyConsumed; 
  const circularProgressPercentage = (caloriesActuallyConsumed / dailyCalorieGoal) * 100;
  
  // –î–∞–Ω–Ω—ã–µ –ø–æ —Å–∫—Ä—ã—Ç–æ–º—É —Å–∞—Ö–∞—Ä—É
  const currentSugar = dailyNutritionData?.sugar || 0;
  
  // –ú–∞–∫—Ä–æ–Ω—É—Ç—Ä–∏–µ–Ω—Ç—ã —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
  const [macronutrients, setMacronutrients] = useState<MacronutrientData[]>([
    { name: t('dashboard.protein'), current: 0, goal: proteinGoal, color: '#FF8A80', colorDark: '#FF6B6B' },
    { name: t('dashboard.fat'), current: 0, goal: fatGoal, color: '#FFCF50', colorDark: '#FFD166' },
    { name: t('dashboard.carbs'), current: 0, goal: carbGoal, color: '#80D8FF', colorDark: '#06D6A0' },
    { name: t('nutrition.hiddenSugar'), current: 0, goal: maxSugar, color: '#FF3B30', colorDark: '#FF3B30' },
  ]);
  
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
  const [recentScans, setRecentScans] = useState<ProductData[]>([]);
  const [refreshing, setRefreshing] = useState(false);
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –Ω–µ–¥–µ–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ —Å–∫—Ä–æ–ª–ª–∞
  const [weeklyStats, setWeeklyStats] = useState<WeeklyStats | null>(null);
  const [weeklyVitaminMinerals, setWeeklyVitaminMinerals] = useState<WeeklyVitaminMinerals | null>(null);
  const [currentSlide, setCurrentSlide] = useState(0);
  const scrollViewRef = useRef<ScrollView>(null);
  const screenWidth = Dimensions.get('window').width;
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –º–æ—Ç–∏–≤–∏—Ä—É—é—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
  const [dailyMotivationMessage, setDailyMotivationMessage] = useState<string>('');
  
  // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
  const [isLoadingRecommendations, setIsLoadingRecommendations] = useState(false);
  const [recommendationsProgress, setRecommendationsProgress] = useState(0);
  const [recommendationsProgressText, setRecommendationsProgressText] = useState('');
  const [personalizedRecommendations, setPersonalizedRecommendations] = useState<RecommendationsResponse | null>(null);
  
  // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è AI —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –∏–∑ N8N
  const [aiRecommendations, setAiRecommendations] = useState<AIRecommendationsResponse | null>(null);
  const [lastRecommendationDate, setLastRecommendationDate] = useState<string | null>(null);
  const [recommendationError, setRecommendationError] = useState<boolean>(false);
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
  const [isRecommendationsExpanded, setIsRecommendationsExpanded] = useState(false);
  const [isVitaminRecommendationsExpanded, setIsVitaminRecommendationsExpanded] = useState(false);
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞—Ç—ã
  const handleDateChange = (date: Date) => {
    console.log(`–í—ã–±—Ä–∞–Ω–∞ –Ω–æ–≤–∞—è –¥–∞—Ç–∞: ${formatDateToString(date)}`);
    setCurrentDate(date);
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç—ã –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–µ–µ
    loadNutritionData(date);
    
    // –ë–æ–ª—å—à–µ –Ω–µ –∑–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –∫–∞–∂–¥–æ–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –¥–∞—Ç—ã
    // –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–±–ª–µ–º —Å –ø–µ—Ä–µ–∑–∞–ø–∏—Å—å—é –¥–∞–Ω–Ω—ã—Ö –∏ –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
  };
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ pull-to-refresh
  const onRefresh = useCallback(() => {
    setRefreshing(true);
    Promise.all([
      loadNutritionData(currentDate),
      loadRecentScans()
    ]).finally(() => {
      setRefreshing(false);
    });
  }, [currentDate]);
  
  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫—ç—à–µ–º AI —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
  const saveAIRecommendationsToCache = async (recommendations: AIRecommendationsResponse, date: string) => {
    try {
      await AsyncStorage.setItem('aiRecommendations', JSON.stringify(recommendations));
      await AsyncStorage.setItem('lastRecommendationDate', date);
      console.log('üíæ AI —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –∫—ç—à –¥–ª—è –¥–∞—Ç—ã:', date);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è AI —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π:', error);
    }
  };

  const loadAIRecommendationsFromCache = async () => {
    try {
      const [cachedRecommendations, cachedDate] = await Promise.all([
        AsyncStorage.getItem('aiRecommendations'),
        AsyncStorage.getItem('lastRecommendationDate')
      ]);

      if (cachedRecommendations && cachedDate) {
        const today = new Date().toDateString();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫—ç—à –∞–∫—Ç—É–∞–ª–µ–Ω (—Å–µ–≥–æ–¥–Ω—è—à–Ω—è—è –¥–∞—Ç–∞)
        if (cachedDate === today) {
          const recommendations = JSON.parse(cachedRecommendations) as AIRecommendationsResponse;
          
          // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ª—å–∫–æ —É—Å–ø–µ—à–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏–∑ –∫—ç—à–∞
          if (recommendations.success) {
            setAiRecommendations(recommendations);
            setLastRecommendationDate(cachedDate);
            setRecommendationError(false);
            console.log('üì± –ó–∞–≥—Ä—É–∂–µ–Ω—ã AI —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏–∑ –∫—ç—à–∞ –¥–ª—è –¥–∞—Ç—ã:', cachedDate);
            console.log('üìä –î–∞–Ω–Ω—ã–µ –Ω–µ–¥–µ–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π:', {
              shortSummary: recommendations.shortSummary,
              bulletPointsCount: recommendations.bulletPoints?.length || 0,
              bulletPoints: recommendations.bulletPoints,
              hasVitaminData: !!recommendations.vitaminMineralDashboard
            });
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏—Ç–∞–º–∏–Ω–Ω—ã–π –¥–∞—à–±–æ—Ä–¥ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –æ—Ç AI
            if (recommendations.vitaminMineralDashboard) {
              console.log('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏—Ç–∞–º–∏–Ω–Ω—ã–π –¥–∞—à–±–æ—Ä–¥ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –æ—Ç AI...');
              await loadWeeklyVitaminMinerals(recommendations);
            }
            
            return true;
          } else {
            // –ï—Å–ª–∏ –≤ –∫—ç—à–µ –æ—à–∏–±–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –æ—á–∏—â–∞–µ–º –∏—Ö
            console.log('üóëÔ∏è –í –∫—ç—à–µ –æ—à–∏–±–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –æ—á–∏—â–∞–µ–º');
            await AsyncStorage.removeItem('aiRecommendations');
            await AsyncStorage.removeItem('lastRecommendationDate');
          }
        } else {
          console.log('üóëÔ∏è –ö—ç—à —É—Å—Ç–∞—Ä–µ–ª, –æ—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ');
          await AsyncStorage.removeItem('aiRecommendations');
          await AsyncStorage.removeItem('lastRecommendationDate');
        }
      }
      return false;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ AI —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –∏–∑ –∫—ç—à–∞:', error);
      return false;
    }
  };

  const canRequestRecommendations = () => {
    const today = new Date().toDateString();
    // –ö–Ω–æ–ø–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –µ—Å–ª–∏:
    // 1. –°–µ–≥–æ–¥–Ω—è –µ—â–µ –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    // 2. –ò–ª–∏ –±—ã–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–º –∑–∞–ø—Ä–æ—Å–µ
    return !lastRecommendationDate || lastRecommendationDate !== today || recommendationError;
  };

  // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
  useEffect(() => {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ AsyncStorage
    const loadSavedData = async () => {
      try {
        const savedHistoricalData = await AsyncStorage.getItem('historicalCalorieData');
        if (savedHistoricalData) {
          const parsedData = JSON.parse(savedHistoricalData) as DayCalorieData[];
          // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫–∏ –¥–∞—Ç –≤ –æ–±—ä–µ–∫—Ç—ã Date
          const processedData = parsedData.map(item => ({
            ...item,
            date: new Date(item.date)
          }));
          console.log(`–ó–∞–≥—Ä—É–∂–µ–Ω—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: ${processedData.length} –∑–∞–ø–∏—Å–µ–π`);
          setHistoricalCalorieData(processedData);
        }

        // –ó–∞–≥—Ä—É–∂–∞–µ–º AI —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏–∑ –∫—ç—à–∞
        await loadAIRecommendationsFromCache();
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', error);
      }
    };
    
    loadSavedData();
  }, []);
  
  // –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–ª–∏ –º–∞–∫—Ä–æ–Ω—É—Ç—Ä–∏–µ–Ω—Ç–æ–≤ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è
  useEffect(() => {
    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–ª–µ–π –ø–∏—Ç–∞–Ω–∏—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–∏
    console.log('üéØ –û–±–Ω–æ–≤–ª–µ–Ω—ã —Ü–µ–ª–∏ –ø–∏—Ç–∞–Ω–∏—è:', {
      hasNutritionPlan: !!nutritionPlan,
      dailyCalorieGoal,
      proteinGoal,
      fatGoal,
      carbGoal,
      maxSugar,
      source: nutritionPlan ? '–ò–ó –ü–õ–ê–ù–ê' : '–ü–û –£–ú–û–õ–ß–ê–ù–ò–Æ'
    });
    
    setMacronutrients(prevMacros => [
      { ...prevMacros[0], goal: proteinGoal },
      { ...prevMacros[1], goal: fatGoal },
      { ...prevMacros[2], goal: carbGoal },
      { ...(prevMacros[3] || { name: t('nutrition.hiddenSugar'), current: 0, color: '#FF3B30', colorDark: '#FF3B30' }), goal: maxSugar },
    ]);
  }, [proteinGoal, fatGoal, carbGoal, maxSugar]);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–µ —ç–∫—Ä–∞–Ω–∞
  // –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ –¥–≤–∞ useEffect –¥–ª—è –¥–≤—É—Ö —Ä–∞–∑–Ω—ã—Ö —Ñ–∞–∑ –∑–∞–≥—Ä—É–∑–∫–∏
  useEffect(() => {
    console.log('–ü–µ—Ä–≤–∏—á–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö - —Ñ–∞–∑–∞ 1');
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –∏–∑ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
    loadNutritionPlan();
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å
    loadNutritionData(currentDate);
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–∫–∞–Ω—ã
    loadRecentScans();
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–µ–¥–µ–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    loadWeeklyStats();
    
    // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
    setCalorieData(getCalorieData());
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ 13 –∏ 12 –º–∞—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    loadHistoricalData();
  }, []);
  
  // –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ –æ—Ç–∫–ª—é—á–∏–ª–∏ –ø–æ–ª–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É –∏—Å—Ç–æ—Ä–∏–∏ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∞ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
  useEffect(() => {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ –Ω–∞—á–∞–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–µ
    // –ò –±–æ–ª—å—à–µ –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ–º –Ω–∏–∫–∞–∫–∏—Ö —Ç–∞–π–º–µ—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    console.log('–ù–∞—á–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö');
    loadHistoricalData();
    
    // –ù–µ –∑–∞–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –ø–æ —Ç–∞–π–º–µ—Ä—É, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –ø—Ä–∏–≤–æ–¥–∏—Ç –∫ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö
  }, []);
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –Ω–∞ —ç–∫—Ä–∞–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞)
  useFocusEffect(
    useCallback(() => {
      console.log('–≠–∫—Ä–∞–Ω –ø–æ–ª—É—á–∏–ª —Ñ–æ–∫—É—Å, –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–∏—Ç–∞–Ω–∏—è...');
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è (–º–æ–∂–µ—Ç –æ–±–Ω–æ–≤–∏—Ç—å—Å—è –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞)
      loadNutritionPlan();
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ–∫—É—â–µ–π –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç—ã
      loadNutritionData(currentDate);
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–∫–∞–Ω—ã
      loadRecentScans();
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–µ–¥–µ–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      loadWeeklyStats();

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ—Ç–∏–≤–∏—Ä—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      loadDailyMotivationMessage();

      // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è
      if (dailyNutritionData && dailyNutritionData.caloriesConsumed > 0) {
        // –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å –∑–∞–ø–∏—Å—å –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
        const today = new Date();
        let status = CalorieStatus.EMPTY;
        const consumed = dailyNutritionData.caloriesConsumed;
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è
        if (consumed > dailyCalorieGoal * 1.05) {
          status = CalorieStatus.OVER;   // –ü–µ—Ä–µ–±–æ—Ä –∫–∞–ª–æ—Ä–∏–π (–∫—Ä–∞—Å–Ω—ã–π)
        } else if (consumed >= dailyCalorieGoal * 0.95 && consumed <= dailyCalorieGoal * 1.05) {
          status = CalorieStatus.NORMAL; // –í –ø—Ä–µ–¥–µ–ª–∞—Ö –Ω–æ—Ä–º—ã (–∂–µ–ª—Ç—ã–π)
        } else if (consumed > 0) {
          status = CalorieStatus.UNDER;  // –ù–µ–¥–æ–±–æ—Ä –∫–∞–ª–æ—Ä–∏–π (–∑–µ–ª–µ–Ω—ã–π) - —ç—Ç–æ —Ç–æ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä, –∫–æ—Ç–æ—Ä—ã–π –∏—Å—á–µ–∑–∞–ª
        }
        
        if (consumed > 0) {
          // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è
          const newTodayData = {
            date: today,
            consumed,
            goal: dailyCalorieGoal,
            status
          };
          
          // –°–Ω–∞—á–∞–ª–∞ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –Ω–∞–ø—Ä—è–º—É—é, —á—Ç–æ–±—ã –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–æ—è–≤–∏–ª—Å—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ
          setCalorieData(prevData => {
            // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
            const filteredData = prevData.filter(d => {
              const dDate = new Date(d.date);
              return !(dDate.getDate() === today.getDate() && 
                      dDate.getMonth() === today.getMonth() && 
                      dDate.getFullYear() === today.getFullYear());
            });
            
            console.log(`–ù–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–∞–ª–µ–Ω–¥–∞—Ä—è: –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–æ=${consumed}, —Å—Ç–∞—Ç—É—Å=${status}`);
            return [...filteredData, newTodayData];
          });
          
          // –ó–∞—Ç–µ–º –æ–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
          setHistoricalCalorieData(prevData => {
            const filteredData = prevData.filter(d => {
              const dDate = new Date(d.date);
              return !(dDate.getDate() === today.getDate() && 
                      dDate.getMonth() === today.getMonth() && 
                      dDate.getFullYear() === today.getFullYear());
            });
            
            return [...filteredData, newTodayData];
          });
        }
      }
      
      return () => {};
    }, [currentDate])
  );

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤–∏—Ç–∞–º–∏–Ω–æ–≤ –∏ –º–∏–Ω–µ—Ä–∞–ª–æ–≤ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–µ–¥–µ–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  useFocusEffect(
    useCallback(() => {
      if (weeklyStats) {
        loadWeeklyVitaminMinerals();
      }
    }, [weeklyStats])
  );
  
  // –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø–∏—Ç–∞–Ω–∏–∏ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É
  const loadNutritionData = async (date: Date) => {
    try {
      const dateString = formatDateToString(date);
      console.log(`–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ –ø–∏—Ç–∞–Ω–∏–∏ –∑–∞ ${dateString}...`);
      
      const nutritionData = await getDailyNutrition(dateString);
      setDailyNutritionData(nutritionData);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –º–∞–∫—Ä–æ–Ω—É—Ç—Ä–∏–µ–Ω—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      setMacronutrients([
        { name: t('dashboard.protein'), current: nutritionData?.protein || 0, goal: proteinGoal, color: '#FF8A80', colorDark: '#FF6B6B' },
        { name: t('dashboard.fat'), current: nutritionData?.fat || 0, goal: fatGoal, color: '#FFCF50', colorDark: '#FFD166' },
        { name: t('dashboard.carbs'), current: nutritionData?.carbs || 0, goal: carbGoal, color: '#80D8FF', colorDark: '#06D6A0' },
        { name: t('nutrition.hiddenSugar'), current: nutritionData?.sugar || 0, goal: maxSugar, color: '#FF3B30', colorDark: '#FF3B30' },
      ]);
      
      console.log(`–ó–∞–≥—Ä—É–∂–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ –ø–∏—Ç–∞–Ω–∏–∏: –∫–∞–ª–æ—Ä–∏–∏=${nutritionData?.caloriesConsumed || 0}, —Å–∞—Ö–∞—Ä=${nutritionData?.sugar || 0}`);
      
      // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ
      const isDateToday = isSameDay(date, new Date());
      const existingData = historicalCalorieData.find(d => 
        isSameDay(new Date(d.date), date)
      );
      
      // –î–ª—è —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è: –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª—è–µ–º –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏, –µ—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö
      if (isDateToday && (!nutritionData || nutritionData.caloriesConsumed <= 0)) {
        console.log(`–¢–µ–∫—É—â–∏–π –¥–µ–Ω—å ${formatDateToString(date)}: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö, —É–¥–∞–ª—è–µ–º –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏`);
        
        // –ï—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å - —É–¥–∞–ª—è–µ–º –µ—ë
        if (existingData) {
          setHistoricalCalorieData(prevData => 
            prevData.filter(d => !isSameDay(new Date(d.date), date))
          );
        }
      } 
      // –î–ª—è –¥–Ω–µ–π —Å –¥–∞–Ω–Ω—ã–º–∏: –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö –≤ –∏—Å—Ç–æ—Ä–∏—é
      else if (nutritionData && nutritionData.caloriesConsumed > 0) {
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è
        let status = CalorieStatus.EMPTY;
        const consumed = nutritionData.caloriesConsumed;
        
        if (consumed > dailyCalorieGoal * 1.05) {
          status = CalorieStatus.OVER;   // –ü–µ—Ä–µ–±–æ—Ä –∫–∞–ª–æ—Ä–∏–π (–∫—Ä–∞—Å–Ω—ã–π)
        } else if (consumed >= dailyCalorieGoal * 0.95 && consumed <= dailyCalorieGoal * 1.05) {
          status = CalorieStatus.NORMAL; // –í –ø—Ä–µ–¥–µ–ª–∞—Ö –Ω–æ—Ä–º—ã (–∂–µ–ª—Ç—ã–π)
        } else if (consumed > 0) {
          status = CalorieStatus.UNDER;  // –ù–µ–¥–æ–±–æ—Ä –∫–∞–ª–æ—Ä–∏–π (–∑–µ–ª–µ–Ω—ã–π)
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é –¥–∞–Ω–Ω—ã–µ –æ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–Ω—ã—Ö –∫–∞–ª–æ—Ä–∏—è—Ö
        if (!existingData || existingData.consumed !== consumed) {
          console.log(`–î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è ${formatDateToString(date)}: ${consumed} –∫–∫–∞–ª, —Å—Ç–∞—Ç—É—Å=${status}`);
          setHistoricalCalorieData(prevData => {
            // –£–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å, –µ—Å–ª–∏ –µ—Å—Ç—å
            const filteredData = prevData.filter(d => !isSameDay(new Date(d.date), date));
            return [...filteredData, {
              date: date,
              consumed: consumed,
              goal: dailyCalorieGoal,
              status: status
            }];
          });
        }
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–∏—Ç–∞–Ω–∏–∏:', error);
    }
  };
  
  // –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –æ –ø–∏—Ç–∞–Ω–∏–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é
  const loadHistoricalData = async () => {
    try {
      console.log('–ó–∞–ø—É—â–µ–Ω–∞ –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é...');
      const today = new Date();
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
      const todayData = historicalCalorieData.find(d => isSameDay(new Date(d.date), today));
      
      // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤ –¥–∞–Ω–Ω—ã—Ö, —á—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å –∏—Ö –≤—Å–µ —Å—Ä–∞–∑—É
      let newHistoricalData: DayCalorieData[] = [...historicalCalorieData];
      let dataChanged = false;
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
      const dates = [];
      for (let i = -7; i <= 0; i++) {
        const date = new Date(today);
        date.setDate(today.getDate() + i);
        dates.push(date);
      }
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å–µ—Ö –¥–∞—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
      const promises = dates.map(date => {
        const dateString = formatDateToString(date);
        return getDailyNutrition(dateString)
          .then(nutritionData => {
            if (nutritionData && nutritionData.caloriesConsumed > 0) {
              console.log(`–ó–∞–≥—Ä—É–∂–µ–Ω—ã –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –∑–∞ ${dateString}: –∫–∞–ª–æ—Ä–∏–∏=${nutritionData.caloriesConsumed}`);
              
              // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è
              let status = CalorieStatus.EMPTY;
              const consumed = nutritionData.caloriesConsumed;
              if (consumed > dailyCalorieGoal * 1.05) {
                status = CalorieStatus.OVER;
              } else if (consumed >= dailyCalorieGoal * 0.95 && consumed <= dailyCalorieGoal * 1.05) {
                status = CalorieStatus.NORMAL;
              } else if (consumed > 0) {
                status = CalorieStatus.UNDER;
              }
              
              // –î–æ–±–∞–≤–ª—è–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –Ω–∞—à–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–º –º–∞—Å—Å–∏–≤–µ
              const existingIndex = newHistoricalData.findIndex(d => isSameDay(new Date(d.date), date));
              if (existingIndex !== -1) {
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
                if (newHistoricalData[existingIndex].consumed !== consumed || 
                    newHistoricalData[existingIndex].status !== status) {
                  newHistoricalData[existingIndex] = {
                    date: date,
                    consumed: consumed,
                    goal: dailyCalorieGoal,
                    status: status
                  };
                  dataChanged = true;
                }
              } else {
                // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
                newHistoricalData.push({
                  date: date,
                  consumed: consumed,
                  goal: dailyCalorieGoal,
                  status: status
                });
                dataChanged = true;
              }
            } else if (isSameDay(date, today) && (!nutritionData || nutritionData.caloriesConsumed <= 0)) {
              // –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è –±–µ–∑ –¥–∞–Ω–Ω—ã—Ö
              const existingIndex = newHistoricalData.findIndex(d => isSameDay(new Date(d.date), date));
              if (existingIndex !== -1) {
                newHistoricalData.splice(existingIndex, 1);
                dataChanged = true;
              }
            }
            return null;
          })
          .catch(error => {
            console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞ ${dateString}:`, error);
            return null;
          });
      });
      
      // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
      await Promise.all(promises);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∏ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å
      if (dataChanged) {
        // –ï—Å–ª–∏ —É –Ω–∞—Å –±—ã–ª–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è, —É–±–µ–¥–∏–º—Å—è —á—Ç–æ –æ–Ω–∏ –Ω–µ –ø–æ—Ç–µ—Ä—è–ª–∏—Å—å
        if (todayData && todayData.consumed > 0) {
          const todayExists = newHistoricalData.some(d => isSameDay(new Date(d.date), today));
          if (!todayExists) {
            // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–µ–≥–æ–¥–Ω—è –ø—Ä–æ–ø–∞–ª–∏, –≤–µ—Ä–Ω–µ–º –∏—Ö –æ–±—Ä–∞—Ç–Ω–æ
            newHistoricalData.push(todayData);
            console.log('–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è:', todayData);
          }
        }
        
        console.log('–û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è, –Ω–∞–π–¥–µ–Ω–æ –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π:', newHistoricalData.length);
        setHistoricalCalorieData(newHistoricalData);
        
        // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è
        setCalorieData(getCalorieData());
      }
      
      console.log('–ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –∑–∞–ø–∏—Å–µ–π:', newHistoricalData.length);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö:', error);
    }
  };

  // –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
  const loadRecentScans = async () => {
    try {
      console.log('–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π...');
      const recentHistory = await getRecentScans(3);
      console.log('–ü–æ–ª—É—á–µ–Ω–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π:', recentHistory.length);
      
      if (recentHistory.length > 0) {
        console.log('–ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ:', recentHistory[0].name, '–î–∞—Ç–∞:', recentHistory[0].scanDate);
      }
      
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç ProductData –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ ProductCard
      const formattedScans: ProductData[] = recentHistory.map(item => ({
        id: item.id,
        name: item.name,
        calories: item.calories,
        macros: { 
          protein: item.protein, 
          fat: item.fat, 
          carbs: item.carbs 
        },
        timestamp: new Date(item.timestamp),
        imageUrl: item.image || 'https://images.unsplash.com/photo-1546069901-ba9599a7e63c?q=80&w=400',
        fullData: item.fullData // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
      }));
      
      setRecentScans(formattedScans);
      console.log('–û–±–Ω–æ–≤–ª–µ–Ω—ã –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–∫–∞–Ω—ã –Ω–∞ –≥–ª–∞–≤–Ω–æ–º —ç–∫—Ä–∞–Ω–µ');
      
      // –ü—Ä–æ–∞–∫—Ç–∏–≤–Ω–æ–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ —Ñ–æ–Ω–µ
      const imageUrls = formattedScans
        .map(scan => scan.imageUrl)
        .filter((url): url is string => url != null && !url.includes('unsplash.com')); // –ò—Å–∫–ª—é—á–∞–µ–º placeholder'—ã
      
      if (imageUrls.length > 0) {
        console.log(`üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ ${imageUrls.length} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ —Ñ–æ–Ω–µ...`);
        // –ù–µ –∂–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è, —á—Ç–æ–±—ã –Ω–µ –∑–∞–º–µ–¥–ª—è—Ç—å UI
        prefetchImages(imageUrls).catch(error => 
          console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–∞–∫—Ç–∏–≤–Ω–æ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–∏:', error)
        );
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π:', error);
    } finally {
      setRefreshing(false);
    }
  };
  
  // –î–æ–±–∞–≤–∏–º –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –¥–∞—Ç
  const isSameDay = (date1: Date, date2: Date): boolean => {
    return date1.getDate() === date2.getDate() && 
           date1.getMonth() === date2.getMonth() && 
           date1.getFullYear() === date2.getFullYear();
  };

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∫–∞–ª–æ—Ä–∏–π
  const determineCalorieStatus = (consumed: number, goal: number): CalorieStatus => {
    if (consumed <= 0) {
      return CalorieStatus.EMPTY;
    } else if (consumed > goal * 1.05) {
      return CalorieStatus.OVER;   // –ü–µ—Ä–µ–±–æ—Ä –∫–∞–ª–æ—Ä–∏–π (–∫—Ä–∞—Å–Ω—ã–π)
    } else if (consumed >= goal * 0.95 && consumed <= goal * 1.05) {
      return CalorieStatus.NORMAL; // –í –ø—Ä–µ–¥–µ–ª–∞—Ö –Ω–æ—Ä–º—ã (–∂–µ–ª—Ç—ã–π)
    } else {
      return CalorieStatus.UNDER;  // –ù–µ–¥–æ–±–æ—Ä –∫–∞–ª–æ—Ä–∏–π (–∑–µ–ª–µ–Ω—ã–π)
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –∫–∞–ª–æ—Ä–∏—è—Ö –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
  const getCalorieData = useCallback((): DayCalorieData[] => {
    console.log('** –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ getCalorieData **');
    const today = new Date();
    let data: DayCalorieData[] = [];
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω—ã–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
    // –ë–µ—Ä–µ–º –∫–æ–ø–∏—é –º–∞—Å—Å–∏–≤–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    data = [...historicalCalorieData].map(item => ({
      ...item,
      // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è
      status: determineCalorieStatus(item.consumed, item.goal)
    }));
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å –≤ –º–∞—Å—Å–∏–≤–µ
    const todayDataExists = data.some(item => isSameDay(new Date(item.date), today));
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–∏—Ç–∞–Ω–∏–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è –∏ –æ–Ω–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç —Å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–º–∏
    if (dailyNutritionData && dailyNutritionData.caloriesConsumed > 0 && !todayDataExists) {
      // –î–æ–±–∞–≤–ª—è–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º
      const consumed = dailyNutritionData.caloriesConsumed;
      const status = determineCalorieStatus(consumed, dailyCalorieGoal);
      
      data.push({
        date: today,
        consumed,
        goal: dailyCalorieGoal,
        status
      });
      
      console.log(`–î–æ–±–∞–≤–ª–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∑–∞ —Å–µ–≥–æ–¥–Ω—è: consumed=${consumed}, —Å—Ç–∞—Ç—É—Å=${status}`);
    } 
    // –ï—Å–ª–∏ –µ—Å—Ç—å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –∑–∞ —Å–µ–≥–æ–¥–Ω—è, –Ω–æ –µ—Å—Ç—å –∏ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    else if (dailyNutritionData && dailyNutritionData.caloriesConsumed > 0 && todayDataExists) {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
      data = data.map(item => {
        if (isSameDay(new Date(item.date), today)) {
          const consumed = dailyNutritionData.caloriesConsumed;
          return {
            ...item,
            consumed,
            status: determineCalorieStatus(consumed, item.goal)
          };
        }
        return item;
      });
      
      console.log(`–û–±–Ω–æ–≤–ª–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∑–∞ —Å–µ–≥–æ–¥–Ω—è: consumed=${dailyNutritionData.caloriesConsumed}`);
    }
    
    return data;
  }, [dailyNutritionData, dailyCalorieGoal, historicalCalorieData]);

  // –î–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è
  const [calorieData, setCalorieData] = useState<DayCalorieData[]>([]);
  
  // –í–∞–∂–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç: –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
  useEffect(() => {
    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    console.log(`–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–∞–ª–µ–Ω–¥–∞—Ä—è: –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö: ${historicalCalorieData.length}`);
    const newCalorieData = getCalorieData();
    setCalorieData(newCalorieData);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ AsyncStorage –¥–ª—è –ø–æ—Å—Ç–æ—è–Ω—Å—Ç–≤–∞ –º–µ–∂–¥—É –∑–∞–ø—É—Å–∫–∞–º–∏
    const saveData = async () => {
      try {
        await AsyncStorage.setItem('historicalCalorieData', JSON.stringify(historicalCalorieData));
        console.log('–î–∞–Ω–Ω—ã–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ');
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:', error);
      }
    };
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —á—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å
    if (historicalCalorieData.length > 0) {
      saveData();
    }
    if (dailyNutritionData) {
      const today = new Date();
      const existingData = historicalCalorieData.find(d => 
        isSameDay(new Date(d.date), today)
      );
      
      if (!existingData || existingData.status === CalorieStatus.EMPTY) {
        // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è
        let status = CalorieStatus.EMPTY;
        const consumed = dailyNutritionData.caloriesConsumed;
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        if (consumed > dailyCalorieGoal * 1.05) {
          status = CalorieStatus.OVER;   // –ü–µ—Ä–µ–±–æ—Ä –∫–∞–ª–æ—Ä–∏–π (–∫—Ä–∞—Å–Ω—ã–π)
        } else if (consumed >= dailyCalorieGoal * 0.95 && consumed <= dailyCalorieGoal * 1.05) {
          status = CalorieStatus.NORMAL; // –í –ø—Ä–µ–¥–µ–ª–∞—Ö –Ω–æ—Ä–º—ã (–∂–µ–ª—Ç—ã–π)
        } else if (consumed > 0) {
          status = CalorieStatus.UNDER;  // –ù–µ–¥–æ–±–æ—Ä –∫–∞–ª–æ—Ä–∏–π (–∑–µ–ª–µ–Ω—ã–π)
        }
        
        const newData = {
          date: today,
          consumed,
          goal: dailyCalorieGoal,
          status
        };
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ —Å—Ç–∞—Ç—É—Å –Ω–µ EMPTY
        if (status !== CalorieStatus.EMPTY) {
          setHistoricalCalorieData(prevData => {
            // –£–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å, –µ—Å–ª–∏ –µ—Å—Ç—å
            const filteredData = prevData.filter(d => !isSameDay(new Date(d.date), today));
            return [...filteredData, newData];
          });
        }
      }
    }
  }, [dailyNutritionData, dailyCalorieGoal]);

  // –û–±–Ω–æ–≤–ª—è–µ–º –º–∞–∫—Ä–æ–Ω—É—Ç—Ä–∏–µ–Ω—Ç—ã –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è
  useEffect(() => {
    if (nutritionPlan) {
      console.log('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –º–∞–∫—Ä–æ–Ω—É—Ç—Ä–∏–µ–Ω—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è:', {
        protein: proteinGoal,
        fat: fatGoal,
        carbs: carbGoal
      });
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –º–∞–∫—Ä–æ–Ω—É—Ç—Ä–∏–µ–Ω—Ç—ã —Å –Ω–æ–≤—ã–º–∏ —Ü–µ–ª–µ–≤—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
      setMacronutrients(prevMacros => [
        { ...prevMacros[0], goal: proteinGoal },
        { ...prevMacros[1], goal: fatGoal },
        { ...prevMacros[2], goal: carbGoal },
      ]);
    }
  }, [nutritionPlan, proteinGoal, fatGoal, carbGoal]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è –∏–∑ AsyncStorage
  const loadNutritionPlan = async () => {
    try {
      console.log('üîç –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è...');
      
      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–µ —Ü–µ–ª–∏
      const customGoals = await AsyncStorage.getItem('customNutritionGoals');
      if (customGoals) {
        const goals = JSON.parse(customGoals);
        console.log('üéØ –ù–∞–π–¥–µ–Ω—ã –∫–∞—Å—Ç–æ–º–Ω—ã–µ —Ü–µ–ª–∏:', goals);
        
        // –°–æ–∑–¥–∞–µ–º –ø–ª–∞–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —Ü–µ–ª–µ–π
        const customPlan: NutritionCalculationResult = {
          targetCalories: goals.calories,
          maxHiddenSugar: goals.sugar,
          dailyMacros: {
            protein: goals.protein,
            fat: goals.fat,
            carbs: goals.carbs,
            percentages: { protein: 25, fat: 30, carbs: 45 }
          },
          bmr: goals.calories * 0.8, // –ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
          tdee: goals.calories,
          weeklyTargets: {
            calories: goals.calories * 7,
            protein: goals.protein * 7,
            fat: goals.fat * 7,
            carbs: goals.carbs * 7,
            hiddenSugar: goals.sugar * 7
          },
          expectedWeightChange: -0.5,
          appliedAdjustments: {
            diet: 1.0,
            stress: 1.0,
            mealFrequency: 1.0,
            foodPreferences: 1.0,
            total: 1.0
          }
        };
        
        setNutritionPlan(customPlan);
        console.log('‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∫–∞—Å—Ç–æ–º–Ω—ã–µ —Ü–µ–ª–∏ –ø–∏—Ç–∞–Ω–∏—è');
        return;
      }
      
      const savedPlan = await AsyncStorage.getItem('nutritionPlan');
      console.log('üì¶ –°—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ AsyncStorage:', savedPlan);
      
      if (savedPlan) {
        const plan = JSON.parse(savedPlan) as NutritionCalculationResult;
        console.log('‚úÖ –ü–ª–∞–Ω —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω:', plan);
        setNutritionPlan(plan);
        console.log('üìä –ó–∞–≥—Ä—É–∂–µ–Ω –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è:', {
          calories: plan.targetCalories,
          protein: plan.dailyMacros.protein,
          fat: plan.dailyMacros.fat,
          carbs: plan.dailyMacros.carbs,
          sugar: plan.maxHiddenSugar
        });
      } else {
        console.log('‚ö†Ô∏è –ü–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ AsyncStorage');
        console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—Ä—É–≥–∏–µ –∫–ª—é—á–∏ –≤ AsyncStorage...');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥—Ä—É–≥–∏–µ –¥–∞–Ω–Ω—ã–µ
        const userProfile = await AsyncStorage.getItem('userProfile');
        const hasCompleted = await AsyncStorage.getItem('hasCompletedOnboarding');
        
        console.log('üë§ userProfile –≤ AsyncStorage:', userProfile ? '–ï–°–¢–¨' : '–ù–ï–¢');
        console.log('‚úÖ hasCompletedOnboarding:', hasCompleted ? '–ï–°–¢–¨' : '–ù–ï–¢');
        
        if (userProfile && !savedPlan) {
          console.log('üß™ –¢–ï–°–¢: –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø–ª–∞–Ω –∏–∑ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è...');
          try {
            const profile = JSON.parse(userProfile);
            console.log('üë§ –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å:', profile);
            
            // –ü—Ä–æ–±—É–µ–º —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø–ª–∞–Ω –ø—Ä—è–º–æ –∑–¥–µ—Å—å –¥–ª—è —Ç–µ—Å—Ç–∞
            if (profile.weight && profile.height && profile.birthday && profile.gender) {
              const { calculateCompleteNutrition } = await import('../../utils/nutritionCalculator');
              const testPlan = calculateCompleteNutrition({
                ...profile,
                currentWeight: profile.weight
              });
              console.log('üßÆ –¢–ï–°–¢: –†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–π –ø–ª–∞–Ω:', testPlan);
              
              if (testPlan) {
                setNutritionPlan(testPlan);
                console.log('üîÑ –¢–ï–°–¢: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–π –ø–ª–∞–Ω –≤–º–µ—Å—Ç–æ –ø—É—Å—Ç–æ–≥–æ');
              }
            }
          } catch (testError) {
            console.error('‚ùå –¢–ï–°–¢: –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–∞—Å—á—ë—Ç–µ:', testError);
          }
        } else if (!userProfile && !hasCompleted) {
          // –°–æ–∑–¥–∞—ë–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞–Ω –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
          console.log('üéØ –°–û–ó–î–ê–Å–ú –¢–ï–°–¢–û–í–´–ô –ü–õ–ê–ù –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏...');
          const testPlan: NutritionCalculationResult = {
            targetCalories: 1918,
            dailyMacros: {
              protein: 119,
              fat: 64,
              carbs: 217,
              percentages: { protein: 25, fat: 30, carbs: 45 }
            },
            maxHiddenSugar: 48,
            bmr: 1598,
            tdee: 1918,
            weeklyTargets: {
              calories: 13426,
              protein: 833,
              fat: 448,
              carbs: 1519,
              hiddenSugar: 336
            },
            expectedWeightChange: -0.5,
            appliedAdjustments: {
              diet: 1.0,
              stress: 0.95,
              mealFrequency: 1.0,
              foodPreferences: 1.0,
              total: 0.95
            }
          };
          
          setNutritionPlan(testPlan);
          console.log('üéØ –¢–ï–°–¢–û–í–´–ô –ü–õ–ê–ù —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:', testPlan);
        }
        
        console.log('‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é');
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è:', error);
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–µ–¥–µ–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  const loadWeeklyStats = async () => {
    try {
      const today = new Date();
      const weekDates = [];
      
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
      for (let i = 6; i >= 0; i--) {
        const date = new Date(today);
        date.setDate(today.getDate() - i);
        weekDates.push(date);
      }
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
      const weeklyData = await Promise.all(
        weekDates.map(async (date) => {
          const dateString = formatDateToString(date);
          try {
            const nutritionData = await getDailyNutrition(dateString);
            return {
              date,
              calories: nutritionData?.caloriesConsumed || 0,
              protein: nutritionData?.protein || 0,
              fat: nutritionData?.fat || 0,
              carbs: nutritionData?.carbs || 0,
              sugar: nutritionData?.sugar || 0,
            };
          } catch (error) {
            console.error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∑–∞ ${dateString}:`, error);
            return {
              date,
              calories: 0,
              protein: 0,
              fat: 0,
              carbs: 0,
              sugar: 0,
            };
          }
        })
      );
      
      // –í—ã—á–∏—Å–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      const daysWithData = weeklyData.filter(day => day.calories > 0);
      const totalDays = daysWithData.length;
      
      if (totalDays === 0) {
        setWeeklyStats(null);
        return;
      }
      
      // –°—á–∏—Ç–∞–µ–º –æ–±—â–µ–µ –Ω–µ–¥–µ–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (–Ω–µ —Å—Ä–µ–¥–Ω–µ–µ)
      const totalCalories = daysWithData.reduce((sum, day) => sum + day.calories, 0);
      const totalProtein = Math.round(daysWithData.reduce((sum, day) => sum + day.protein, 0));
      const totalFat = Math.round(daysWithData.reduce((sum, day) => sum + day.fat, 0));
      const totalCarbs = Math.round(daysWithData.reduce((sum, day) => sum + day.carbs, 0));
      const totalSugar = Math.round(daysWithData.reduce((sum, day) => sum + day.sugar, 0));
      
      // –°—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–æ–≤ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤
      const averageCalories = Math.round(totalCalories / totalDays);
      const averageProtein = Math.round(totalProtein / totalDays);
      const averageFat = Math.round(totalFat / totalDays);
      const averageCarbs = Math.round(totalCarbs / totalDays);
      const averageSugar = Math.round(totalSugar / totalDays);
      
      // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–Ω–∏ –≤ —Ü–µ–ª–∏ (–≤ –ø—Ä–µ–¥–µ–ª–∞—Ö ¬±5% –æ—Ç —Ü–µ–ª–µ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π)
      const daysInGoal = daysWithData.filter(day => {
        const calorieGoalMet = day.calories >= dailyCalorieGoal * 0.95 && day.calories <= dailyCalorieGoal * 1.05;
        return calorieGoalMet;
      }).length;
      
      // –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç—ã –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–µ–π
      const proteinPercentage = Math.round((averageProtein / proteinGoal) * 100);
      const fatPercentage = Math.round((averageFat / fatGoal) * 100);
      const carbsPercentage = Math.round((averageCarbs / carbGoal) * 100);
      const sugarPercentage = Math.round((averageSugar / maxSugar) * 100);
      
      // –ü—Ä–æ—Å—Ç–æ–π —Ä–∞—Å—á–µ—Ç —Ç—Ä–µ–Ω–¥–∞ (–º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å)
      const caloriesTrend = averageCalories > dailyCalorieGoal ? 
        Math.round(((averageCalories - dailyCalorieGoal) / dailyCalorieGoal) * 100) : 
        Math.round(((averageCalories - dailyCalorieGoal) / dailyCalorieGoal) * 100);
      
      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –º–∏–Ω–∏-–≥—Ä–∞—Ñ–∏–∫–∞
      const dayNames = ['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–í—Å'];
      const dailyData = weeklyData.map((dayData, index) => ({
        day: dayNames[index],
        calories: dayData.calories,
        hasData: dayData.calories > 0,
      }));

      const stats: WeeklyStats = {
        averageCalories,
        averageProtein,
        averageFat,
        averageCarbs,
        averageSugar,
        totalCalories,
        totalProtein,
        totalFat,
        totalCarbs,
        totalSugar,
        daysInGoal,
        totalDays,
        caloriesTrend,
        proteinPercentage,
        fatPercentage,
        carbsPercentage,
        sugarPercentage,
        dailyData,
      };
      
      setWeeklyStats(stats);
      console.log('–ó–∞–≥—Ä—É–∂–µ–Ω–∞ –Ω–µ–¥–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:', stats);
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–µ–¥–µ–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
      setWeeklyStats(null);
    }
  };

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤–∏—Ç–∞–º–∏–Ω–æ–≤ –∏ –º–∏–Ω–µ—Ä–∞–ª–æ–≤
  const loadWeeklyVitaminMinerals = async (aiData?: any) => {
    try {
      console.log('üìä –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤–∏—Ç–∞–º–∏–Ω–æ–≤ –∏ –º–∏–Ω–µ—Ä–∞–ª–æ–≤...');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –æ—Ç AI (–ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä—è–º—É—é –∏–ª–∏ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è)
      const vitaminData = aiData?.vitaminMineralDashboard || aiRecommendations?.vitaminMineralDashboard;
      
      console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤–∏—Ç–∞–º–∏–Ω–æ–≤:', {
        hasAiData: !!aiData,
        hasVitaminData: !!vitaminData,
        hasAiRecommendations: !!aiRecommendations,
        vitaminDataKeys: vitaminData ? Object.keys(vitaminData) : '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö'
      });
      
      if (vitaminData) {
        console.log('ü§ñ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç AI –¥–ª—è –≤–∏—Ç–∞–º–∏–Ω–Ω–æ–≥–æ –¥–∞—à–±–æ—Ä–¥–∞');
        console.log('üìä –î–∞–Ω–Ω—ã–µ –≤–∏—Ç–∞–º–∏–Ω–æ–≤ –æ—Ç AI:', {
          vitaminsCount: vitaminData.vitamins?.length || 0,
          mineralsCount: vitaminData.minerals?.length || 0,
          overallVitaminScore: vitaminData.overallVitaminScore,
          overallMineralScore: vitaminData.overallMineralScore
        });
        
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç AI –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        const vitamins: VitaminMineralData[] = vitaminData.vitamins.map((vitamin: any) => ({
          name: vitamin.name,
          shortName: vitamin.shortName,
          current: vitamin.percentage,
          goal: 100, // –¶–µ–ª—å –≤—Å–µ–≥–¥–∞ 100%
          color: '#4CAF50', // –ï–¥–∏–Ω—ã–π –∑–µ–ª–µ–Ω—ã–π —Ü–≤–µ—Ç –¥–ª—è –≤—Å–µ—Ö –≤–∏—Ç–∞–º–∏–Ω–æ–≤
          currentWeeklyIntake: vitamin.currentWeeklyIntake,
          weeklyGoal: vitamin.weeklyGoal,
          percentage: vitamin.percentage,
          status: vitamin.status
        }));

        const minerals: VitaminMineralData[] = vitaminData.minerals.map((mineral: any) => ({
          name: mineral.name,
          shortName: mineral.shortName,
          current: mineral.percentage,
          goal: 100, // –¶–µ–ª—å –≤—Å–µ–≥–¥–∞ 100%
          color: '#607D8B', // –ï–¥–∏–Ω—ã–π —Å—Ç–∞–ª—å–Ω–æ–π —Ü–≤–µ—Ç –¥–ª—è –≤—Å–µ—Ö –º–∏–Ω–µ—Ä–∞–ª–æ–≤
          currentWeeklyIntake: mineral.currentWeeklyIntake,
          weeklyGoal: mineral.weeklyGoal,
          percentage: mineral.percentage,
          status: mineral.status
        }));

        const vitaminMineralData: WeeklyVitaminMinerals = {
          vitamins,
          minerals,
          vitaminScore: vitaminData.overallVitaminScore,
          mineralScore: vitaminData.overallMineralScore,
          deficiencies: vitaminData.deficiencyList || [],
          recommendations: vitaminData.recommendations || [],
          overallVitaminScore: vitaminData.overallVitaminScore,
          overallMineralScore: vitaminData.overallMineralScore,
          deficiencyList: vitaminData.deficiencyList
        };

        setWeeklyVitaminMinerals(vitaminMineralData);
        console.log('‚úÖ –†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–∏—Ç–∞–º–∏–Ω–æ–≤ –∏ –º–∏–Ω–µ—Ä–∞–ª–æ–≤ –æ—Ç AI –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', vitaminMineralData);
        return;
      }

      // –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ—Ç AI - —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º null (—Å–æ—Å—Ç–æ—è–Ω–∏–µ "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
      console.log('üìä –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ—Ç AI - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"');
      setWeeklyVitaminMinerals(null);
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –≤–∏—Ç–∞–º–∏–Ω–æ–≤ –∏ –º–∏–Ω–µ—Ä–∞–ª–æ–≤:', error);
      setWeeklyVitaminMinerals(null);
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ—Ç–∏–≤–∏—Ä—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
  const loadDailyMotivationMessage = async () => {
    try {
      console.log('üìù –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ—Ç–∏–≤–∏—Ä—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è...');
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º import'–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
      const yesterdayCalories = await getYesterdayCalories();
      const isFirstTime = await isFirstTimeUser();
      
      console.log('üìä –î–∞–Ω–Ω—ã–µ –¥–ª—è –º–æ—Ç–∏–≤–∏—Ä—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:', {
        isFirstTime,
        yesterdayCalories,
        calorieGoal: dailyCalorieGoal
      });
      
      const message = await getDailyMotivationMessage(isFirstTime, yesterdayCalories, dailyCalorieGoal, t);
      console.log('‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –º–æ—Ç–∏–≤–∏—Ä—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:', message);
      
      setDailyMotivationMessage(message);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ—Ç–∏–≤–∏—Ä—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
      setDailyMotivationMessage(t('dashboard.motivationMessages.firstTime') || '–û—Ç–ª–∏—á–Ω—ã–π –¥–µ–Ω—å –¥–ª—è –∑–¥–æ—Ä–æ–≤–æ–≥–æ –ø–∏—Ç–∞–Ω–∏—è! –î–∞–≤–∞–π—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –∏ –¥–æ—Å—Ç–∏–≥–∞—Ç—å —Ü–µ–ª–µ–π! üéØ');
    }
  };

  return (
    <SafeAreaView style={[styles.safeArea, isDark && styles.darkSafeArea]}>
      <ScrollView 
        style={[styles.scrollViewContainer, isDark && styles.darkContainer]}
        contentContainerStyle={styles.scrollContentContainer}
        showsVerticalScrollIndicator={false}
        refreshControl={
          <RefreshControl
            refreshing={refreshing}
            onRefresh={onRefresh}
            colors={['#0D6EFD']}
            tintColor={isDark ? '#FFFFFF' : '#0D6EFD'}
          />
        }
      >
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –∏–∫–æ–Ω–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ç–µ–ø–µ—Ä—å –≤ —Å–∞–º–æ–º –≤–µ—Ä—Ö—É */}
        <View style={styles.header}>
          <Text style={[styles.title, isDark && styles.darkText]}>{t('dashboard.title')}</Text>
          <Link href="/settings" asChild> 
            <TouchableOpacity>
              <Ionicons name="settings-outline" size={24} color={isDark ? "#FFFFFF" : "#000000"} />
            </TouchableOpacity>
          </Link>
        </View>
        
        {/* –ö–∞–ª–µ–Ω–¥–∞—Ä—å —Å –≤—ã–±–æ—Ä–æ–º –¥–∞—Ç - —Ç–µ–ø–µ—Ä—å –Ω–∏–∂–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ */}
        <CalorieAwareDatePicker
          calorieData={calorieData}
          onDateSelected={handleDateChange}
          dailyCalorieGoal={dailyCalorieGoal}
        />

        {/* –ö–∞—Ä—Ç–æ—á–∫–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–∞–ª–æ—Ä–∏—è—Ö */}
        <TouchableOpacity 
          onPress={navigateToHistoryDashboard}
          activeOpacity={0.7}
        >
          <View style={[
            styles.calorieCard, 
            isDark && styles.darkCard, 
            isDark && styles.darkCardShadow
          ]}>
            <View style={styles.calorieStatusHeader}>
              <Text style={[styles.calorieSummaryText, isDark && styles.darkText]}>
                {t('nutrition.goal')}: {consumedCalories}/{dailyCalorieGoal} {t('nutrition.kcal')} ({Math.round(circularProgressPercentage) || 0}%)
              </Text>
            </View>
            
            <View style={styles.summaryContainer}>
              <View style={styles.circularProgressContainer}>
                <CircularProgress
                  size={135} /* –£–≤–µ–ª–∏—á–∏–ª–∏ —Ä–∞–∑–º–µ—Ä —Å 110 –¥–æ 135 */
                  strokeWidth={12} /* –£–≤–µ–ª–∏—á–∏–ª–∏ —Ç–æ–ª—â–∏–Ω—É –∫—Ä—É–≥–∞ */
                  progressPercentage={circularProgressPercentage}
                  caloriesLeft={caloriesLeft}
                  burnedCalories={burnedCalories}
                  progressColorLight={isDark? '#06D6A0' : '#4CAF50'}
                  progressColorDark={isDark? '#06D6A0' : '#4CAF50'}
                />
              </View>

              <View style={styles.macronutrientsContainer}>
                {macronutrients.map((macro) => {
                  const progress = (macro.current / macro.goal) * 100;
                  const macroBarColor = isDark ? macro.colorDark : macro.color;
                  return (
                    <View key={macro.name} style={styles.macroItem}>
                      <View style={styles.macroHeader}>
                        <Text style={[styles.macroName, isDark && styles.darkText]}>{macro.name}</Text>
                        <Text style={[styles.macroValues, isDark && styles.darkTextSecondary]}>
                          {macro.current}/{macro.goal}–≥
                        </Text>
                      </View>
                      <View style={[styles.linearProgressBar, isDark && styles.darkLinearProgressBar]}>
                        <View 
                          style={[
                            styles.linearProgressFill, 
                            { 
                              width: `${Math.min(progress, 100)}%`,
                              backgroundColor: macroBarColor 
                            }
                          ]} 
                        />
                      </View>
                    </View>
                  );
                })}
              </View>
            </View>
            
            {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å–∫—Ä—ã—Ç–æ–≥–æ —Å–∞—Ö–∞—Ä–∞ –≤–Ω—É—Ç—Ä–∏ –∫–∞—Ä—Ç–æ—á–∫–∏ */}
            <View style={styles.activityContainer}>
              <View style={styles.sugarBarContainer}>
                <Text style={[styles.sugarTitle, isDark && styles.darkText]}>
                  {t('nutrition.hiddenSugar')}
                </Text>
                <Text style={[styles.sugarValues, isDark && styles.darkText]}>
                  {currentSugar}/{maxSugar}–≥
                </Text>
              </View>
              <View style={styles.sugarIndicatorContainer}>
                <View style={styles.sugarBar}>
                  <View 
                    style={[styles.sugarBarFill, { width: `${Math.min((currentSugar / maxSugar) * 100, 100)}%` }]} 
                  />
                </View>
                {currentSugar >= maxSugar && (
                  <View style={styles.sugarIcon}>
                    <Ionicons name="checkmark-circle" size={16} color="#FFFFFF" />
                  </View>
                )}
              </View>
            </View>
          </View>
        </TouchableOpacity>
        
        <View style={styles.sectionHeader}>
          <Text style={[styles.sectionHeaderTitle, isDark && styles.darkText]}>{t('dashboard.recentScans')}</Text>
          <Link href="/history" asChild>
            <TouchableOpacity>
              <Text style={[styles.viewAllText, isDark && styles.darkTextSecondary]}>{t('common.viewAll')}</Text>
            </TouchableOpacity>
          </Link>
        </View>
        
        {recentScans.length > 0 ? (
          <View style={styles.productCardsContainer}>
            {recentScans.map(product => (
              <ProductCard 
                key={product.id} 
                product={product} 
                onDelete={loadRecentScans} // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
              />
            ))}
            <Link href="/scan" asChild>
              <TouchableOpacity style={[styles.scanButtonSmall, {alignSelf: 'center', marginTop: 8}]}>
                <Text style={styles.scanButtonText}>{t('common.scanMore')}</Text>
              </TouchableOpacity>
            </Link>
          </View>
        ) : (
          <View style={styles.emptyStateContainer}>
            <Ionicons name="camera-outline" size={48} color={isDark ? "#666" : "#CCC"} />
            <Text style={[styles.emptyStateText, isDark && styles.darkTextSecondary]}>
              {t('dashboard.noScannedProducts')}
            </Text>
            <Link href="/scan" asChild> 
              <TouchableOpacity style={styles.scanButton}>
                <Text style={styles.scanButtonText}>{t('common.scanProduct')}</Text>
              </TouchableOpacity>
            </Link>
          </View>
        )}
      </ScrollView>
    </SafeAreaView>
  );
} 