import { Ionicons } from '@expo/vector-icons';
import { DarkTheme, DefaultTheme, ThemeProvider } from '@react-navigation/native';
import { useFonts } from 'expo-font';
import { SplashScreen, Stack, Tabs } from 'expo-router';
import { useEffect, useState } from 'react';
import { useColorScheme } from 'react-native';
import 'react-native-reanimated';

// u0418u043cu043fu043eu0440u0442 Firebase u0444u0443u043du043au0446u0438u0439// –ò–º–ø–æ—Ä—Ç Firebase —Ñ—É–Ω–∫—Ü–∏–π
import { initializeAnalytics, setupRemoteConfig } from './firebase';
// –ò–º–ø–æ—Ä—Ç —Å–µ—Ä–≤–∏—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ ID
import { initializePushNotifications } from '../services/pushNotifications';
import { getUserId } from '../services/userService';

// Prevent the splash screen from auto-hiding
SplashScreen.preventAutoHideAsync();

export default function RootLayout() {
  const colorScheme = useColorScheme();
  const [showOnboarding, setShowOnboarding] = useState(true);

  // In a real app, we would check if the user has completed onboarding
  // const [showOnboarding, setShowOnboarding] = useState(false);
  // useEffect(() => {
  //   const checkOnboarding = async () => {
  //     try {
  //       const hasCompletedOnboarding = await AsyncStorage.getItem('hasCompletedOnboarding');
  //       setShowOnboarding(hasCompletedOnboarding !== 'true');
  //     } catch (error) {
  //       console.error('Error checking onboarding status:', error);
  //       setShowOnboarding(true);
  //     }
  //   };
  //   checkOnboarding();
  // }, []);

  // Load fonts
  const [loaded, error] = useFonts({
    SpaceMono: require('../assets/fonts/SpaceMono-Regular.ttf'),
  });

  // Expo Router uses Error Boundaries to catch errors in the navigation tree.
  useEffect(() => {
    if (error) throw error;
  }, [error]);

  useEffect(() => {
    if (loaded) {
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Firebase –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
      console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Firebase —Å–µ—Ä–≤–∏—Å–æ–≤...');
      
      // –û–±–µ—Ä–Ω–µ–º –≤—Å–µ –≤—ã–∑–æ–≤—ã Firebase –≤ try-catch, —á—Ç–æ–±—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –∫—Ä–∞—à–Ω—É–ª–æ—Å—å
      try {
        // –°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º RemoteConfig —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
        setupRemoteConfig()
          .then(() => console.log('RemoteConfig —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'))
          .catch(err => console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ RemoteConfig:', err));

        // –ó–∞—Ç–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º analytics
        initializeAnalytics()
          .then(() => console.log('Analytics —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'))
          .catch(err => console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ Analytics:', err));

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ)
        getUserId()
          .then((userId: string) => console.log('ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω:', userId))
          .catch((err: any) => console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', err));
      } catch (error) {
        // –ì–ª–∞–≤–Ω–æ–µ - –Ω–µ –∫—Ä–∞—à–Ω—É—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–∞–∂–µ –µ—Å–ª–∏ Firebase –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Firebase —Å–µ—Ä–≤–∏—Å–æ–≤:', error);
      }
      
      // –í –ª—é–±–æ–º —Å–ª—É—á–∞–µ —Å–∫—Ä—ã–≤–∞–µ–º SplashScreen
      SplashScreen.hideAsync();
    }
  }, [loaded]);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  useEffect(() => {
    const initializeApp = async () => {
      try {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const userId = await getUserId();
        console.log('üÜî ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userId);

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        const pushInitialized = await initializePushNotifications();
        if (pushInitialized) {
          console.log('üîî Push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
        } else {
          console.log('‚ö†Ô∏è Push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã (—Å–∏–º—É–ª—è—Ç–æ—Ä –∏–ª–∏ –æ—Ç–∫–∞–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)');
        }
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:', error);
      }
    };

    initializeApp();
  }, []);

  // If the fonts haven't loaded yet, don't show anything
  if (!loaded) {
    return null;
  }
  
  // Show onboarding for first-time users
  if (showOnboarding) {
    return (
      <ThemeProvider value={colorScheme === 'dark' ? DarkTheme : DefaultTheme}>
        <Stack screenOptions={{ headerShown: false }}>
          <Stack.Screen name="onboarding/index" />
        </Stack>
      </ThemeProvider>
    );
  }

  // Main app navigation
  return (
    <ThemeProvider value={colorScheme === 'dark' ? DarkTheme : DefaultTheme}>
      <Tabs
        screenOptions={{
          tabBarActiveTintColor: colorScheme === 'dark' ? '#FFFFFF' : '#007AFF',
          tabBarInactiveTintColor: colorScheme === 'dark' ? '#8E8E93' : '#8E8E93',
          tabBarStyle: {
            backgroundColor: colorScheme === 'dark' ? '#1C1C1E' : '#FFFFFF',
          },
          headerStyle: {
            backgroundColor: colorScheme === 'dark' ? '#1C1C1E' : '#FFFFFF',
          },
          headerTintColor: colorScheme === 'dark' ? '#FFFFFF' : '#000000',
        }}
      >
        <Tabs.Screen
          name="index"
          options={{
            title: 'Dashboard',
            tabBarIcon: ({ color, size }) => (
              <Ionicons name="home-outline" size={size} color={color} />
            ),
          }}
        />
        <Tabs.Screen
          name="diets/index"
          options={{
            title: 'Diets',
            tabBarIcon: ({ color, size }) => (
              <Ionicons name="nutrition-outline" size={size} color={color} />
            ),
          }}
        />
        <Tabs.Screen
          name="scan/index"
          options={{
            title: 'Scan',
            tabBarIcon: ({ color, size }) => (
              <Ionicons name="scan-outline" size={size} color={color} />
            ),
          }}
        />
        <Tabs.Screen
          name="history/index"
          options={{
            title: 'History',
            tabBarIcon: ({ color, size }) => (
              <Ionicons name="time-outline" size={size} color={color} />
            ),
          }}
        />
        <Tabs.Screen
          name="allergens/index"
          options={{
            title: 'Allergens',
            tabBarIcon: ({ color, size }) => (
              <Ionicons name="alert-circle-outline" size={size} color={color} />
            ),
          }}
        />
      </Tabs>
    </ThemeProvider>
  );
}
