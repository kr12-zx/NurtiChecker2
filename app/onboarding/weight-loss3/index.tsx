import AsyncStorage from '@react-native-async-storage/async-storage';
import { router } from 'expo-router';
import { StatusBar } from 'expo-status-bar';
import React, { useRef, useState } from 'react';
import {
    Animated,
    Dimensions,
    useColorScheme,
    View
} from 'react-native';
import { SafeAreaView } from 'react-native-safe-area-context';
import { calculateCompleteNutrition, NutritionCalculationResult } from '../../../utils/nutritionCalculator';
import { ActivityLevel, Challenge, DietPreference, Gender, MealFrequency, PrimaryGoal, UnitSettings, UserProfile } from '../../types/onboarding';
import { getUserEmailId, sendCompletionWebhook, sendPaywallWebhook } from '../../utils/onboardingApi';
import { useContainerStyles, usePalette } from './unifiedStyles';

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ —ç–∫—Ä–∞–Ω—ã –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞
import ActivityLevelScreen from './ActivityLevelScreen';
import AdaptabilityScreen from './AdaptabilityScreen';
import BirthdayScreen from './BirthdayScreen';
import CalorieBudgetConfirmScreen from './CalorieBudgetConfirmScreen';
import CalorieBudgetInfoScreen from './CalorieBudgetInfoScreen';
import CalorieBudgetIntroScreen from './CalorieBudgetIntroScreen'; // –ù–æ–≤—ã–π —ç–∫—Ä–∞–Ω
import CalorieCountingScreen from './CalorieCountingScreen';
import CalorieScheduleScreen from './CalorieScheduleScreen';
import ChallengesScreen from './ChallengesScreen';
import ChallengesViewScreen from './ChallengesViewScreen';
import ConfidenceLevelScreen from './ConfidenceLevelScreen';
import DecisionMakingScreen from './DecisionMakingScreen';
import DietPreferenceScreen from './DietPreferenceScreen';
import DifficultSituationsScreen from './DifficultSituationsScreen';
import EatingHabitsAssessmentScreen from './EatingHabitsAssessmentScreen'; // –ù–æ–≤—ã–π —ç–∫—Ä–∞–Ω
import ExerciseBenefitsScreen from './ExerciseBenefitsScreen';
import ExerciseIntentScreen from './ExerciseIntentScreen';
import FixedCalorieBudgetConfirmScreen from './FixedCalorieBudgetConfirmScreen'; // –ù–æ–≤—ã–π —ç–∫—Ä–∞–Ω
import FoodPreferencesScreen from './FoodPreferencesScreen';
import FoodVarietyScreen from './FoodVarietyScreen';
import GenderScreen from './GenderScreen';
import GeneratingPlanScreen from './GeneratingPlanScreen'; // –ù–æ–≤—ã–π —ç–∫—Ä–∞–Ω
import GoalDateIntroScreen from './GoalDateIntroScreen'; // –ù–æ–≤—ã–π —ç–∫—Ä–∞–Ω
import GoalSetConfirmScreen from './GoalSetConfirmScreen'; // –ù–æ–≤—ã–π —ç–∫—Ä–∞–Ω
import GoalSettingScreen from './GoalSettingScreen';
import HeightWeightScreen from './HeightWeightScreen';
import IntermittentFastingScreen from './IntermittentFastingScreen';
import IntermittentFastingSkipConfirmScreen from './IntermittentFastingSkipConfirmScreen'; // –ù–æ–≤—ã–π —ç–∫—Ä–∞–Ω
import MealFeelingsScreen from './MealFeelingsScreen';
import MealFrequencyScreen from './MealFrequencyScreen';
import MedicalDisclaimerScreen from './MedicalDisclaimerScreen'; // –ù–æ–≤—ã–π —ç–∫—Ä–∞–Ω
import MedicationScreen from './MedicationScreen';
import NutritionFocusScreen from './NutritionFocusScreen';
import NutritionIntroScreen from './NutritionIntroScreen'; // –ù–æ–≤—ã–π —ç–∫—Ä–∞–Ω
import PaywallScreen from './PaywallScreen'; // –ù–æ–≤—ã–π —ç–∫—Ä–∞–Ω
import PlanPreviewScreen from './PlanPreviewScreen'; // –ù–æ–≤—ã–π —ç–∫—Ä–∞–Ω
import PlanSummaryScreen from './PlanSummaryScreen'; // –ù–æ–≤—ã–π —ç–∫—Ä–∞–Ω
import SetbacksResponseScreen from './SetbacksResponseScreen';
import StressResponseScreen from './StressResponseScreen';
import SummaryPlanScreen from './SummaryPlanScreen';
import SummaryScreen from './SummaryScreen';
import TemptationResponseScreen from './TemptationResponseScreen';
import UnitsScreen from './UnitsScreen';
import WeightLossPlanScreen from './WeightLossPlanScreen';
import WeightManagementObstacleScreen from './WeightManagementObstacleScreen'; // –ù–æ–≤—ã–π —ç–∫—Ä–∞–Ω
import WelcomeScreen from './WelcomeScreen';

const { width } = Dimensions.get('window');

interface WeightLoss3OnboardingProps {
  startAtStep?: number;
}

export default function WeightLoss3Onboarding({ startAtStep = 0 }: WeightLoss3OnboardingProps) {
  // State –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —à–∞–≥–∞
  const [currentStep, setCurrentStep] = useState(startAtStep);
  
  // –•—É–∫–∏ –¥–ª—è —Å—Ç–∏–ª–µ–π –∏ —Ç–µ–º—ã
  const colorScheme = useColorScheme();
  const palette = usePalette();
  const containers = useContainerStyles();
  
  // –°–º–µ—â–µ–Ω–∏–µ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
  const scrollX = useRef(new Animated.Value(0)).current;
  
  // State –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –µ–¥–∏–Ω–∏—Ü –∏–∑–º–µ—Ä–µ–Ω–∏—è
  const [unitSettings, setUnitSettings] = useState<UnitSettings>({
    weight: 'kg',
    height: 'cm',
    system: 'metric'
  });
  
  // State –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∫–∞–ª–æ—Ä–∏–π
  const [selectedCalories, setSelectedCalories] = useState<number | null>(null);
  
  // useEffect –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ–ø—É—Å–∫–∞ —à–∞–≥–æ–≤
  React.useEffect(() => {
    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º FixedCalorieBudgetConfirmScreen –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≥–∏–±–∫–∏–π –±—é–¥–∂–µ—Ç
    if (currentStep === 15 && userProfileRef.current.useFlexibleCalories) {
      setCurrentStep(16);
      return;
    }
    
    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º IntermittentFastingSkipConfirmScreen –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–æ–µ –≥–æ–ª–æ–¥–∞–Ω–∏–µ
    if (currentStep === 25 && userProfileRef.current.intermittentFasting) {
      setCurrentStep(26);
      return;
    }
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º webhook –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ paywall (step 45)
    if (currentStep === 45) {
      const sendPaywallWebhookAsync = async () => {
        try {
          const emailId = await getUserEmailId();
          console.log('üéØ Paywall reached for user:', emailId);
          await sendPaywallWebhook(userProfileRef.current, unitSettings);
        } catch (error) {
          console.error('Error sending paywall webhook:', error);
        }
      };
      
      sendPaywallWebhookAsync();
    }
  }, [currentStep]);
  
  // –•—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const userProfileRef = useRef<Partial<UserProfile & {
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –Ω–æ–≤—ã—Ö —ç–∫—Ä–∞–Ω–æ–≤
    weightLossPlan: string;
    exerciseIntent: boolean;
    showCalorieTutorial: boolean;
    useFlexibleCalories: boolean;
    nutritionFocus: string;
    mainObstacle: string;
    eatingHabitsAssessment: string;
    intermittentFasting: boolean;
    difficultSituationsHandling: string; 
    challengesView: string; 
    setbacksResponse: string;
    medicationUse: string;
    adaptability: string; 
    foodPreferences: string;
    foodVariety: string;
    mealFeelings: string;
    temptationResponse: string;
    decisionMaking: string;
  }>>({
    // –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    birthday: '1992-06-15', // 32 –≥–æ–¥–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–¥–ª—è 2024 –≥–æ–¥–∞)
    gender: 'male', // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º—É–∂—Å–∫–æ–π –ø–æ–ª –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    height: 176, // –°—Ä–µ–¥–Ω–∏–π —Ä–æ—Å—Ç –º—É–∂—á–∏–Ω—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    weight: 87, // 87 –∫–≥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∫–∞–∫ –Ω–∞ —Å–∫—Ä–∏–Ω–µ
    primaryGoal: 'lose-weight', // –û—Å–Ω–æ–≤–Ω–∞—è —Ü–µ–ª—å - –ø–æ—Ö—É–¥–µ–Ω–∏–µ
    goalWeight: 80, // 80 –∫–≥ - —Ü–µ–ª–µ–≤–æ–π –≤–µ—Å –¥–ª—è –ø–æ—Ö—É–¥–µ–Ω–∏—è –∫–∞–∫ –Ω–∞ —Å–∫—Ä–∏–Ω–µ
    weightLossRate: 0.25, // –°–∫–æ—Ä–æ—Å—Ç—å —Å–Ω–∏–∂–µ–Ω–∏—è –≤–µ—Å–∞ (0.25 –∫–≥ –≤ –Ω–µ–¥–µ–ª—é) - —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤—ã–±–æ—Ä—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    activityLevel: 'lightly-active', // –°–ª–∞–±–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    
    // –ü–∏—Ç–∞–Ω–∏–µ –∏ –¥–∏–µ—Ç–∞
    dietPreference: 'standard', // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –¥–∏–µ—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    nutritionFocus: 'balanced', // –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ
    mealFrequency: '3-meals', // 3 –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    foodPreferences: 'taste', // –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ –≤–∫—É—Å–∞
    foodVariety: 'sometimes', // –ò–Ω–æ–≥–¥–∞ –ø—Ä–æ–±—É–µ—Ç –Ω–æ–≤–æ–µ
    mealFeelings: 'energized', // –≠–Ω–µ—Ä–≥–∏—á–Ω–æ—Å—Ç—å –ø–æ—Å–ª–µ –µ–¥—ã
    intermittentFasting: false, // –ë–µ–∑ –∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–æ–≥–æ –≥–æ–ª–æ–¥–∞–Ω–∏—è
    
    // –ü–ª–∞–Ω –ø–æ—Ö—É–¥–µ–Ω–∏—è –∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
    weightLossPlan: 'steady', // –ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–µ —Å–Ω–∏–∂–µ–Ω–∏–µ –≤–µ—Å–∞
    exerciseIntent: false, // –ë–µ–∑ –Ω–∞–º–µ—Ä–µ–Ω–∏—è –∑–∞–Ω–∏–º–∞—Ç—å—Å—è —Å–ø–æ—Ä—Ç–æ–º
    
    // –ö–∞–ª–æ—Ä–∏–∏ –∏ –±—é–¥–∂–µ—Ç
    showCalorieTutorial: true, // –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ –∫–∞–ª–æ—Ä–∏—è–º
    useFlexibleCalories: false, // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–∞–ª–æ—Ä–∏–π–Ω—ã–π –±—é–¥–∂–µ—Ç
    
    // –ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∞—Å–ø–µ–∫—Ç—ã
    confidenceLevel: 3, // –°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
    challenges: ['emotional-eating'], // –î–µ—Ñ–æ–ª—Ç–Ω—ã–π –≤—ã–∑–æ–≤ - —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ
    challengesView: 'growth-opportunity', // –í–∏–¥–µ—Ç—å —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏ –∫–∞–∫ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
    mainObstacle: 'emotional-eating', // –û—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–µ - —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ
    difficultSituationsHandling: 'cope-most', // –°–ø—Ä–∞–≤–ª—è—é—Å—å –≤ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–µ —Å–ª—É—á–∞–µ–≤
    setbacksResponse: 'bounce-back', // –ë—ã—Å—Ç—Ä–æ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è
    temptationResponse: 'usually-control', // –û–±—ã—á–Ω–æ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ—Ç —Å–µ–±—è
    decisionMaking: 'confident-doubt', // –£–≤–µ—Ä–µ–Ω, –Ω–æ –∏–Ω–æ–≥–¥–∞ —Å–æ–º–Ω–µ–≤–∞–µ—Ç—Å—è
    adaptability: 'adapt-time', // –ê–¥–∞–ø—Ç–∏—Ä—É–µ—Ç—Å—è, –Ω–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è –≤—Ä–µ–º—è
    
    // –û—Ü–µ–Ω–∫–∏ –ø—Ä–∏–≤—ã—á–µ–∫
    eatingHabitsAssessment: 'improving', // –°—Ç—Ä–µ–º–ª–µ–Ω–∏–µ –∫ —É–ª—É—á—à–µ–Ω–∏—è–º
    
    // –ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
    medicationUse: 'not-using', // –ë–µ–∑ –ø—Ä–∏–µ–º–∞ –ª–µ–∫–∞—Ä—Å—Ç–≤
    stressResponse: 'emotional-eating', // –ó–∞–µ–¥–∞–µ—Ç —Å—Ç—Ä–µ—Å—Å
  });
  
  // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤
  const MAX_STEPS = 47; // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–≥–ª–∞—Å–Ω–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º—É –¥–∏–∑–∞–π–Ω—É (0-46)
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞
  const saveUserProfile = async () => {
    try {
      const userProfile = userProfileRef.current;
      
      // –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º email ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const emailId = await getUserEmailId();
      console.log('User Email ID:', emailId);
      
      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è
      const nutritionPlan = calculateNutritionPlan();
      
      await AsyncStorage.setItem('userProfile', JSON.stringify(userProfile));
      await AsyncStorage.setItem('unitSettings', JSON.stringify(unitSettings));
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è, –µ—Å–ª–∏ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å
      if (nutritionPlan) {
        await AsyncStorage.setItem('nutritionPlan', JSON.stringify(nutritionPlan));
        console.log('üíæ –ü–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω—ë–Ω:', nutritionPlan);
      }
      
      // –§–ª–∞–≥ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞
      await AsyncStorage.setItem('hasCompletedOnboarding', 'true');
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º webhook –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞
      try {
        await sendCompletionWebhook(userProfile, unitSettings);
      } catch (webhookError) {
        console.error('Webhook error (non-blocking):', webhookError);
      }
      
      console.log('–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω:', userProfile);
      console.log('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –µ–¥–∏–Ω–∏—Ü –∏–∑–º–µ—Ä–µ–Ω–∏—è:', unitSettings);
      
      // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω
      router.replace('/');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    }
  };
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ 3-–¥–Ω–µ–≤–Ω–æ–≥–æ –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
  const startTrialPeriod = async () => {
    try {
      const userProfile = userProfileRef.current;
      
      // –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º email ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const emailId = await getUserEmailId();
      console.log('User Email ID for trial:', emailId);
      
      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è
      const nutritionPlan = calculateNutritionPlan();
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
      const trialStartDate = new Date().toISOString();
      const trialEndDate = new Date(Date.now() + 3 * 24 * 60 * 60 * 1000).toISOString(); // +3 –¥–Ω—è
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
      await AsyncStorage.setItem('trialStartDate', trialStartDate);
      await AsyncStorage.setItem('trialEndDate', trialEndDate);
      await AsyncStorage.setItem('isTrialActive', 'true');
      await AsyncStorage.setItem('userProfile', JSON.stringify(userProfile));
      await AsyncStorage.setItem('unitSettings', JSON.stringify(unitSettings));
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è, –µ—Å–ª–∏ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å
      if (nutritionPlan) {
        await AsyncStorage.setItem('nutritionPlan', JSON.stringify(nutritionPlan));
        console.log('üíæ –ü–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω—ë–Ω –¥–ª—è —Ç—Ä–∏–∞–ª–∞:', nutritionPlan);
      }
      
      // –§–ª–∞–≥ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞
      await AsyncStorage.setItem('hasCompletedOnboarding', 'true');
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º webhook –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞ —Å —Ç—Ä–∏–∞–ª–æ–º
      try {
        await sendCompletionWebhook(userProfile, unitSettings);
      } catch (webhookError) {
        console.error('Webhook error (non-blocking):', webhookError);
      }
      
      console.log('üéÅ –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∑–∞–ø—É—â–µ–Ω:', {
        emailId,
        startDate: trialStartDate,
        endDate: trialEndDate,
        userProfile
      });
      
      // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω —Å –∞–∫—Ç–∏–≤–Ω—ã–º —Ç—Ä–∏–∞–ª–æ–º
      router.replace('/');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞:', error);
    }
  };
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥
  const goToNextStep = () => {
    if (currentStep < MAX_STEPS - 1) {
      setCurrentStep(currentStep + 1);
    } else {
      // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞
      saveUserProfile();
    }
  };
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —à–∞–≥
  const goToPreviousStep = () => {
    if (currentStep > 0) {
      setCurrentStep(currentStep - 1);
    }
  };
  
  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const updateUserProfile = (updates: Partial<UserProfile>) => {
    userProfileRef.current = {
      ...userProfileRef.current,
      ...updates,
    };
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞ –∏–∑ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è
  const calculateAge = (birthday?: string): number => {
    if (!birthday) return 30; // –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    
    const birthDate = new Date(birthday);
    const today = new Date();
    let age = today.getFullYear() - birthDate.getFullYear();
    const monthDiff = today.getMonth() - birthDate.getMonth();
    
    if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birthDate.getDate())) {
      age--;
    }
    
    return Math.max(age, 18); // –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç 18 –ª–µ—Ç
  };
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ –ø–æ–ª–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è
  const calculateNutritionPlan = (): NutritionCalculationResult | null => {
    try {
      const userProfile = userProfileRef.current;
      console.log('üîç –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—á—ë—Ç –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è –¥–ª—è:', userProfile);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      if (!userProfile.weight || !userProfile.height || !userProfile.birthday || !userProfile.gender) {
        console.warn('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ –ø–∏—Ç–∞–Ω–∏—è:', {
          weight: userProfile.weight,
          height: userProfile.height,
          birthday: userProfile.birthday,
          gender: userProfile.gender
        });
        return null;
      }
      
      console.log('‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –µ—Å—Ç—å, –Ω–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—á—ë—Ç...');
      
      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤–µ—Å –≤ –ø–æ–ª–µ currentWeight –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–æ–º
      const profileForCalculation = {
        ...userProfile,
        currentWeight: userProfile.weight,
        // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –≤—Å–µ –ø–æ–ª—è –∏–º–µ—é—Ç –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        primaryGoal: userProfile.primaryGoal || 'lose-weight',
        activityLevel: userProfile.activityLevel || 'lightly-active',
        dietPreference: userProfile.dietPreference || 'standard',
        weightLossRate: userProfile.weightLossRate || 0.25,
        weightLossPlan: userProfile.weightLossPlan || 'steady',
        exerciseIntent: userProfile.exerciseIntent || false,
        nutritionFocus: userProfile.nutritionFocus || 'balanced',
        mealFrequency: userProfile.mealFrequency || '3-meals',
        intermittentFasting: userProfile.intermittentFasting || false,
        confidenceLevel: userProfile.confidenceLevel || 3,
        stressResponse: userProfile.stressResponse || 'exercise',
        temptationResponse: userProfile.temptationResponse || 'usually-control',
        medicationUse: userProfile.medicationUse || 'not-using'
      };
      
      console.log('üìã –ü—Ä–æ—Ñ–∏–ª—å –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞:', profileForCalculation);
      
      const nutritionPlan = calculateCompleteNutrition(profileForCalculation);
      console.log('üßÆ –†–∞—Å—Å—á–∏—Ç–∞–Ω –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è:', nutritionPlan);
      
      return nutritionPlan;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á—ë—Ç–∞ –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è:', error);
      return null;
    }
  };
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã—Ö –∫–∞–ª–æ—Ä–∏–π
  const getCalculatedCalories = (): number => {
    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤—ã–±—Ä–∞–ª –∫–∞–ª–æ—Ä–∏–∏ –Ω–∞ —ç–∫—Ä–∞–Ω–µ –ø–ª–∞–Ω–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö
    if (selectedCalories) {
      console.log('üíæ –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∫–∞–ª–æ—Ä–∏–∏:', selectedCalories);
      return selectedCalories;
    }
    
    // –ò–Ω–∞—á–µ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ –ø–æ–ª–Ω—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä
    const nutritionPlan = calculateNutritionPlan();
    const calculatedValue = nutritionPlan ? nutritionPlan.targetCalories : 1800;
    console.log('üßÆ –†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–µ –∫–∞–ª–æ—Ä–∏–∏ —á–µ—Ä–µ–∑ –ø–æ–ª–Ω—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä:', calculatedValue);
    return calculatedValue;
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª–Ω–æ—Ç—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞
  const hasCompleteNutritionData = (): boolean => {
    const userProfile = userProfileRef.current;
    return !!(userProfile.activityLevel && 
             userProfile.stressResponse &&
             userProfile.dietPreference &&
             userProfile.nutritionFocus &&
             userProfile.mealFrequency);
  };
  
  // –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Ç–µ–∫—É—â–µ–≥–æ —ç–∫—Ä–∞–Ω–∞
  const renderCurrentScreen = () => {
    switch (currentStep) {
      case 0:
        return (
          <WelcomeScreen
            onContinue={goToNextStep}
          />
        );
      case 1:
        return (
          <UnitsScreen
            onContinue={goToNextStep}
            onBack={goToPreviousStep}
            unitSettings={unitSettings}
            onUnitSettingsChange={(newSettings: UnitSettings) => setUnitSettings(newSettings)}
          />
        );
      case 2:
        return (
          <BirthdayScreen
            onContinue={goToNextStep}
            onBack={goToPreviousStep}
            birthday={userProfileRef.current.birthday || ''}
            onBirthdayChange={(birthday: string) => {
              updateUserProfile({ birthday });
            }}
          />
        );
      case 3:
        return (
          <GenderScreen
            onContinue={goToNextStep}
            onBack={goToPreviousStep}
            gender={userProfileRef.current.gender || 'male'}
            onGenderChange={(gender: Gender) => {
              updateUserProfile({ gender });
            }}
          />
        );
      case 4:
        return (
          <HeightWeightScreen
            onContinue={goToNextStep}
            onBack={goToPreviousStep}
            height={userProfileRef.current.height || 176}
            currentWeight={userProfileRef.current.weight || 50}
            unitSettings={unitSettings}
            onHeightChange={(height: number) => updateUserProfile({ height })}
            onWeightChange={(weight: number) => updateUserProfile({ weight })}
          />
        );
      case 5:
        return (
          <GoalSettingScreen
            onContinue={goToNextStep}
            onBack={goToPreviousStep}
            primaryGoal={userProfileRef.current.primaryGoal || 'lose-weight'}
            onGoalChange={(primaryGoal: PrimaryGoal) => updateUserProfile({ primaryGoal })}
            goalWeight={userProfileRef.current.goalWeight || 45}
            currentWeight={userProfileRef.current.weight || 50}
            unitSettings={unitSettings}
            onGoalWeightChange={(goalWeight: number) => updateUserProfile({ goalWeight })}
            weightLossRate={userProfileRef.current.weightLossRate || 0.25}
            onWeightLossRateChange={(weightLossRate: number) => updateUserProfile({ weightLossRate })}
          />
        );
      case 6:
        return (
          <GoalSetConfirmScreen
            onContinue={goToNextStep}
            onBack={goToPreviousStep}
            currentWeight={userProfileRef.current.weight || 50}
            goalWeight={userProfileRef.current.goalWeight || 45}
            weightUnits={unitSettings.weight}
            primaryGoal={userProfileRef.current.primaryGoal || 'lose-weight'}
          />
        );
      case 7:
        return (
          <CalorieBudgetIntroScreen
            onContinue={goToNextStep}
            onBack={goToPreviousStep}
            currentWeight={userProfileRef.current.weight || 50}
            goalWeight={userProfileRef.current.goalWeight || 45}
            weightUnits={unitSettings.weight}
          />
        );
      case 8:
        return (
          <ExerciseIntentScreen
            onContinue={goToNextStep}
            onBack={goToPreviousStep}
            exerciseIntent={userProfileRef.current.exerciseIntent || false}
            onExerciseIntentChange={(exerciseIntent: boolean) => {
              updateUserProfile({ exerciseIntent });
            }}
          />
        );
      case 9:
        return (
          <ExerciseBenefitsScreen
            onContinue={goToNextStep}
            onBack={goToPreviousStep}
            exerciseIntent={userProfileRef.current.exerciseIntent || false}
          />
        );
      case 10:
        return (
          <CalorieBudgetInfoScreen
            onContinue={goToNextStep}
            onBack={goToPreviousStep}
            userProfile={{
              gender: (userProfileRef.current.gender === 'male' || userProfileRef.current.gender === 'female') 
                ? userProfileRef.current.gender 
                : 'female',
              age: calculateAge(userProfileRef.current.birthday),
              weight: userProfileRef.current.weight || 50,
              height: userProfileRef.current.height || 170,
              activityLevel: userProfileRef.current.activityLevel === 'extremely-active' 
                ? 'extra-active' 
                : userProfileRef.current.activityLevel || 'moderately-active'
            }}
            fullUserProfile={userProfileRef.current}
          />
        );
      case 11:
        return (
          <CalorieCountingScreen
            onContinue={() => {
              // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ö–æ—á–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∏–¥–µ—Ç—å —Ç—É—Ç–æ—Ä–∏–∞–ª
              if (userProfileRef.current.showCalorieTutorial) {
                // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–æ "–î–∞, –ø–æ–∫–∞–∂–∏—Ç–µ –º–Ω–µ!", –ø—Ä–æ—Å—Ç–æ –æ—Å—Ç–∞–µ–º—Å—è –Ω–∞ —ç—Ç–æ–º —ç–∫—Ä–∞–Ω–µ
                // –∏ —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–º–µ—Ç –∫–Ω–æ–ø–∫—É –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –¥–∞–ª—å—à–µ
                goToNextStep();
              } else {
                // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–æ "–ù–µ—Ç, —Å–ø–∞—Å–∏–±–æ", —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ WeightLossPlanScreen
                setCurrentStep(12);
              }
            }}
            onBack={goToPreviousStep}
            showTutorial={userProfileRef.current.showCalorieTutorial || false}
            onShowTutorialChange={(showTutorial: boolean) => {
              updateUserProfile({ showCalorieTutorial: showTutorial });
            }}
          />
        );
      case 12:
        return (
          <WeightLossPlanScreen
            onContinue={goToNextStep}
            onBack={goToPreviousStep}
            weightLossPlan={userProfileRef.current.weightLossPlan || 'steady'}
            onWeightLossPlanChange={(plan: string) => {
              updateUserProfile({ weightLossPlan: plan });
            }}
            onCalorieSelectionChange={(calories: number) => {
              console.log('üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∫–∞–ª–æ—Ä–∏–∏:', calories);
              setSelectedCalories(calories);
            }}
            userProfile={{
              gender: (userProfileRef.current.gender === 'male' || userProfileRef.current.gender === 'female') 
                ? userProfileRef.current.gender 
                : 'female',
              age: calculateAge(userProfileRef.current.birthday),
              weight: userProfileRef.current.weight || 50,
              height: userProfileRef.current.height || 170,
              activityLevel: userProfileRef.current.activityLevel === 'extremely-active' 
                ? 'extra-active' 
                : userProfileRef.current.activityLevel || 'moderately-active'
            }}
            fullUserProfile={userProfileRef.current}
          />
        );
      case 13:
        return (
          <CalorieBudgetConfirmScreen
            onContinue={goToNextStep}
            onBack={goToPreviousStep}
            calorieBudget={getCalculatedCalories()}
            weightLossPlan={userProfileRef.current.weightLossPlan || 'steady'}
            isPreliminary={!hasCompleteNutritionData()}
          />
        );
      case 14:
        return (
          <CalorieScheduleScreen
            onContinue={goToNextStep}
            onBack={goToPreviousStep}
            useFlexibleCalories={userProfileRef.current.useFlexibleCalories || false}
            onUseFlexibleCaloriesChange={(useFlexible: boolean) => {
              updateUserProfile({ useFlexibleCalories: useFlexible });
            }}
          />
        );
      case 15:
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç—Ç–æ—Ç —ç–∫—Ä–∞–Ω, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –±—é–¥–∂–µ—Ç –∫–∞–ª–æ—Ä–∏–π
        if (!userProfileRef.current.useFlexibleCalories) {
          return (
            <FixedCalorieBudgetConfirmScreen
              onContinue={goToNextStep}
              onBack={goToPreviousStep}
              calorieBudget={getCalculatedCalories()}
            />
          );
        }
        // –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≥–∏–±–∫–∏–π –±—é–¥–∂–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º null (–ø—Ä–æ–ø—É—Å–∫ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≤ useEffect)
        return null;
      case 16:
        return (
          <NutritionIntroScreen
            onContinue={goToNextStep}
            onBack={goToPreviousStep}
            calorieBudget={getCalculatedCalories()}
            weightLossRate={userProfileRef.current.weightLossRate || 0.25}
            useFlexibleCalories={userProfileRef.current.useFlexibleCalories || false}
          />
        );
      case 17:
        return (
          <WeightManagementObstacleScreen
            onContinue={goToNextStep}
            onBack={goToPreviousStep}
            mainObstacle={userProfileRef.current.mainObstacle || 'emotional-eating'}
            onMainObstacleChange={(obstacle: string) => {
              updateUserProfile({ mainObstacle: obstacle });
            }}
          />
        );
      case 18:
        return (
          <EatingHabitsAssessmentScreen
            onContinue={goToNextStep}
            onBack={goToPreviousStep}
            eatingHabitsAssessment={userProfileRef.current.eatingHabitsAssessment || 'average'}
            onEatingHabitsAssessmentChange={(assessment: string) => {
              updateUserProfile({ eatingHabitsAssessment: assessment });
            }}
          />
        );
      case 19:
        return (
          <FoodPreferencesScreen
            onContinue={goToNextStep}
            onBack={goToPreviousStep}
            foodPriority={userProfileRef.current.foodPreferences || 'taste'}
            onFoodPriorityChange={(preferences: string) => {
              updateUserProfile({ foodPreferences: preferences });
            }}
          />
        );
      case 20:
        return (
          <FoodVarietyScreen
            onContinue={goToNextStep}
            onBack={goToPreviousStep}
            foodVariety={userProfileRef.current.foodVariety || 'average'}
            onFoodVarietyChange={(variety: string) => {
              updateUserProfile({ foodVariety: variety });
            }}
          />
        );
      case 21:
        return (
          <MealFeelingsScreen
            onContinue={goToNextStep}
            onBack={goToPreviousStep}
            mealFeeling={userProfileRef.current.mealFeelings || 'satisfied'}
            onMealFeelingChange={(feelings: string) => {
              updateUserProfile({ mealFeelings: feelings } as any);
            }}
          />
        );
      case 22:
        return (
          <MedicationScreen
            onContinue={goToNextStep}
            onBack={goToPreviousStep}
            medication={userProfileRef.current.medicationUse || 'none'}
            onMedicationChange={(medication: string) => {
              updateUserProfile({ medicationUse: medication } as any);
            }}
          />
        );
      case 23:
        return (
          <NutritionFocusScreen
            onContinue={goToNextStep}
            onBack={goToPreviousStep}
            nutritionFocus={userProfileRef.current.nutritionFocus || 'balanced'}
            onNutritionFocusChange={(focus: string) => {
              updateUserProfile({ nutritionFocus: focus });
            }}
          />
        );
      case 24:
        return (
          <IntermittentFastingScreen
            onContinue={goToNextStep}
            onBack={goToPreviousStep}
            useIntermittentFasting={userProfileRef.current.intermittentFasting || false}
            onUseIntermittentFastingChange={(fasting: boolean) => {
              updateUserProfile({ intermittentFasting: fasting });
            }}
          />
        );
      case 25:
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç—Ç–æ—Ç —ç–∫—Ä–∞–Ω —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç –∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–æ–≥–æ –≥–æ–ª–æ–¥–∞–Ω–∏—è
        if (!userProfileRef.current.intermittentFasting) {
          return (
            <IntermittentFastingSkipConfirmScreen
              onContinue={goToNextStep}
              onBack={goToPreviousStep}
            />
          );
        }
        // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–æ–µ –≥–æ–ª–æ–¥–∞–Ω–∏–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º null (–ø—Ä–æ–ø—É—Å–∫ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≤ useEffect)
        return null;
      case 26:
        return (
          <GoalDateIntroScreen
            onContinue={goToNextStep}
            onBack={goToPreviousStep}
          />
        );
      case 27:
        return (
          <AdaptabilityScreen
            onContinue={goToNextStep}
            onBack={goToPreviousStep}
            adaptability={userProfileRef.current.adaptability || 'adapt-time'}
            onAdaptabilityChange={(adaptability: string) => {
              updateUserProfile({ adaptability: adaptability } as any);
            }}
          />
        );
      case 28:
        return (
          <ChallengesViewScreen
            onContinue={goToNextStep}
            onBack={goToPreviousStep}
            challengesView={userProfileRef.current.challengesView || 'growth-opportunity'}
            onChallengesViewChange={(view: string) => {
              updateUserProfile({ challengesView: view } as any);
            }}
          />
        );
      case 29:
        return (
          <SetbacksResponseScreen
            onContinue={goToNextStep}
            onBack={goToPreviousStep}
            setbacksResponse={userProfileRef.current.setbacksResponse || 'bounce-back'}
            onSetbacksResponseChange={(response: string) => {
              updateUserProfile({ setbacksResponse: response } as any);
            }}
          />
        );
      case 30:
        return (
          <StressResponseScreen
            onContinue={goToNextStep}
            onBack={goToPreviousStep}
            stressResponse={userProfileRef.current.stressResponse || 'emotional-eating'}
            onStressResponseChange={(stressResponse: string) => {
              updateUserProfile({ stressResponse } as any);
            }}
          />
        );
      case 31:
        return (
          <DecisionMakingScreen
            onContinue={goToNextStep}
            onBack={goToPreviousStep}
            decisionConfidence={userProfileRef.current.decisionMaking || 'confident-doubt'}
            onDecisionConfidenceChange={(decision: string) => {
              updateUserProfile({ decisionMaking: decision } as any);
            }}
          />
        );
      case 32:
        return (
          <DifficultSituationsScreen
            onContinue={goToNextStep}
            onBack={goToPreviousStep}
            difficultSituationsHandling={userProfileRef.current.difficultSituationsHandling || 'cope-most'}
            onDifficultSituationsHandlingChange={(handling: string) => {
              updateUserProfile({ difficultSituationsHandling: handling } as any);
            }}
          />
        );
      case 33:
        return (
          <TemptationResponseScreen
            onContinue={goToNextStep}
            onBack={goToPreviousStep}
            temptationResponse={userProfileRef.current.temptationResponse || 'usually-control'}
            onTemptationResponseChange={(response: string) => {
              updateUserProfile({ temptationResponse: response } as any);
            }}
          />
        );
      case 34:
        return (
          <ConfidenceLevelScreen
            onContinue={goToNextStep}
            onBack={goToPreviousStep}
            confidenceLevel={userProfileRef.current.confidenceLevel || 3}
            onConfidenceLevelChange={(confidenceLevel: number) => {
              updateUserProfile({ confidenceLevel });
            }}
          />
        );
      case 35:
        return (
          <MedicalDisclaimerScreen
            onContinue={goToNextStep}
            onBack={goToPreviousStep}
          />
        );
      case 36:
        return (
          <PlanSummaryScreen
            onContinue={goToNextStep}
            onBack={goToPreviousStep}
            userProfile={{
              calorieBudget: getCalculatedCalories(),
              weightLossPlan: userProfileRef.current.weightLossPlan || 'steady',
              exerciseIntent: userProfileRef.current.exerciseIntent || false,
              nutritionFocus: userProfileRef.current.nutritionFocus || 'balanced',
              challengesView: userProfileRef.current.challengesView || 'growth-opportunity',
              intermittentFasting: userProfileRef.current.intermittentFasting || false
            }}
          />
        );
      case 37:
        return (
          <ActivityLevelScreen
            onContinue={goToNextStep}
            onBack={goToPreviousStep}
            activityLevel={userProfileRef.current.activityLevel || 'lightly-active'}
            onActivityLevelChange={(activityLevel: ActivityLevel) => {
              updateUserProfile({ activityLevel });
            }}
          />
        );
      case 38:
        return (
          <DietPreferenceScreen
            onContinue={goToNextStep}
            onBack={goToPreviousStep}
            dietPreference={userProfileRef.current.dietPreference || 'standard'}
            onDietPreferenceChange={(dietPreference: DietPreference) => {
              updateUserProfile({ dietPreference });
            }}
          />
        );
      case 39:
        return (
          <MealFrequencyScreen
            onContinue={goToNextStep}
            onBack={goToPreviousStep}
            mealFrequency={userProfileRef.current.mealFrequency || '3-meals'}
            onMealFrequencyChange={(mealFrequency: MealFrequency) => {
              updateUserProfile({ mealFrequency });
            }}
          />
        );
      case 40:
        return (
          <ChallengesScreen
            onContinue={goToNextStep}
            onBack={goToPreviousStep}
            challenges={userProfileRef.current.challenges || ['emotional-eating']}
            onChallengesChange={(challenges: Challenge[]) => {
              updateUserProfile({ challenges });
            }}
          />
        );
      case 41:
        return (
          <SummaryPlanScreen
            onContinue={() => setCurrentStep(45)} // –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ PaywallScreen
            onBack={goToPreviousStep}
            onClose={() => setCurrentStep(45)} // –ö—Ä–µ—Å—Ç–∏–∫ —Ç–æ–∂–µ –≤–µ–¥–µ—Ç –Ω–∞ PaywallScreen
            userProfile={userProfileRef.current}
          />
        );
      case 42:
        return (
          <SummaryScreen
            onComplete={goToNextStep} // –ò–∑–º–µ–Ω–µ–Ω–æ: —Ç–µ–ø–µ—Ä—å –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ GeneratingPlanScreen
            onBack={goToPreviousStep}
            userProfile={userProfileRef.current}
            unitSettings={unitSettings}
          />
        );
      case 43:
        return (
          <GeneratingPlanScreen
            onContinue={goToNextStep}
            onBack={goToPreviousStep}
          />
        );
      case 44:
        return (
          <PlanPreviewScreen
            onContinue={goToNextStep} // –ü–µ—Ä–µ—Ö–æ–¥ –∫ paywall
            onBack={goToPreviousStep}
            onStartTrial={startTrialPeriod} // –ó–∞–ø—É—Å–∫ 3-–¥–Ω–µ–≤–Ω–æ–≥–æ –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
            userProfile={userProfileRef.current}
          />
        );
      case 45:
        return (
          <PaywallScreen
            onContinue={() => {
              // –ü–æ–∫–∞ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º, –∫–∞–∫ –∑–∞–ø—Ä–æ—Å–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
              console.log('Continue pressed on paywall - no action for now');
            }}
            onBack={goToPreviousStep}
            onSkip={saveUserProfile} // –û–ø—Ü–∏—è –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–µ–¥–µ—Ç –Ω–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω
          />
        );
      case 46:
        // –§–∏–Ω–∞–ª—å–Ω—ã–π —à–∞–≥ - –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
        React.useEffect(() => {
          saveUserProfile();
        }, []);
        return null;
      default:
        return null;
    }
  };

  // –°–æ–∑–¥–∞–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ —Å—Ç–∏–ª–∏ –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  const dynamicStyles = {
    progressBarContainer: {
      width: width,
      height: 4,
      backgroundColor: palette.border.inactive,
      position: 'absolute' as const,
      top: 0,
    },
    progressBar: {
      height: 4,
      backgroundColor: palette.primary,
    },
    stepIndicator: {
      flexDirection: 'row' as const,
      justifyContent: 'center' as const,
      marginVertical: 8,
    },
    stepDot: {
      width: 8,
      height: 8,
      borderRadius: 4,
      backgroundColor: palette.border.inactive,
      marginHorizontal: 4,
    },
    activeStepDot: {
      backgroundColor: palette.primary,
    },
    screenContainer: {
      flex: 1,
    },
  };

  // –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
  const renderProgressBar = () => {
    const progressWidth = (currentStep / (MAX_STEPS - 1)) * width;
    return (
      <View style={dynamicStyles.progressBarContainer}>
        <Animated.View style={[dynamicStyles.progressBar, { width: progressWidth }]} />
      </View>
    );
  };

  // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —à–∞–≥–æ–≤
  const renderStepIndicators = () => {
    return (
      <View style={dynamicStyles.stepIndicator}>
        {Array.from({ length: MAX_STEPS }).map((_, index) => (
          <View
            key={index}
            style={[
              dynamicStyles.stepDot,
              currentStep === index && dynamicStyles.activeStepDot
            ]}
          />
        ))}
      </View>
    );
  };

  return (
    <View style={{ flex: 1, backgroundColor: palette.background }}>
      <StatusBar style={colorScheme === 'dark' ? 'light' : 'dark'} />
      <SafeAreaView style={containers.safeArea} edges={['top', 'left', 'right']}>
        {renderProgressBar()}
        <View style={dynamicStyles.screenContainer}>
          {renderCurrentScreen()}
        </View>
      </SafeAreaView>
      {/* –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ–±–ª–∞—Å—Ç—å –¥–ª—è Home Indicator */}
      <View style={{
        position: 'absolute',
        bottom: 0,
        left: 0,
        right: 0,
        height: 34, // –í—ã—Å–æ—Ç–∞ Home Indicator –Ω–∞ iPhone
        backgroundColor: palette.background,
        zIndex: -1
      }} />
    </View>
  );
}
