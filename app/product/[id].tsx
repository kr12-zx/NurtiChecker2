import { Ionicons } from '@expo/vector-icons';
import { Image } from 'expo-image';
import { Stack, router, useLocalSearchParams } from 'expo-router';
import React, { useEffect, useState } from 'react';
import { ActivityIndicator, Alert, ScrollView, StyleSheet, Text, TextInput, TouchableOpacity, View, useColorScheme } from 'react-native';
import PortionSizeModal, { PortionData } from '../../components/PortionSizeModal';
import i18n, { useTranslation } from '../../i18n/i18n';
import { addProductToDay } from '../../services/dailyNutrition';
import { updateScanById } from '../../services/scanHistory';
import { getTempData } from '../../services/tempStore';

// Mock nutrient data for cases when real data is not available
const MOCK_NUTRIENTS = {
  carbs: 5,
  fat: 3,
  protein: 18, 
  fiber: 2,
  sugar: 1,
  calcium: 120,
  vitamins: ['Vitamin D', 'Vitamin B12'],
  ingredients: 'Milk, Live Active Cultures, Salt, Enzymes',
  allergens: ['Milk'],
};

// Mock allergen list from user preferences
const USER_ALLERGENS = ['Milk', 'Soy', 'Nuts', 'Gluten'];

export default function ProductDetailScreen() {
  const params = useLocalSearchParams();
  
  // üîç –î–ï–ë–ê–ì: –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏—Ö–æ–¥—è—Ç
  console.log('üîç –í–°–ï –ü–ê–†–ê–ú–ï–¢–†–´:', JSON.stringify(params, null, 2));
  console.log('üöÄ –î–ï–ë–ê–ì fromDashboard:', params.fromDashboard);
  console.log('üöÄ –î–ï–ë–ê–ì servingMultiplier:', params.servingMultiplier);
  console.log('üöÄ –î–ï–ë–ê–ì actualCalories:', params.actualCalories);
  
  const { 
    id, 
    productName, 
    calories, 
    protein: proteinParam, 
    fat: fatParam,       
    carbs: carbsParam,     
    imgKey, 
    date, 
    scanDate, 
    useRealData, 
    analysisData: analysisDataString, 
    originalData, 
    fullData: fullDataString,
    // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏–∑ –¥–∞—à–±–æ—Ä–¥–∞ (—Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏ —Å—ä–µ–¥–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è)
    fromDashboard,
    actualCalories,
    actualProtein,
    actualFat,
    actualCarbs,
    actualSugar,
    actualFiber,
    actualSaturatedFat,
    servingMultiplier
  } = params;
  
  // üîç –î–ï–ë–ê–ì: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –Ω–∞ —Ç–∏–ø
  Object.entries(params).forEach(([key, value]) => {
    if (typeof value === 'object' && value !== null) {
      console.log(`üîç –ù–ê–ô–î–ï–ù –û–ë–™–ï–ö–¢ –í –ü–ê–†–ê–ú–ï–¢–†–ê–•: ${key} =`, value);
    }
  });
  const { t } = useTranslation();

  const [modalVisible, setModalVisible] = useState(false);
  const [isAdding, setIsAdding] = useState(false); // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞

  // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞
  const [isEditingProduct, setIsEditingProduct] = useState(false);
  const [editedProductData, setEditedProductData] = useState({
    name: '',
    weight: '',
    calories: '',
    protein: '',
    fat: '',
    carbs: '',
    sugars: '',
    fiber: '',
    saturatedFat: '',
    calcium: '',
    vitamins: '',
    ingredients: '',
    allergens: ''
  });
  
  // –ë–∞–∑–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –ø–µ—Ä–µ—Å—á—ë—Ç–∞ (–≤—Å–µ–≥–¥–∞ –¥–ª—è 100–≥)
  const [baseProductData, setBaseProductData] = useState({
    name: '',
    calories: 0,
    protein: 0,
    fat: 0,
    carbs: 0,
    sugars: 0,
    fiber: 0,
    saturatedFat: 0
  });
  
  const [isAIAnalyzing, setIsAIAnalyzing] = useState(false);
  const [shouldAutoEdit, setShouldAutoEdit] = useState(false);
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–º–∏ –∞–Ω–∞–ª–∏–∑–∞
  const [analysisData, setAnalysisData] = useState<any>(null);
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –Ω—É—Ç—Ä–∏–µ–Ω—Ç–æ–≤ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ getDisplay —Ñ—É–Ω–∫—Ü–∏—è—Ö)
  const [nutrients, setNutrients] = useState({
    protein: Number(proteinParam) || 0,
    fat: Number(fatParam) || 0,
    carbs: Number(carbsParam) || 0,
    sugar: 0,
    fiber: 0,
    calcium: 0,
    vitamins: [] as string[], // –í—Å–µ–≥–¥–∞ —Ç–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫–∏
    ingredients: '',
    allergens: [] as string[], // –í—Å–µ–≥–¥–∞ —Ç–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫–∏
  });

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∞–Ω–∞–ª–∏–∑–∞
  useEffect(() => {
    let parsedData: any = null; 
    try {
      if (fullDataString) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ
        const rawFullData = safeDecodeURIComponent(fullDataString as string);
        try {
          const tempParsedFullData = JSON.parse(rawFullData);
          if (tempParsedFullData && tempParsedFullData.foodData) {
            parsedData = tempParsedFullData.foodData;
          }
        } catch (parseError) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ JSON –ø–æ—Å–ª–µ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è:', parseError);
        }
      }
      if (!parsedData && analysisDataString) {
        parsedData = JSON.parse(analysisDataString as string);
      }
    } catch (error) {
      console.error('Error parsing analysis data:', error);
    }
    
    // –î–ï–ë–ê–ì: –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —á—Ç–æ –ø—Ä–∏—Ö–æ–¥—è—Ç
    console.log('üîç –î–ï–ë–ê–ì: productName —Ç–∏–ø –∏ –∑–Ω–∞—á–µ–Ω–∏–µ:', typeof productName, productName);
    console.log('üîç –î–ï–ë–ê–ì: parsedData:', parsedData);
    
    if (parsedData) {
      setAnalysisData({ ...parsedData }); // –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è
      console.log('üìä –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –¥–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏–∑–∞:', parsedData);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º nutrients –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ analysisData
      if (parsedData.nutritionInfo) {
        // –ë–µ–∑–æ–ø–∞—Å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–∞—Å—Å–∏–≤—ã –≤–∏—Ç–∞–º–∏–Ω–æ–≤ –∏ –∞–ª–ª–µ—Ä–≥–µ–Ω–æ–≤
        const safeVitamins = (parsedData.nutritionInfo.vitamins || []).map((vitamin: any) => 
          typeof vitamin === 'string' ? vitamin : vitamin?.name || vitamin?.title || 'Unknown vitamin'
        );
        const safeAllergens = (parsedData.allergens || []).map((allergen: any) => 
          typeof allergen === 'string' ? allergen : allergen?.name || allergen?.title || 'Unknown allergen'
        );
        
        // –ë–µ–∑–æ–ø–∞—Å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º ingredients (–º–æ–∂–µ—Ç –±—ã—Ç—å –º–∞—Å—Å–∏–≤–æ–º –æ–±—ä–µ–∫—Ç–æ–≤)
        let safeIngredients = '';
        if (parsedData.ingredients) {
          if (typeof parsedData.ingredients === 'string') {
            safeIngredients = parsedData.ingredients;
          } else if (Array.isArray(parsedData.ingredients)) {
            safeIngredients = parsedData.ingredients.map((ingredient: any) => 
              typeof ingredient === 'string' ? ingredient : ingredient?.name || ingredient?.title || 'Unknown ingredient'
            ).join(', ');
          }
        }

        setNutrients({
          protein: parsedData.nutritionInfo.protein || 0,
          fat: parsedData.nutritionInfo.fat || 0,
          carbs: parsedData.nutritionInfo.carbs || 0,
          sugar: parsedData.nutritionInfo.sugars || 0, // –í–∞–∂–Ω–æ: sugars –∏–∑ API ‚Üí sugar –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
          fiber: parsedData.nutritionInfo.fiber || 0,
          calcium: parsedData.nutritionInfo.calcium || 0,
          vitamins: safeVitamins,
          ingredients: safeIngredients,
          allergens: safeAllergens,
        });
        console.log('üçØ –û–±–Ω–æ–≤–ª–µ–Ω—ã nutrients:', {
          protein: parsedData.nutritionInfo.protein,
          fat: parsedData.nutritionInfo.fat,
          carbs: parsedData.nutritionInfo.carbs,
          sugar: parsedData.nutritionInfo.sugars,
          fiber: parsedData.nutritionInfo.fiber,
          calcium: parsedData.nutritionInfo.calcium,
          vitamins: parsedData.nutritionInfo.vitamins,
          ingredients: parsedData.ingredients,
          allergens: parsedData.allergens,
        });
      }
    }
  }, [fullDataString, analysisDataString]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞ —Ä–∞–∑–º–µ—Ä–∞ –ø–æ—Ä—Ü–∏–∏ –∏ –¥–æ–±–∞–≤–æ–∫
  const handlePortionConfirm = async (portionData: PortionData) => {
    try {
      setIsAdding(true);
      
      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –µ—Å–ª–∏ –ø—Ä–æ–¥—É–∫—Ç –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      if (isEditingProduct) {
        console.log('üíæ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –ø—Ä–æ–¥—É–∫—Ç–∞');
        await handleSaveEditingProduct();
      }
      
      // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–¥—É–∫—Ç–µ –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è (—Å —É—á–µ—Ç–æ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
      const productData = {
        id: id as string,
        name: getDisplayName(),
        calories: Number(getDisplayCalories()) || 0,
        protein: Number(getDisplayProtein()) || 0,
        fat: Number(getDisplayFat()) || 0,
        carbs: Number(getDisplayCarbs()) || 0,
        sugar: Number(getDisplaySugar()) || 0,
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        timestamp: Date.now(),
        date: new Date().toLocaleTimeString(),
        scanDate: new Date().toLocaleDateString(),
      };
      
      console.log('üì¶ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:', productData);
      console.log('üçØ –û—Ç–ª–∞–¥–∫–∞ —Å–∞—Ö–∞—Ä–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞:', {
        getDisplaySugar: getDisplaySugar(),
        productDataSugar: productData.sugar,
        nutrientsSugar: nutrients.sugar,
        analysisDataSugars: analysisData?.nutritionInfo?.sugars,
        isEditingProduct: isEditingProduct,
        editedSugars: isEditingProduct ? editedProductData.sugars : '–Ω–µ –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è'
      });
      
      // –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ø–æ—Ä—Ü–∏–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
      let portionMultiplier = 1.0;
      switch (portionData.portionSize) {
        case 'small':
          portionMultiplier = 0.7;
          break;
        case 'regular':
          portionMultiplier = 1.0;
          break;
        case 'large':
          portionMultiplier = 1.5;
          break;
      }
      
      // –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
      let quantityMultiplier = 1.0;
      switch (portionData.quantityEaten) {
        case 'all':
          quantityMultiplier = 1.0;
          break;
        case 'three_quarters':
          quantityMultiplier = 0.75;
          break;
        case 'half':
          quantityMultiplier = 0.5;
          break;
        case 'third':
          quantityMultiplier = 0.33;
          break;
        case 'quarter':
          quantityMultiplier = 0.25;
          break;
        case 'tenth':
          quantityMultiplier = 0.1;
          break;
        case 'sip':
          quantityMultiplier = 0.05;
          break;
        default:
          quantityMultiplier = 1.0;
          break;
      }
      
      // –û–±—â–∏–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç (–ø–æ—Ä—Ü–∏—è * –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ * –∫–æ–ª-–≤–æ –µ–¥–∏–Ω–∏—Ü)
      const totalMultiplier = portionMultiplier * quantityMultiplier * portionData.quantity;
      
      console.log('üìè –†–∞—Å—á–µ—Ç –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ –ø–æ—Ä—Ü–∏–∏:', {
        portionSize: portionData.portionSize,
        portionMultiplier,
        quantityEaten: portionData.quantityEaten,
        quantityMultiplier,
        quantity: portionData.quantity,
        totalMultiplier
      });
      
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–∞–ª–æ—Ä–∏–∏ –∏ –Ω—É—Ç—Ä–∏–µ–Ω—Ç—ã –æ—Ç –¥–æ–±–∞–≤–æ–∫
      
      // –°–æ—É—Å (30 –∫–∫–∞–ª, 1–≥ –±–µ–ª–∫–∞, 1–≥ –∂–∏—Ä–∞, 3–≥ —É–≥–ª–µ–≤–æ–¥–æ–≤ –∑–∞ –ø–æ—Ä—Ü–∏—é)
      const sauceCalories = portionData.addons.sauce * 30;
      const sauceProtein = portionData.addons.sauce * 1;
      const sauceFat = portionData.addons.sauce * 1;
      const sauceCarbs = portionData.addons.sauce * 3;
      
      // –°–∞—Ö–∞—Ä (12 –∫–∫–∞–ª, 0–≥ –±–µ–ª–∫–∞, 0–≥ –∂–∏—Ä–∞, 3–≥ —É–≥–ª–µ–≤–æ–¥–æ–≤, 3–≥ —Å–∞—Ö–∞—Ä–∞ –∑–∞ –ø–æ—Ä—Ü–∏—é)
      const sugarCalories = portionData.addons.sugar * 12;
      const sugarProtein = 0;
      const sugarFat = 0;
      const sugarCarbs = portionData.addons.sugar * 3;
      const hiddenSugar = portionData.addons.sugar * 3;
      
      // –ú–∞—Å–ª–æ (45 –∫–∫–∞–ª, 0–≥ –±–µ–ª–∫–∞, 5–≥ –∂–∏—Ä–∞, 0–≥ —É–≥–ª–µ–≤–æ–¥–æ–≤ –∑–∞ –ø–æ—Ä—Ü–∏—é)
      const oilCalories = portionData.addons.oil * 45;
      const oilProtein = 0;
      const oilFat = portionData.addons.oil * 5;
      const oilCarbs = 0;
      
      // –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –Ω—É—Ç—Ä–∏–µ–Ω—Ç–æ–≤
      const totalAddonCalories = sauceCalories + sugarCalories + oilCalories;
      const totalAddonProtein = sauceProtein + sugarProtein + oilProtein;
      const totalAddonFat = sauceFat + sugarFat + oilFat;
      const totalAddonCarbs = sauceCarbs + sugarCarbs + oilCarbs;
      
      console.log('üçØ –î–æ–±–∞–≤–∫–∏ –∫ –ø—Ä–æ–¥—É–∫—Ç—É:', {
        sauce: portionData.addons.sauce,
        sugar: portionData.addons.sugar,
        oil: portionData.addons.oil,
        totalAddonCalories,
        totalAddonProtein,
        totalAddonFat,
        totalAddonCarbs,
        hiddenSugar
      });
      
      // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–¥—É–∫—Ç —Å —É—á–µ—Ç–æ–º –¥–æ–±–∞–≤–æ–∫
      let productWithAddons = { ...productData };
      
      // –î–æ–±–∞–≤–ª—è–µ–º –ø–∏—â–µ–≤—É—é —Ü–µ–Ω–Ω–æ—Å—Ç—å –¥–æ–±–∞–≤–æ–∫ –∫ –ø—Ä–æ–¥—É–∫—Ç—É
      if (totalAddonCalories > 0) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–ª–æ—Ä–∏–∏
        const currentCalories = typeof productData.calories === 'string' ? parseInt(productData.calories) : productData.calories;
        productWithAddons.calories = currentCalories + totalAddonCalories;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –±–µ–ª–∫–∏
        if (productData.protein !== undefined) {
          const currentProtein = typeof productData.protein === 'string' ? parseFloat(productData.protein) : productData.protein;
          productWithAddons.protein = currentProtein + totalAddonProtein;
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∂–∏—Ä—ã
        if (productData.fat !== undefined) {
          const currentFat = typeof productData.fat === 'string' ? parseFloat(productData.fat) : productData.fat;
          productWithAddons.fat = currentFat + totalAddonFat;
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —É–≥–ª–µ–≤–æ–¥—ã
        if (productData.carbs !== undefined) {
          const currentCarbs = typeof productData.carbs === 'string' ? parseFloat(productData.carbs) : productData.carbs;
          productWithAddons.carbs = currentCarbs + totalAddonCarbs;
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–∫—Ä—ã—Ç—ã–π —Å–∞—Ö–∞—Ä
        if (hiddenSugar > 0) {
          // –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–ª–µ sugar, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ
          if (productData.sugar !== undefined) {
            const currentSugar = typeof productData.sugar === 'string' ? parseFloat(productData.sugar) : productData.sugar;
            productWithAddons.sugar = currentSugar + hiddenSugar;
          } else {
            // –ò–Ω–∞—á–µ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –ø–æ–ª–µ
            productWithAddons.sugar = hiddenSugar;
          }
        }
        
        console.log('üìä –ü—Ä–æ–¥—É–∫—Ç —Å –¥–æ–±–∞–≤–∫–∞–º–∏:', productWithAddons);
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ–ª—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å ScanHistoryItem
      const scanHistoryItem = {
        ...productWithAddons,
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è ScanHistoryItem
        brand: analysisData?.brand || undefined,
        image: imageUrl || undefined,
        fullData: analysisData ? JSON.stringify(analysisData) : undefined
      };
      
      console.log('üìã –ü–æ–ª–Ω—ã–π –æ–±—ä–µ–∫—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –¥–Ω–µ–≤–Ω–∏–∫:', scanHistoryItem);
      
      // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–¥—É–∫—Ç –≤ –¥–Ω–µ–≤–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      await addProductToDay(scanHistoryItem, totalMultiplier);
      
      // –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –¥–∞—à–±–æ—Ä–¥ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ (–±–µ–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è)
      console.log('‚úÖ –ü—Ä–æ–¥—É–∫—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –¥–Ω–µ–≤–Ω–∏–∫:', productData.name);
      router.push('/(tabs)/main01');
      
      // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
      setModalVisible(false);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞:', error);
      Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç –≤ –¥–Ω–µ–≤–Ω–∏–∫');
    } finally {
      setIsAdding(false);
    }
  };

  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞
  const handleStartEditingProduct = () => {
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
    const currentName = analysisData?.foodName || productName || '';
    const currentWeight = String(analysisData?.portionInfo?.estimatedWeight || analysisData?.estimatedWeight || 100);
    const currentCalories = analysisData?.nutritionInfo?.calories ?? calories;
    const currentProtein = nutrients.protein;
    const currentFat = nutrients.fat;
    const currentCarbs = nutrients.carbs;
    const currentSugar = nutrients.sugar;
    const currentFiber = nutrients.fiber;
    const currentSaturatedFat = analysisData?.nutritionInfo?.saturatedFat || 0;

    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–∞–Ω–Ω—ã–µ –æ—Ç N8N —É–∂–µ –ø—Ä–∏—Ö–æ–¥—è—Ç –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–æ—Ä—Ü–∏–∏ (estimatedWeight)
    // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –∫ –±–∞–∑–µ 100–≥ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø–µ—Ä–µ—Å—á–µ—Ç–∞
    const weightNum = parseFloat(currentWeight);
    const baseMultiplier = 100 / weightNum; // –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–ª—è –ø–µ—Ä–µ—Å—á–µ—Ç–∞ –∫ 100–≥
    
    console.log('üîç –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', {
      currentWeight: weightNum,
      currentCalories,
      currentProtein,
      currentCarbs,
      currentSugar,
      baseMultiplier,
      calculatedCarbsPer100g: Math.round((Number(currentCarbs || 0)) * baseMultiplier * 10) / 10,
      calculatedSugarPer100g: Math.round((Number(currentSugar || 0)) * baseMultiplier * 10) / 10
    });
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–∞–∑–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –ø–µ—Ä–µ—Å—á—ë—Ç–∞ (–≤—Å–µ–≥–¥–∞ –¥–ª—è 100–≥)
    setBaseProductData({
      name: String(currentName),
      calories: Math.round((Number(currentCalories || 0)) * baseMultiplier),
      protein: Math.round((Number(currentProtein || 0)) * baseMultiplier * 10) / 10,
      fat: Math.round((Number(currentFat || 0)) * baseMultiplier * 10) / 10,
      carbs: Math.round((Number(currentCarbs || 0)) * baseMultiplier * 10) / 10,
      sugars: Math.round((Number(currentSugar || 0)) * baseMultiplier * 10) / 10,
      fiber: Math.round((Number(currentFiber || 0)) * baseMultiplier * 10) / 10,
      saturatedFat: Math.round((Number(currentSaturatedFat || 0)) * baseMultiplier * 10) / 10
    });

    setEditedProductData({
      name: String(currentName),
      weight: String(currentWeight),
      calories: String(currentCalories || 0),
      protein: String(currentProtein || 0),
      fat: String(currentFat || 0),
      carbs: String(currentCarbs || 0),
      sugars: String(currentSugar || 0),
      fiber: String(currentFiber || 0),
      saturatedFat: String(currentSaturatedFat || 0),
      calcium: String(nutrients.calcium || 0),
      vitamins: Array.isArray(nutrients.vitamins) ? nutrients.vitamins.join(', ') : '',
      ingredients: nutrients.ingredients || '',
      allergens: Array.isArray(nutrients.allergens) ? nutrients.allergens.join(', ') : ''
    });
    setIsEditingProduct(true);
    console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞');
  };

  const handleSaveEditingProduct = async () => {
    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    if (!editedProductData.name.trim()) {
      Alert.alert(t('common.error'), '–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º');
      return;
    }

    try {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∞–Ω–∞–ª–∏–∑–∞
      if (analysisData) {
        setAnalysisData((prev: any) => ({
          ...prev,
          foodName: editedProductData.name,
          estimatedWeight: Number(editedProductData.weight) || 100,
          portionInfo: {
            ...prev.portionInfo,
            estimatedWeight: Number(editedProductData.weight) || 100
          },
          nutritionInfo: {
            ...prev.nutritionInfo,
            calories: Number(editedProductData.calories) || 0,
            protein: Number(editedProductData.protein) || 0,
            fat: Number(editedProductData.fat) || 0,
            carbs: Number(editedProductData.carbs) || 0,
            sugars: Number(editedProductData.sugars) || 0,
            fiber: Number(editedProductData.fiber) || 0,
            saturatedFat: Number(editedProductData.saturatedFat) || 0
          }
        }));
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º nutrients
      setNutrients(prev => ({
        ...prev,
        protein: Number(editedProductData.protein) || 0,
        fat: Number(editedProductData.fat) || 0,
        carbs: Number(editedProductData.carbs) || 0,
        sugar: Number(editedProductData.sugars) || 0,
        fiber: Number(editedProductData.fiber) || 0,
        calcium: Number(editedProductData.calcium) || 0,
        vitamins: editedProductData.vitamins ? editedProductData.vitamins.split(',').map((vitamin: string) => vitamin.trim()).filter(Boolean) : [],
        ingredients: editedProductData.ingredients,
        allergens: editedProductData.allergens ? editedProductData.allergens.split(',').map((allergen: string) => allergen.trim()).filter(Boolean) : [],
      }));

      // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –±—É–¥—É—â–∏—Ö –ø–µ—Ä–µ—Å—á–µ—Ç–æ–≤
      setBaseProductData(prev => ({
        ...prev,
        name: editedProductData.name,
        calories: Number(editedProductData.calories) || 0,
        protein: Number(editedProductData.protein) || 0,
        fat: Number(editedProductData.fat) || 0,
        carbs: Number(editedProductData.carbs) || 0,
        sugars: Number(editedProductData.sugars) || 0,
        fiber: Number(editedProductData.fiber) || 0,
        saturatedFat: Number(editedProductData.saturatedFat) || 0
      }));

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ AsyncStorage (–∏—Å—Ç–æ—Ä–∏—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π)
      if (id) {
        // –°–æ–∑–¥–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ fullData —Å –Ω–æ–≤—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
        const updatedFullData = analysisData ? JSON.stringify({
          foodData: {
            ...analysisData,
            foodName: editedProductData.name,
            estimatedWeight: Number(editedProductData.weight) || 100,
            portionInfo: {
              ...analysisData.portionInfo,
              estimatedWeight: Number(editedProductData.weight) || 100
            },
            nutritionInfo: {
              ...analysisData.nutritionInfo,
              calories: Number(editedProductData.calories) || 0,
              protein: Number(editedProductData.protein) || 0,
              fat: Number(editedProductData.fat) || 0,
              carbs: Number(editedProductData.carbs) || 0,
              sugars: Number(editedProductData.sugars) || 0,
              fiber: Number(editedProductData.fiber) || 0,
              saturatedFat: Number(editedProductData.saturatedFat) || 0
            }
          }
        }) : undefined;

        // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
        await updateScanById(id as string, {
          name: editedProductData.name,
          calories: Number(editedProductData.calories) || 0,
          protein: Number(editedProductData.protein) || 0,
          fat: Number(editedProductData.fat) || 0,
          carbs: Number(editedProductData.carbs) || 0,
          sugar: Number(editedProductData.sugars) || 0,
          fullData: updatedFullData
        });

        console.log('üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ AsyncStorage –¥–ª—è ID:', id);
      }

      setIsEditingProduct(false);
      console.log('‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞:', editedProductData);
      
      // Alert.alert('–£—Å–ø–µ—Ö', '–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã'); // –£–±–∏—Ä–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      console.log('‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏:', error);
      Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è');
    }
  };

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –±–µ–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–¥–ª—è –∫–Ω–æ–ø–∫–∏ –≥–∞–ª–æ—á–∫–∏)
  const handleSaveEditingProductSilent = async () => {
    // –í–∞–ª–∏–¥–∞—Ü–∏—è (—Ç–∏—Ö–∞—è - –±–µ–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π)
    if (!editedProductData.name.trim()) {
      console.log('‚ùå –¢–∏—Ö–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è: –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –ø—É—Å—Ç–æ–µ');
      return;
    }

    try {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∞–Ω–∞–ª–∏–∑–∞
      if (analysisData) {
        setAnalysisData((prev: any) => ({
          ...prev,
          foodName: editedProductData.name,
          estimatedWeight: Number(editedProductData.weight) || 100,
          portionInfo: {
            ...prev.portionInfo,
            estimatedWeight: Number(editedProductData.weight) || 100
          },
          nutritionInfo: {
            ...prev.nutritionInfo,
            calories: Number(editedProductData.calories) || 0,
            protein: Number(editedProductData.protein) || 0,
            fat: Number(editedProductData.fat) || 0,
            carbs: Number(editedProductData.carbs) || 0,
            sugars: Number(editedProductData.sugars) || 0,
            fiber: Number(editedProductData.fiber) || 0,
            saturatedFat: Number(editedProductData.saturatedFat) || 0
          }
        }));
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º nutrients
      setNutrients(prev => ({
        ...prev,
        protein: Number(editedProductData.protein) || 0,
        fat: Number(editedProductData.fat) || 0,
        carbs: Number(editedProductData.carbs) || 0,
        sugar: Number(editedProductData.sugars) || 0,
        fiber: Number(editedProductData.fiber) || 0,
        calcium: Number(editedProductData.calcium) || 0,
        vitamins: editedProductData.vitamins ? editedProductData.vitamins.split(',').map((vitamin: string) => vitamin.trim()).filter(Boolean) : [],
        ingredients: editedProductData.ingredients,
        allergens: editedProductData.allergens ? editedProductData.allergens.split(',').map((allergen: string) => allergen.trim()).filter(Boolean) : [],
      }));

      // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –±—É–¥—É—â–∏—Ö –ø–µ—Ä–µ—Å—á–µ—Ç–æ–≤
      setBaseProductData(prev => ({
        ...prev,
        name: editedProductData.name,
        calories: Number(editedProductData.calories) || 0,
        protein: Number(editedProductData.protein) || 0,
        fat: Number(editedProductData.fat) || 0,
        carbs: Number(editedProductData.carbs) || 0,
        sugars: Number(editedProductData.sugars) || 0,
        fiber: Number(editedProductData.fiber) || 0,
        saturatedFat: Number(editedProductData.saturatedFat) || 0
      }));

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ AsyncStorage (–∏—Å—Ç–æ—Ä–∏—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π)
      if (id) {
        // –°–æ–∑–¥–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ fullData —Å –Ω–æ–≤—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
        const updatedFullData = analysisData ? JSON.stringify({
          foodData: {
            ...analysisData,
            foodName: editedProductData.name,
            estimatedWeight: Number(editedProductData.weight) || 100,
            portionInfo: {
              ...analysisData.portionInfo,
              estimatedWeight: Number(editedProductData.weight) || 100
            },
            nutritionInfo: {
              ...analysisData.nutritionInfo,
              calories: Number(editedProductData.calories) || 0,
              protein: Number(editedProductData.protein) || 0,
              fat: Number(editedProductData.fat) || 0,
              carbs: Number(editedProductData.carbs) || 0,
              sugars: Number(editedProductData.sugars) || 0,
              fiber: Number(editedProductData.fiber) || 0,
              saturatedFat: Number(editedProductData.saturatedFat) || 0
            }
          }
        }) : undefined;

        // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
        await updateScanById(id as string, {
          name: editedProductData.name,
          calories: Number(editedProductData.calories) || 0,
          protein: Number(editedProductData.protein) || 0,
          fat: Number(editedProductData.fat) || 0,
          carbs: Number(editedProductData.carbs) || 0,
          sugar: Number(editedProductData.sugars) || 0,
          fullData: updatedFullData
        });

        console.log('üíæ –î–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ AsyncStorage –¥–ª—è ID:', id);
      }

      setIsEditingProduct(false);
      console.log('‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ (–±–µ–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è):', editedProductData);
      
      // –ù–ï –ø–æ–∫–∞–∑—ã–≤–∞–µ–º Alert –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏:', error);
      // –ù–ï –ø–æ–∫–∞–∑—ã–≤–∞–µ–º Alert –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ –¥–ª—è —Ç–∏—Ö–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    }
  };

  const handleCancelEditingProduct = () => {
    setIsEditingProduct(false);
    // –ù–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º editedProductData, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
    console.log('‚ùå –û—Ç–º–µ–Ω—è–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞');
  };

  const handleAIAnalyzeProduct = async () => {
    if (!editedProductData.name.trim()) {
      Alert.alert(t('common.error'), '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –¥–ª—è AI –∞–Ω–∞–ª–∏–∑–∞');
      return;
    }

    setIsAIAnalyzing(true);
    try {
      console.log('ü§ñ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ AI –∞–Ω–∞–ª–∏–∑:', editedProductData.name);
      
      // –ü–æ–ª—É—á–∞–µ–º userId –∏ —è–∑—ã–∫
      const { getUserId } = await import('../../services/userService');
      const userId = await getUserId();
      const currentLanguage = i18n.locale || 'en';
      
      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è webhook
      const requestData = {
        productName: editedProductData.name.trim(),
        userId: userId,
        portionSize: 'regular', // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ø–æ—Ä—Ü–∏—è
        language: currentLanguage
      };

      console.log('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ AI:', requestData);

      // URL webhook –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
      const webhookUrl = 'https://ttagent.website/webhook/a1b2c3d4-e5f6-7890-abcd-ef12345678901';
      
      // –§–æ—Ä–º–∏—Ä—É–µ–º URL —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –¥–ª—è GET –∑–∞–ø—Ä–æ—Å–∞
      const urlParams = new URLSearchParams();
      Object.entries(requestData).forEach(([key, value]) => {
        if (value !== null && value !== undefined) {
          urlParams.append(key, String(value));
        }
      });
      
      const fullUrl = `${webhookUrl}?${urlParams.toString()}`;
      console.log(`–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫: ${webhookUrl}`);
      
      const response = await fetch(fullUrl, {
        method: 'GET',
        headers: {
          'Accept': 'application/json',
        },
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const responseText = await response.text();
      console.log('–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç AI:', responseText.substring(0, 500));

      let data;
      try {
        data = JSON.parse(responseText);
      } catch (parseError) {
        throw new Error(`–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞: ${parseError}`);
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
      if (data && data.foodData) {
        const foodData = data.foodData;
        
        // –û–ë–ù–û–í–õ–Ø–ï–ú –°–û–°–¢–û–Ø–ù–ò–ï analysisData –ù–û–í–´–ú–ò –î–ê–ù–ù–´–ú–ò –û–¢ AI
        setAnalysisData({
          ...foodData,
          // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
          nutritionInfo: {
            ...foodData.nutritionInfo,
            estimatedWeight: foodData.estimatedWeight || 100
          }
        });

        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è —Å –¥–∞–Ω–Ω—ã–º–∏ –æ—Ç AI
        setEditedProductData(prev => ({
          ...prev,
          name: foodData.foodName || prev.name,
          weight: String(foodData.estimatedWeight || 100),
          calories: String(foodData.nutritionInfo?.calories || 0),
          protein: String(foodData.nutritionInfo?.protein || 0),
          fat: String(foodData.nutritionInfo?.fat || 0),
          carbs: String(foodData.nutritionInfo?.carbs || 0),
          sugars: String(foodData.nutritionInfo?.sugars || 0),
          fiber: String(foodData.nutritionInfo?.fiber || 0),
          saturatedFat: String(foodData.nutritionInfo?.saturatedFat || 0)
        }));

        // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–µ—Ä–µ—Å—á–µ—Ç–∞ (–ø—Ä–∏–≤–æ–¥–∏–º –∫ 100–≥)
        const estimatedWeight = foodData.estimatedWeight || 100;
        const baseMultiplier = 100 / estimatedWeight;
        
        setBaseProductData({
          name: foodData.foodName || editedProductData.name,
          calories: Math.round((foodData.nutritionInfo?.calories || 0) * baseMultiplier),
          protein: Math.round((foodData.nutritionInfo?.protein || 0) * baseMultiplier * 10) / 10,
          fat: Math.round((foodData.nutritionInfo?.fat || 0) * baseMultiplier * 10) / 10,
          carbs: Math.round((foodData.nutritionInfo?.carbs || 0) * baseMultiplier * 10) / 10,
          sugars: Math.round((foodData.nutritionInfo?.sugars || 0) * baseMultiplier * 10) / 10,
          fiber: Math.round((foodData.nutritionInfo?.fiber || 0) * baseMultiplier * 10) / 10,
          saturatedFat: Math.round((foodData.nutritionInfo?.saturatedFat || 0) * baseMultiplier * 10) / 10
        });

        // –û–±–Ω–æ–≤–ª—è–µ–º nutrients –Ω–∞–ø—Ä—è–º—É—é –¥–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        const currentAllergens = Array.isArray(foodData.allergens) 
          ? foodData.allergens 
          : [];
        const currentVitamins = (foodData.nutritionInfo && Array.isArray(foodData.nutritionInfo.vitamins)) 
          ? foodData.nutritionInfo.vitamins 
          : [];
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ - –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–∞–∫ –Ω–æ–≤–æ–≥–æ (–º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤), —Ç–∞–∫ –∏ —Å—Ç–∞—Ä–æ–≥–æ (—Å—Ç—Ä–æ–∫–∞) —Ñ–æ—Ä–º–∞—Ç–∞
        let processedIngredients = '';
        if (foodData.ingredients) {
          if (Array.isArray(foodData.ingredients)) {
            // –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç: –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ {name: string}
            processedIngredients = foodData.ingredients
              .map((item: any) => item && typeof item === 'object' && item.name ? item.name : item)
              .filter(Boolean)
              .join(', ');
          } else if (typeof foodData.ingredients === 'string') {
            // –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç: —Å—Ç—Ä–æ–∫–∞
            processedIngredients = foodData.ingredients;
          }
        }
        
        setNutrients({
          carbs: foodData.nutritionInfo?.carbs || 0,
          fat: foodData.nutritionInfo?.fat || 0,
          protein: foodData.nutritionInfo?.protein || 0,
          fiber: foodData.nutritionInfo?.fiber || 0,
          sugar: foodData.nutritionInfo?.sugars || 0,
          calcium: foodData.nutritionInfo?.calcium || 0,
          vitamins: currentVitamins,
          ingredients: processedIngredients,
          allergens: currentAllergens,
        });

        console.log('‚úÖ AI –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω, –¥–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
        console.log('üîÑ –ù–æ–≤—ã–π –≤–µ—Å –æ—Ç AI:', foodData.estimatedWeight);
        console.log('üîÑ –ù–æ–≤—ã–µ –Ω—É—Ç—Ä–∏–µ–Ω—Ç—ã –æ—Ç AI:', {
          calories: foodData.nutritionInfo?.calories,
          protein: foodData.nutritionInfo?.protein,
          fat: foodData.nutritionInfo?.fat,
          carbs: foodData.nutritionInfo?.carbs
        });
        console.log('üîÑ –ù–æ–≤—ã–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –æ—Ç AI:', processedIngredients);
        console.log('üîÑ –ù–æ–≤—ã–µ –≤–∏—Ç–∞–º–∏–Ω—ã –æ—Ç AI:', currentVitamins);
        // Alert.alert('–£—Å–ø–µ—Ö', 'AI –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω, –¥–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã'); // –£–±–∏—Ä–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        console.log('‚úÖ AI –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω, –¥–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
        
      } else if (data && data.error) {
        throw new Error(data.error.message || data.error.details || '–û—à–∏–±–∫–∞ AI –∞–Ω–∞–ª–∏–∑–∞');
      } else {
        throw new Error('–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞');
      }
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ AI –∞–Ω–∞–ª–∏–∑–∞:', error);
      const errorMessage = error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
      Alert.alert(t('common.error'), `–û—à–∏–±–∫–∞ AI –∞–Ω–∞–ª–∏–∑–∞: ${errorMessage}`);
    } finally {
      setIsAIAnalyzing(false);
    }
  };

  const handleWeightChange = (newWeight: string) => {
    // –ù–µ –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –µ—Å–ª–∏ –≤–µ—Å –ø—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π
    if (!newWeight || newWeight.trim() === '') {
      setEditedProductData(prev => ({
        ...prev,
        weight: newWeight
      }));
      return;
    }

    const weightNum = parseFloat(newWeight);
    if (isNaN(weightNum) || weightNum <= 0) {
      setEditedProductData(prev => ({
        ...prev,
        weight: newWeight
      }));
      return;
    }

    const baseWeight = 100; // –ë–∞–∑–æ–≤—ã–π –≤–µ—Å –¥–ª—è –ø–µ—Ä–µ—Å—á–µ—Ç–∞
    const multiplier = weightNum / baseWeight;

    // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Å–µ –Ω—É—Ç—Ä–∏–µ–Ω—Ç—ã –æ—Ç –±–∞–∑–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    setEditedProductData(prev => ({
      ...prev,
      weight: newWeight,
      calories: String(Math.round(baseProductData.calories * multiplier)),
      protein: String(Math.round(baseProductData.protein * multiplier * 10) / 10),
      fat: String(Math.round(baseProductData.fat * multiplier * 10) / 10),
      carbs: String(Math.round(baseProductData.carbs * multiplier * 10) / 10),
      sugars: String(Math.round(baseProductData.sugars * multiplier * 10) / 10),
      fiber: String(Math.round(baseProductData.fiber * multiplier * 10) / 10),
      saturatedFat: String(Math.round(baseProductData.saturatedFat * multiplier * 10) / 10)
    }));

    console.log('‚öñÔ∏è –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω—É—Ç—Ä–∏–µ–Ω—Ç—ã –¥–ª—è –≤–µ—Å–∞:', newWeight, '–≥ –æ—Ç –±–∞–∑–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π');
  };

  const imageUrl = imgKey ? getTempData(imgKey as string) : '';

  /**
   * –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ URI-–∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –æ—à–∏–±–æ–∫
   * @param encodedString - –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
   * @returns –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –∏–ª–∏ –∏—Å—Ö–æ–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
   */
  const safeDecodeURIComponent = (encodedString: string): string => {
    try {
      return decodeURIComponent(encodedString);
    } catch (error) {
      console.warn('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏ URI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—É—é —Å—Ç—Ä–æ–∫—É');
      return encodedString;
    }
  };

  const colorScheme = useColorScheme();
  const isDark = colorScheme === 'dark';
  const isRealData = useRealData === 'true';

  const [isAllergic, setIsAllergic] = useState(false);

  useEffect(() => {
    // –û—Ç–ª–∞–¥–æ—á–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –∞–ª–ª–µ—Ä–≥–µ–Ω–æ–≤
    console.log('–î–∞–Ω–Ω—ã–µ –∞–ª–ª–µ—Ä–≥–µ–Ω–æ–≤:', {
      userContextIsSafe: analysisData?.userContext?.isSafeForUser,
      allergenAnalysisIsSafe: analysisData?.allergenAnalysis?.isSafeForUser,
      userContextWarnings: analysisData?.userContext?.allergenWarnings,
      allergenAnalysisWarnings: analysisData?.allergenAnalysis?.userAllergenWarnings,
      detectedAllergens: analysisData?.allergenAnalysis?.detectedAllergens,
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–ª–ª–µ—Ä–≥–µ–Ω –ø–æ –¥–∞–Ω–Ω—ã–º –∏–∑ API –∏–ª–∏ –ø–æ –ª–æ–∫–∞–ª—å–Ω—ã–º –¥–∞–Ω–Ω—ã–º, –µ—Å–ª–∏ API –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç
    if (analysisData?.userContext?.isSafeForUser === false || analysisData?.allergenAnalysis?.isSafeForUser === false) {
      // –ï—Å–ª–∏ API —è–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ—Ç, —á—Ç–æ –ø—Ä–æ–¥—É–∫—Ç –Ω–µ–±–µ–∑–æ–ø–∞—Å–µ–Ω
      console.log('–ü—Ä–æ–¥—É–∫—Ç –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã–π (isSafeForUser: false)');  
      setIsAllergic(true);
    } else if (
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –≤ userContext (–Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç)
      (analysisData?.userContext?.allergenWarnings && 
       Array.isArray(analysisData.userContext.allergenWarnings) && 
       analysisData.userContext.allergenWarnings.length > 0) ||
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –≤ allergenAnalysis (—Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç)
      (analysisData?.allergenAnalysis?.userAllergenWarnings && 
       Array.isArray(analysisData.allergenAnalysis.userAllergenWarnings) && 
       analysisData.allergenAnalysis.userAllergenWarnings.length > 0)
    ) {
      // –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ–± –∞–ª–ª–µ—Ä–≥–µ–Ω–∞—Ö
      console.log('–ù–∞–π–¥–µ–Ω—ã –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ–± –∞–ª–ª–µ—Ä–≥–µ–Ω–∞—Ö:', 
        analysisData?.userContext?.allergenWarnings || 
        analysisData?.allergenAnalysis?.userAllergenWarnings
      );
      setIsAllergic(true);
    } else if (nutrients && nutrients.allergens && Array.isArray(nutrients.allergens)) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ –ª–æ–∫–∞–ª—å–Ω–æ–º—É —Å–ø–∏—Å–∫—É –∞–ª–ª–µ—Ä–≥–µ–Ω–æ–≤ (—É—Å—Ç–∞—Ä–µ–≤—à–∏–π –º–µ—Ç–æ–¥)
      const hasAllergen = nutrients.allergens.some((allergen: string) => 
        USER_ALLERGENS.includes(allergen)
      );
      console.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ –ª–æ–∫–∞–ª—å–Ω—ã–º –∞–ª–ª–µ—Ä–≥–µ–Ω–∞–º:', { hasAllergen, allergens: nutrients.allergens });
      setIsAllergic(hasAllergen);
    } else {
      console.log('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± –∞–ª–ª–µ—Ä–≥–µ–Ω–∞—Ö, –ø—Ä–æ–¥—É–∫—Ç —Å—á–∏—Ç–∞–µ—Ç—Å—è –±–µ–∑–æ–ø–∞—Å–Ω—ã–º');
      setIsAllergic(false);
    }
  }, [nutrients]);

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—Ö–æ–¥ –≤ —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ AI –∞–Ω–∞–ª–∏–∑–∞
  useEffect(() => {
    if (analysisData && !isEditingProduct && !shouldAutoEdit) {
      setShouldAutoEdit(true);
      handleStartEditingProduct();
      console.log('üöÄ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—Ö–æ–¥–∏–º –≤ —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ AI –∞–Ω–∞–ª–∏–∑–∞');
    }
  }, [analysisData]);

  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
  const getDisplayCalories = () => {
    if (isEditingProduct) {
      return editedProductData.calories;
    }
    // –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ–¥—É–∫—Ç –∏–∑ –¥–∞—à–±–æ—Ä–¥–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏ —Å—ä–µ–¥–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    if (fromDashboard && actualCalories) {
      return Math.round(Number(actualCalories));
    }
    // –í —Ä–µ–∂–∏–º–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ analysisData
    const value = analysisData?.nutritionInfo?.calories ?? calories;
    console.log('üîç getDisplayCalories:', { 
      isEditingProduct, 
      fromDashboard, 
      actualCalories,
      analysisDataCalories: analysisData?.nutritionInfo?.calories, 
      fallbackCalories: calories, 
      finalValue: fromDashboard && actualCalories ? Math.round(Number(actualCalories)) : value 
    });
    return value;
  };

  const getDisplayProtein = () => {
    if (isEditingProduct) {
      return editedProductData.protein;
    }
    // –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ–¥—É–∫—Ç –∏–∑ –¥–∞—à–±–æ—Ä–¥–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏ —Å—ä–µ–¥–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    if (fromDashboard && actualProtein) {
      return Number(actualProtein).toFixed(1);
    }
    // –í —Ä–µ–∂–∏–º–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ analysisData
    const value = analysisData?.nutritionInfo?.protein ?? nutrients.protein;
    console.log('üîç getDisplayProtein:', { 
      isEditingProduct, 
      fromDashboard, 
      actualProtein,
      analysisDataProtein: analysisData?.nutritionInfo?.protein, 
      nutrientsProtein: nutrients.protein, 
      finalValue: fromDashboard && actualProtein ? Number(actualProtein).toFixed(1) : value 
    });
    return value;
  };

  const getDisplayFat = () => {
    if (isEditingProduct) {
      return editedProductData.fat;
    }
    // –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ–¥—É–∫—Ç –∏–∑ –¥–∞—à–±–æ—Ä–¥–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏ —Å—ä–µ–¥–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    if (fromDashboard && actualFat) {
      return Number(actualFat).toFixed(1);
    }
    // –í —Ä–µ–∂–∏–º–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ analysisData
    const value = analysisData?.nutritionInfo?.fat ?? nutrients.fat;
    console.log('üîç getDisplayFat:', { 
      isEditingProduct, 
      fromDashboard, 
      actualFat,
      analysisDataFat: analysisData?.nutritionInfo?.fat, 
      nutrientsFat: nutrients.fat, 
      finalValue: fromDashboard && actualFat ? Number(actualFat).toFixed(1) : value 
    });
    return value;
  };

  const getDisplayCarbs = () => {
    if (isEditingProduct) {
      return editedProductData.carbs;
    }
    // –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ–¥—É–∫—Ç –∏–∑ –¥–∞—à–±–æ—Ä–¥–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏ —Å—ä–µ–¥–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    if (fromDashboard && actualCarbs) {
      return Number(actualCarbs).toFixed(1);
    }
    // –í —Ä–µ–∂–∏–º–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ analysisData
    const value = analysisData?.nutritionInfo?.carbs ?? nutrients.carbs;
    console.log('üîç getDisplayCarbs:', { 
      isEditingProduct, 
      fromDashboard, 
      actualCarbs,
      analysisDataCarbs: analysisData?.nutritionInfo?.carbs, 
      nutrientsCarbs: nutrients.carbs, 
      finalValue: fromDashboard && actualCarbs ? Number(actualCarbs).toFixed(1) : value 
    });
    return value;
  };

  const getDisplaySugar = () => {
    if (isEditingProduct) {
      return editedProductData.sugars || '0';
    }
    // –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ–¥—É–∫—Ç –∏–∑ –¥–∞—à–±–æ—Ä–¥–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏ —Å—ä–µ–¥–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    if (fromDashboard && actualSugar) {
      return Math.round(Number(actualSugar));
    }
    
    const result = Math.round(analysisData?.nutritionInfo?.sugars ?? nutrients.sugar);
    
    console.log('üçØ getDisplaySugar –æ—Ç–ª–∞–¥–∫–∞:', {
      isEditingProduct,
      fromDashboard,
      actualSugar,
      editedSugars: editedProductData.sugars,
      analysisDataSugars: analysisData?.nutritionInfo?.sugars,
      nutrientsSugar: nutrients.sugar,
      finalResult: fromDashboard && actualSugar ? Math.round(Number(actualSugar)) : result
    });
    
    return result;
  };

  const getDisplayFiber = () => {
    if (isEditingProduct) {
      return editedProductData.fiber || '0';
    }
    // –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ–¥—É–∫—Ç –∏–∑ –¥–∞—à–±–æ—Ä–¥–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏ —Å—ä–µ–¥–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    if (fromDashboard && actualFiber) {
      return Math.round(Number(actualFiber));
    }
    // –í —Ä–µ–∂–∏–º–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ analysisData
    return Math.round(analysisData?.nutritionInfo?.fiber ?? nutrients.fiber);
  };

  const getDisplaySaturatedFat = () => {
    if (isEditingProduct) {
      return editedProductData.saturatedFat || '0';
    }
    // –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ–¥—É–∫—Ç –∏–∑ –¥–∞—à–±–æ—Ä–¥–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏ —Å—ä–µ–¥–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    if (fromDashboard && actualSaturatedFat) {
      return Number(actualSaturatedFat).toFixed(1);
    }
    // –í —Ä–µ–∂–∏–º–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ analysisData
    return Math.round(analysisData?.nutritionInfo?.saturatedFat ?? 0);
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è
  const getDisplayName = () => {
    if (isEditingProduct) {
      return editedProductData.name;
    }
    // –ë–µ–∑–æ–ø–∞—Å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º foodName –µ—Å–ª–∏ —ç—Ç–æ –æ–±—ä–µ–∫—Ç
    const foodName = analysisData?.foodName;
    if (typeof foodName === 'string') {
      return foodName;
    } else if (foodName && typeof foodName === 'object') {
      return foodName.name || foodName.title || foodName.value || '';
    }
    return productName || '';
  };

  const getDisplayWeight = () => {
    if (isEditingProduct) {
      return editedProductData.weight;
    }
    // –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ–¥—É–∫—Ç –∏–∑ –¥–∞—à–±–æ—Ä–¥–∞, –≤—ã—á–∏—Å–ª—è–µ–º —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏ —Å—ä–µ–¥–µ–Ω–Ω—ã–π –≤–µ—Å
    if (fromDashboard && servingMultiplier) {
      const baseWeight = analysisData?.portionInfo?.estimatedWeight || 100;
      const actualWeight = Math.round(baseWeight * Number(servingMultiplier));
      console.log('üîç getDisplayWeight –æ—Ç –¥–∞—à–±–æ—Ä–¥–∞:', { 
        fromDashboard, 
        servingMultiplier, 
        baseWeight, 
        actualWeight 
      });
      return String(actualWeight);
    }
    return String(analysisData?.portionInfo?.estimatedWeight || analysisData?.estimatedWeight || 100);
  };

  const getDisplayPortionDescription = () => {
    // –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ–¥—É–∫—Ç –∏–∑ –¥–∞—à–±–æ—Ä–¥–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏ —Å—ä–µ–¥–µ–Ω–Ω—É—é –ø–æ—Ä—Ü–∏—é
    if (fromDashboard && servingMultiplier) {
      const baseWeight = analysisData?.portionInfo?.estimatedWeight || 100;
      const actualWeight = Math.round(baseWeight * Number(servingMultiplier));
      const baseDescription = analysisData?.portionInfo?.description || t('nutrition.portion');
      
      // –ï—Å–ª–∏ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –≤–µ—Å –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –±–∞–∑–æ–≤–æ–≥–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ —ç—Ç–æ –∏–∑–º–µ–Ω–µ–Ω–Ω–∞—è –ø–æ—Ä—Ü–∏—è
      if (Math.abs(actualWeight - baseWeight) > 1) {
        return `${t('nutrition.eatenPortion')} (${actualWeight} ${t('nutrition.gram')})`;
      } else {
        return `${baseDescription} (${actualWeight} ${t('nutrition.gram')})`;
      }
    }
    
    // –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤
    return analysisData?.portionDescription || 
           (analysisData?.portionInfo?.description ? 
             `${analysisData.portionInfo.description} ${analysisData?.portionInfo?.estimatedWeight ? 
               `(${analysisData.portionInfo.estimatedWeight} ${analysisData.portionInfo.measurementUnit || t('nutrition.gram')})` : 
               `(100 ${t('nutrition.gram')})`}` :
             `${t('nutrition.portion')} (100 ${t('nutrition.gram')})`
           );
  };

  return (
    <>
      <Stack.Screen
        options={{
          title: typeof productName === 'string' ? productName : (productName as any)?.name || 'Product',
          headerLeft: () => (
            <TouchableOpacity 
              style={[styles.headerButton, { marginLeft: 8 }]}
              onPress={() => router.back()}
            >
              <Ionicons name="chevron-back" size={26} color={isDark ? '#FFFFFF' : '#007AFF'} />
            </TouchableOpacity>
          ),
          headerRight: () => (
            <TouchableOpacity 
              style={styles.headerButton}
              onPress={() => setModalVisible(true)}
            >
              <Ionicons name="add-circle-outline" size={26} color={isDark ? '#FFFFFF' : '#007AFF'} />
            </TouchableOpacity>
          ),
        }}
      />

      <View style={[styles.mainContainer, isDark && styles.darkContainer]}>
        {/* –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥ –ø–æ–≤–µ—Ä—Ö —ç–∫—Ä–∞–Ω–∞ */}
        <TouchableOpacity 
          style={[styles.backButtonFixed, isDark && styles.backButtonFixedDark]}
          onPress={() => router.back()}
        >
          <View style={[styles.backButtonInner, isDark && styles.backButtonInnerDark]}>
            <Ionicons name="chevron-back" size={24} color={isDark ? '#FFFFFF' : '#333333'} />
          </View>
        </TouchableOpacity>

        <ScrollView style={styles.scrollView} contentContainerStyle={styles.scrollViewContent}>
          {analysisData ? (
            // Display based on analysisData (from n8n or direct scan)
            <View style={styles.analysisContainer}>
              <View style={styles.resultImageContainer}>
                {imageUrl ? (
                  <Image 
                    source={{ uri: imageUrl }} 
                    style={styles.resultImage} 
                    contentFit="cover"
                    cachePolicy="memory-disk"
                    transition={200}
                  />
                ) : (
                  <View style={[styles.placeholderImage, isDark && styles.darkPlaceholder]}>
                    <Ionicons name="image-outline" size={60} color={isDark ? "#333" : "#DDD"} />
                  </View>
                )}
              </View>
              
              {/* –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π –±–ª–æ–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ */}
              <View style={[
                styles.nutrientCard, 
                isDark && styles.darkCard,
                isEditingProduct && styles.unifiedProductCardEditing
              ]}>
                {/* –ò–∫–æ–Ω–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
                {isEditingProduct ? (
                  <View style={styles.editControlButtons}>
                    <TouchableOpacity
                      style={[styles.editButton, isDark && styles.darkEditButton]}
                      onPress={handleSaveEditingProductSilent}
                    >
                      <Ionicons name="checkmark" size={16} color={isDark ? "#888888" : "#666666"} />
                    </TouchableOpacity>
                    <TouchableOpacity
                      style={[styles.editButton, isDark && styles.darkEditButton]}
                      onPress={handleAIAnalyzeProduct}
                      disabled={isAIAnalyzing}
                    >
                      {isAIAnalyzing ? (
                        <ActivityIndicator size="small" color={isDark ? "#888888" : "#666666"} />
                      ) : (
                        <Ionicons name="sparkles" size={16} color={isDark ? "#888888" : "#666666"} />
                      )}
                    </TouchableOpacity>
                    <TouchableOpacity
                      style={[styles.editButton, isDark && styles.darkEditButton]}
                      onPress={handleCancelEditingProduct}
                    >
                      <Ionicons name="close" size={16} color={isDark ? "#888888" : "#666666"} />
                    </TouchableOpacity>
                  </View>
                ) : (
                  <TouchableOpacity
                    style={styles.editControlButtons}
                    onPress={handleStartEditingProduct}
                  >
                    <View style={[styles.editButton, isDark && styles.darkEditButton]}>
                      <Ionicons name="pencil" size={16} color={isDark ? "#888888" : "#666666"} />
                    </View>
                  </TouchableOpacity>
                )}

                {/* –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ */}
                <View style={styles.productNameSection}>
                  {isEditingProduct ? (
                    <TextInput
                      style={[styles.nameInput, isDark && styles.darkInput]}
                      value={editedProductData.name}
                      onChangeText={(text) => setEditedProductData(prev => ({ ...prev, name: text }))}
                      placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞"
                      placeholderTextColor={isDark ? '#666' : '#999'}
                    />
                  ) : (
                    <Text 
                      style={[styles.foodName, isDark && { color: '#FFF' }]}
                      numberOfLines={2}
                      ellipsizeMode="tail"
                    >
                      {getDisplayName()}
                    </Text>
                  )}
                </View>

                {/* –û–ø–∏—Å–∞–Ω–∏–µ –ø–æ—Ä—Ü–∏–∏ */}
                <View style={[styles.portionContainer, isDark && styles.darkPortionContainer]}>
                  <Text style={[styles.portionText, isDark && styles.darkText]}>
                    {getDisplayPortionDescription()}
                  </Text>
                </View>

                {/* –ü–æ–ª–µ –≤–µ—Å–∞ */}
                <View style={styles.weightContainer}>
                  <Text style={[styles.weightLabel, isDark && styles.darkText]}>
                    {t('nutrition.estimatedWeight')}:
                  </Text>
                  {isEditingProduct ? (
                    <View style={styles.weightInputContainer}>
                      <TextInput
                        style={[styles.weightInput, isDark && styles.darkInput]}
                        value={editedProductData.weight}
                        onChangeText={handleWeightChange}
                        keyboardType="numeric"
                        placeholder="100"
                        placeholderTextColor={isDark ? '#666' : '#999'}
                      />
                      <Text style={[styles.weightUnit, isDark && styles.darkText]}>{t('nutrition.gram')}</Text>
                    </View>
                  ) : (
                    <Text style={[styles.weightValue, isDark && styles.darkText]}>
                      {getDisplayWeight()} {t('nutrition.gram')}
                    </Text>
                  )}
                </View>

                {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–∏—â–µ–≤–æ–π —Ü–µ–Ω–Ω–æ—Å—Ç–∏ */}
                <View style={styles.cardHeader}>
                  <Ionicons name="nutrition-outline" size={22} color={isDark ? '#FFFFFF' : '#FF9500'} />
                  <Text style={[styles.sectionTitle, isDark && styles.darkText, styles.sectionTitleWithIcon]}>
                    {t('nutrition.nutritionalValue')}
                  </Text>
                </View>

                {/* –ù—É—Ç—Ä–∏–µ–Ω—Ç—ã —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è */}
                {/* –ö–∞–ª–æ—Ä–∏–∏ */}
                <View style={[styles.nutritionItem, isDark && styles.darkNutritionItem]}>
                  <Text style={[styles.nutritionLabel, isDark && styles.darkText]}>{t('nutrition.calories')}:</Text>
                  {isEditingProduct ? (
                    <TextInput
                      style={[styles.nutritionInput, isDark && styles.darkInput]}
                      value={editedProductData.calories}
                      onChangeText={(text) => setEditedProductData(prev => ({ ...prev, calories: text }))}
                      keyboardType="numeric"
                      placeholder="0"
                      placeholderTextColor={isDark ? '#666' : '#999'}
                    />
                  ) : (
                    <Text style={[styles.nutritionValue, isDark && styles.darkText]}>
                      {getDisplayCalories()} {t('nutrition.kcal')}
                    </Text>
                  )}
                </View>

                {/* –ë–µ–ª–∫–∏ */}
                <View style={[styles.nutritionItem, isDark && styles.darkNutritionItem]}>
                  <Text style={[styles.nutritionLabel, isDark && styles.darkText]}>{t('nutrition.protein')}:</Text>
                  {isEditingProduct ? (
                    <TextInput
                      style={[styles.nutritionInput, isDark && styles.darkInput]}
                      value={editedProductData.protein}
                      onChangeText={(text) => setEditedProductData(prev => ({ ...prev, protein: text }))}
                      keyboardType="numeric"
                      placeholder="0"
                      placeholderTextColor={isDark ? '#666' : '#999'}
                    />
                  ) : (
                    <Text style={[styles.nutritionValue, isDark && styles.darkText]}>
                      {getDisplayProtein()} {t('nutrition.gram')}
                    </Text>
                  )}
                </View>

                {/* –ñ–∏—Ä—ã */}
                <View style={[styles.nutritionItem, isDark && styles.darkNutritionItem]}>
                  <Text style={[styles.nutritionLabel, isDark && styles.darkText]}>{t('nutrition.fats')}:</Text>
                  {isEditingProduct ? (
                    <TextInput
                      style={[styles.nutritionInput, isDark && styles.darkInput]}
                      value={editedProductData.fat}
                      onChangeText={(text) => setEditedProductData(prev => ({ ...prev, fat: text }))}
                      keyboardType="numeric"
                      placeholder="0"
                      placeholderTextColor={isDark ? '#666' : '#999'}
                    />
                  ) : (
                    <Text style={[styles.nutritionValue, isDark && styles.darkText]}>
                      {getDisplayFat()} {t('nutrition.gram')}
                    </Text>
                  )}
                </View>

                {/* –£–≥–ª–µ–≤–æ–¥—ã */}
                <View style={[styles.nutritionItem, isDark && styles.darkNutritionItem]}>
                  <Text style={[styles.nutritionLabel, isDark && styles.darkText]}>{t('nutrition.carbs')}:</Text>
                  {isEditingProduct ? (
                    <TextInput
                      style={[styles.nutritionInput, isDark && styles.darkInput]}
                      value={editedProductData.carbs}
                      onChangeText={(text) => setEditedProductData(prev => ({ ...prev, carbs: text }))}
                      keyboardType="numeric"
                      placeholder="0"
                      placeholderTextColor={isDark ? '#666' : '#999'}
                    />
                  ) : (
                    <Text style={[styles.nutritionValue, isDark && styles.darkText]}>
                      {getDisplayCarbs()} {t('nutrition.gram')}
                    </Text>
                  )}
                </View>

                {/* –°–∞—Ö–∞—Ä–∞ */}
                {(nutrients.sugar > 0 || isEditingProduct) && (
                  <View style={[styles.nutritionItem, isDark && styles.darkNutritionItem]}>
                    <Text style={[styles.nutritionLabel, isDark && styles.darkText]}>{t('nutrition.sugars')}:</Text>
                    {isEditingProduct ? (
                      <TextInput
                        style={[styles.nutritionInput, isDark && styles.darkInput]}
                        value={editedProductData.sugars}
                        onChangeText={(text) => setEditedProductData(prev => ({ ...prev, sugars: text }))}
                        keyboardType="numeric"
                        placeholder="0"
                        placeholderTextColor={isDark ? '#666' : '#999'}
                      />
                    ) : (
                      <Text style={[styles.nutritionValue, isDark && styles.darkText]}>
                        {getDisplaySugar()} {t('nutrition.gram')}
                      </Text>
                    )}
                  </View>
                )}

                {/* –ö–ª–µ—Ç—á–∞—Ç–∫–∞ */}
                {(nutrients.fiber > 0 || isEditingProduct) && (
                  <View style={[styles.nutritionItem, isDark && styles.darkNutritionItem]}>
                    <Text style={[styles.nutritionLabel, isDark && styles.darkText]}>{t('nutrition.fiber')}:</Text>
                    {isEditingProduct ? (
                      <TextInput
                        style={[styles.nutritionInput, isDark && styles.darkInput]}
                        value={editedProductData.fiber}
                        onChangeText={(text) => setEditedProductData(prev => ({ ...prev, fiber: text }))}
                        keyboardType="numeric"
                        placeholder="0"
                        placeholderTextColor={isDark ? '#666' : '#999'}
                      />
                    ) : (
                      <Text style={[styles.nutritionValue, isDark && styles.darkText]}>
                        {getDisplayFiber()} {t('nutrition.gram')}
                      </Text>
                    )}
                  </View>
                )}

                {/* –ù–∞—Å—ã—â–µ–Ω–Ω—ã–µ –∂–∏—Ä—ã */}
                {(analysisData?.nutritionInfo?.saturatedFat > 0 || isEditingProduct) && (
                  <View style={[styles.nutritionItem, isDark && styles.darkNutritionItem]}>
                    <Text style={[styles.nutritionLabel, isDark && styles.darkText]}>{t('nutrition.saturatedFat')}:</Text>
                    {isEditingProduct ? (
                      <TextInput
                        style={[styles.nutritionInput, isDark && styles.darkInput]}
                        value={editedProductData.saturatedFat}
                        onChangeText={(text) => setEditedProductData(prev => ({ ...prev, saturatedFat: text }))}
                        keyboardType="numeric"
                        placeholder="0"
                        placeholderTextColor={isDark ? '#666' : '#999'}
                      />
                    ) : (
                      <Text style={[styles.nutritionValue, isDark && styles.darkText]}>
                        {getDisplaySaturatedFat()} {t('nutrition.gram')}
                      </Text>
                    )}
                  </View>
                )}

                {/* –î–∏—Å–∫–ª–µ–π–º–µ—Ä –æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –ø–æ—Ä—Ü–∏–∏ */}
                <Text style={[styles.disclaimerText, isDark && styles.darkTextSecondary]}>
                  {t('nutrition.disclaimerPortionStandard')}
                </Text>
              </View>
              
              {/* –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ–± –∞–ª–ª–µ—Ä–≥–µ–Ω–∞—Ö –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ API */}
              {((analysisData?.userContext?.allergenWarnings && analysisData.userContext.allergenWarnings.length > 0) || 
                (analysisData?.allergenAnalysis?.userAllergenWarnings && analysisData.allergenAnalysis.userAllergenWarnings.length > 0)) ? (
                <View style={[styles.allergenWarningContainer, isDark && styles.darkAllergenWarningContainer, {marginTop: 18}]}>
                  <View style={styles.allergenWarningHeader}>
                    <Ionicons name="alert-circle" size={24} color="#FFFFFF" />
                    <Text style={styles.allergenWarningTitle}>{t('allergens.warningTitle')}</Text>
                  </View>
                  {/* –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–∞ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –º–µ—Å—Ç–∞ —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π */}
                  {analysisData?.userContext?.allergenWarnings && analysisData.userContext.allergenWarnings.map((warning: {message?: string, allergenName?: string, allergenId?: string}, index: number) => (
                    <Text key={`ctx-${index}`} style={styles.allergenWarningText}>
                      ‚Ä¢ {warning.message || `${t('allergens.contains')} ${warning.allergenName || warning.allergenId}`}
                    </Text>
                  ))}
                  {analysisData?.allergenAnalysis?.userAllergenWarnings && analysisData.allergenAnalysis.userAllergenWarnings.map((warning: {message?: string, allergenName?: string, allergenId?: string}, index: number) => (
                    <Text key={`analysis-${index}`} style={styles.allergenWarningText}>
                      ‚Ä¢ {warning.message || `${t('allergens.contains')} ${warning.allergenName || warning.allergenId}`}
                    </Text>
                  ))}
                  <Text style={styles.allergenWarningNote}>
                    {t('allergens.notSafeMessage')}
                  </Text>
                </View>
              ) : isAllergic && (
                <View style={[styles.allergenWarningContainer, isDark && styles.darkAllergenWarningContainer]}>
                  <View style={styles.allergenWarningHeader}>
                    <Ionicons name="alert-circle" size={24} color="#FFFFFF" />
                    <Text style={styles.allergenWarningTitle}>{t('allergens.warningTitle')}</Text>
                  </View>
                  <Text style={styles.allergenWarningText}>
                    {t('allergens.contains')}: {nutrients.allergens.filter((a: string) => USER_ALLERGENS.includes(a)).join(', ')}
                  </Text>
                </View>
              )}

              {/* –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –≤ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–º –¥–∏–∑–∞–π–Ω–µ */}
              {nutrients.ingredients && (
                  <View style={[styles.nutrientCard, isDark && styles.darkCard,{marginTop: 18}]}>
                      <View style={styles.cardHeader}>
                          <Ionicons name="list-outline" size={22} color={isDark ? '#FFFFFF' : '#333333'} />
                          <Text style={[styles.sectionTitle, isDark && styles.darkText, styles.sectionTitleWithIcon]}>
                              {t('product.ingredients')}
                          </Text>
                      </View>
                      <Text style={[styles.ingredientsText, isDark && styles.darkTextSecondary]}>
                          {nutrients.ingredients}
                      </Text>
                  </View>
              )}
              
              {/* –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Å –æ–±—â–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –∞–ª–ª–µ—Ä–≥–µ–Ω–∞—Ö */}
              {analysisData?.allergenAnalysis?.detectedAllergens && 
               analysisData.allergenAnalysis.detectedAllergens.length > 0 && (
                <View style={[styles.generalAllergenInfoContainer, isDark && styles.darkGeneralAllergenInfoContainer, {marginTop: 18}]}>
                  <View style={styles.generalAllergenInfoHeader}>
                    <Ionicons name="information-circle" size={24} color="#FFFFFF" />
                    <Text style={styles.generalAllergenInfoTitle}>{t('allergens.generalInfoTitle') || 'Allergen Information'}</Text>
                  </View>
                  <Text style={styles.generalAllergenInfoText}>
                    {t('allergens.generalInfoMessage') || 'This product contains the following allergens:'}
                  </Text>
                  <View style={styles.allergensListContainer}>
                    {analysisData.allergenAnalysis.detectedAllergens
                      .filter((allergen: any) => 
                        // –§–∏–ª—å—Ç—Ä—É–µ–º, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∞–ª–ª–µ—Ä–≥–µ–Ω—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –≤—ã–∑–≤–∞–ª–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        !analysisData?.userContext?.allergenWarnings?.some(
                          (warning: any) => warning.allergenId === allergen.allergenId
                        )
                      )
                      .map((allergen: any, index: number) => {
                        const allergenName = typeof allergen.name === 'string' ? allergen.name : 
                          (allergen.name?.name || allergen.name?.title || 'Unknown allergen');
                        const sourceIngredient = typeof allergen.sourceIngredient === 'string' ? allergen.sourceIngredient :
                          (allergen.sourceIngredient?.name || allergen.sourceIngredient?.title || '');
                        return (
                          <Text key={index} style={styles.generalAllergenInfoText}>
                            ‚Ä¢ {allergenName} {sourceIngredient ? 
                              `(${t('allergens.foundIn') || 'found in'} ${sourceIngredient})` : ''}
                          </Text>
                        );
                      })}
                  </View>
                </View>
              )}
              
              {/* –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç–∞ - –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º–∞—Ö —Å–æ –∑–¥–æ—Ä–æ–≤—å–µ–º */}
              {((analysisData?.analysis?.healthConcerns && 
                analysisData.analysis.healthConcerns.length > 0) || 
                (analysisData?.analysis?.healthBenefits && 
                analysisData.analysis.healthBenefits.length > 0)) && (
                <View style={[styles.nutrientCard, isDark && styles.darkCard, {marginTop: 18}]}>
                  <View style={styles.cardHeader}>
                    <Ionicons name="information-circle-outline" size={22} color={isDark ? '#FFFFFF' : '#333333'} />
                    <Text style={[styles.sectionTitle, isDark && styles.darkText, styles.sectionTitleWithIcon]}>
                      {t('product.productFeatures')}
                    </Text>
                  </View>
                  <View style={styles.allergensListContainer}>
                    {analysisData?.analysis?.healthConcerns?.map((concern: any, index: number) => {
                      console.log(`Health Concern ${index}:`, concern);
                      return (
                        <View key={`concern-${index}`} style={styles.featureItem}>
                          <Ionicons name="alert-outline" size={16} color={isDark ? '#FF6B6B' : '#FF4040'} style={{marginRight: 6}} />
                          <Text style={[styles.ingredientsText, isDark && styles.darkTextSecondary]}>
                            {typeof concern === 'string' ? concern : concern?.name || concern?.description || 'Unknown concern'}
                          </Text>
                        </View>
                      );
                    })}
                    
                    {analysisData?.analysis?.healthBenefits?.map((benefit: any, index: number) => {
                      console.log(`Health Benefit ${index}:`, benefit);
                      return (
                        <View key={`benefit-${index}`} style={styles.featureItem}>
                          <Ionicons name="checkmark-circle-outline" size={16} color={isDark ? '#06D6A0' : '#00A36C'} style={{marginRight: 6}} />
                          <Text style={[styles.ingredientsText, isDark && styles.darkTextSecondary]}>
                            {typeof benefit === 'string' ? benefit : benefit?.name || benefit?.description || 'Unknown benefit'}
                          </Text>
                        </View>
                      );
                    })}
                  </View>
                </View>
              )}
              

              {/* –í–∏—Ç–∞–º–∏–Ω—ã –≤ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–º –º–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω–æ–º –¥–∏–∑–∞–π–Ω–µ */}
              {nutrients.vitamins && nutrients.vitamins.length > 0 && (
                  <View style={[styles.nutrientCard, isDark && styles.darkCard,{marginTop: 18}]}>
                      <View style={styles.cardHeader}>
                          <Ionicons name="medical-outline" size={22} color={isDark ? '#FFFFFF' : '#333333'} />
                          <Text style={[styles.sectionTitle, isDark && styles.darkText, styles.sectionTitleWithIcon]}>
                              {t('product.vitamins')}
                          </Text>
                      </View>
                      <View style={styles.vitaminContainer}>
                          {nutrients.vitamins.map((vitamin: any, index: number) => (
                              <View key={index} style={styles.vitaminBadge}>
                                  <Text style={[styles.vitaminBadgeText, isDark && styles.darkVitaminText]}>
                                    {typeof vitamin === 'string' ? vitamin : vitamin?.name || vitamin?.title || 'Unknown vitamin'}
                                  </Text>
                              </View>
                          ))}
                      </View>
                  </View>
              )}
              
              {nutrients.allergens && nutrients.allergens.length > 0 && !isAllergic && (
                   <View style={[styles.nutrientCard, isDark && styles.darkCard]}>
                      <View style={styles.cardHeader}>
                          <Ionicons name="alert-circle-outline" size={22} color={isDark ? '#FFFFFF' : '#333333'} />
                          <Text style={[styles.sectionTitle, isDark && styles.darkText, styles.sectionTitleWithIcon]}>{t('allergens.title')}</Text>
                      </View>
                      <View style={styles.allergensListContainer}>
                        {nutrients.allergens.map((allergen: any, index: number) => {
                          const allergenName = typeof allergen === 'string' ? allergen : allergen?.name || allergen?.title || 'Unknown allergen';
                          return (
                            <View 
                              key={index} 
                              style={[
                                styles.allergenItem, 
                                USER_ALLERGENS.includes(allergenName) && styles.dangerAllergen
                              ]}
                            >     
                              <Ionicons 
                                name={USER_ALLERGENS.includes(allergenName) ? "warning-outline" : "information-circle-outline"} 
                                size={14} 
                                color={USER_ALLERGENS.includes(allergenName) ? "#F44336" : "#FF9800"} 
                                style={{marginRight: 4}} 
                              />
                              <Text 
                                style={[
                                  styles.allergenName, 
                                  USER_ALLERGENS.includes(allergenName) && styles.dangerAllergenText
                                ]}
                              >
                                {allergenName}
                              </Text>
                            </View>
                          );
                        })}
                      </View>
                    </View>
              )}

              {/* –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –û—Ü–µ–Ω–∫–∞ –∏ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ */}
              {analysisData?.analysis?.overallHealthScore && (
                  <View style={styles.scoreContainer}>
                      <Text style={[styles.sectionTitle, isDark && styles.darkText]}>
                          {t('nutrition.overallHealthScore')}:{' '}
                          <Text style={styles.calorieValue}> 
                              {analysisData.analysis.overallHealthScore}/100
                          </Text>
                      </Text>
                  </View>
              )}
              
              {analysisData.recommendedIntake && (
                <View style={[styles.nutrientCard, isDark && styles.darkCard, {marginTop: 18}]}>
                  <View style={styles.cardHeader}>
                    <Ionicons name="information-circle-outline" size={22} color={isDark ? '#FFFFFF' : '#333333'} />
                    <Text style={[styles.sectionTitle, isDark && styles.darkText, styles.sectionTitleWithIcon]}>
                      {t('nutrition.recommendations')}
                    </Text>
                  </View>
                  <Text style={[styles.ingredientsText, isDark && styles.darkTextSecondary]}>
                    {analysisData.recommendedIntake.description}
                  </Text>
                  {analysisData.recommendedIntake.maxFrequency && (
                    <Text style={[styles.ingredientsText, isDark && styles.darkTextSecondary, {marginTop: 8}]}>
                      <Text style={{fontWeight: '500'}}>{t('nutrition.frequency')}:</Text> {analysisData.recommendedIntake.maxFrequency}
                    </Text>
                  )}
                </View>
              )}
            </View>
          ) : (
            // Fallback display (similar to original, using MOCK_NUTRIENTS or params if !isRealData)
            <View style={styles.analysisContainer}>
              <View style={styles.imageContainer}>
                {imageUrl ? (
                  <Image 
                    source={{ uri: imageUrl }} 
                    style={styles.productImage} 
                    contentFit="cover"
                    cachePolicy="memory-disk"
                    transition={200}
                  />
                ) : (
                  <View style={[styles.placeholderImage, isDark && styles.darkPlaceholder]}>
                    <Ionicons name="image-outline" size={60} color={isDark ? "#333" : "#DDD"} />
                  </View>
                )}
              </View>
              
              <Text 
                style={styles.foodName}
                numberOfLines={2}
                ellipsizeMode="tail"
              >
                {typeof productName === 'string' ? productName : (productName as any)?.name || (productName as any)?.title || 'Unknown product'}
              </Text>
              
              <View style={styles.portionContainer}>
                <Text style={[styles.portionText, isDark && styles.darkText]}>
                  {getDisplayPortionDescription()}
                </Text>
              </View>
              <View style={styles.nutrientCard}>
                <View style={styles.calorieSection}>
                  <Text style={styles.calorieTitle}>{t('product.calories')}</Text>
                  <Text style={styles.calorieValue}>{getDisplayCalories()}</Text>
                </View>
                <View style={styles.divider} />
                <View style={styles.nutritionItem}>
                  <Text style={styles.nutritionLabel}>{t('product.protein')}</Text>
                  <Text style={styles.nutritionValue}>{getDisplayProtein()}</Text>
                </View>
                <View style={styles.nutritionItem}>
                  <Text style={styles.nutritionLabel}>{t('product.fat')}</Text>
                  <Text style={styles.nutritionValue}>{getDisplayFat()}</Text>
                </View>
                <View style={styles.nutritionItem}>
                  <Text style={styles.nutritionLabel}>{t('product.carbs')}</Text>
                  <Text style={styles.nutritionValue}>{getDisplayCarbs()}</Text>
                </View>
              </View>
              {isAllergic && (
                <View style={[styles.allergenWarningContainer, isDark && styles.darkAllergenWarningContainer]}>
                  <View style={styles.allergenWarningHeader}>
                    <Ionicons name="alert-circle" size={24} color="#FFFFFF" />
                    <Text style={styles.allergenWarningTitle}>{t('allergens.warningTitle')}</Text>
                  </View>
                  <Text style={styles.allergenWarningText}>
                    {t('allergens.contains')}: {nutrients.allergens.filter((a: string) => USER_ALLERGENS.includes(a)).join(', ')}
                  </Text>
                </View>
              )}
              
              {/* –ë–ï–ó–û–ü–ê–°–ù–´–ô FALLBACK –†–ï–ù–î–ï–† - —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –¥–∏–∑–∞–π–Ω–∞ */}
              {!analysisData && (
                <View style={styles.infoCard}>
                  <Text style={styles.ingredientsText}>{t('product.ingredients') || 'Ingredients'}</Text>
                  
                  {/* –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–µ–Ω–¥–µ—Ä –≤–∏—Ç–∞–º–∏–Ω–æ–≤ */}
                  {nutrients.vitamins && Array.isArray(nutrients.vitamins) && nutrients.vitamins.length > 0 && (
                    <View style={styles.vitaminsList}>
                      {nutrients.vitamins.map((vitamin: any, index: number) => {
                        // –î–≤–æ–π–Ω–∞—è –∑–∞—â–∏—Ç–∞ –æ—Ç –æ–±—ä–µ–∫—Ç–æ–≤
                        let vitaminText = 'Unknown vitamin';
                        if (typeof vitamin === 'string') {
                          vitaminText = vitamin;
                        } else if (vitamin && typeof vitamin === 'object') {
                          vitaminText = vitamin.name || vitamin.title || vitamin.value || 'Unknown vitamin';
                        }
                        
                        return (
                          <View key={`fallback-vitamin-${index}`} style={styles.vitaminItem}>
                            <Ionicons name="checkmark-circle-outline" size={16} color="#4CAF50" />
                            <Text style={[styles.vitaminName, isDark && styles.darkText]}>
                              {String(vitaminText)}
                            </Text>
                          </View>
                        );
                      })}
                    </View>
                  )}
                  
                  {/* –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–µ–Ω–¥–µ—Ä –∞–ª–ª–µ—Ä–≥–µ–Ω–æ–≤ */}
                  {nutrients.allergens && Array.isArray(nutrients.allergens) && nutrients.allergens.length > 0 && (
                    <View style={styles.allergensListContainer}>
                      {nutrients.allergens.map((allergen: any, index: number) => {
                        // –î–≤–æ–π–Ω–∞—è –∑–∞—â–∏—Ç–∞ –æ—Ç –æ–±—ä–µ–∫—Ç–æ–≤
                        let allergenText = 'Unknown allergen';
                        if (typeof allergen === 'string') {
                          allergenText = allergen;
                        } else if (allergen && typeof allergen === 'object') {
                          allergenText = allergen.name || allergen.title || allergen.value || 'Unknown allergen';
                        }
                        
                        const allergenName = String(allergenText);
                        return (
                          <View key={`fallback-allergen-${index}`} style={styles.allergenItem}>
                            <Ionicons 
                              name={USER_ALLERGENS.includes(allergenName) ? "alert-circle-outline" : "information-circle-outline"} 
                              size={16} 
                              color={USER_ALLERGENS.includes(allergenName) ? "#FF6B6B" : "#999999"} 
                            />
                            <Text style={[styles.allergenName, isDark && styles.darkText]}>
                              {allergenName}
                            </Text>
                          </View>
                        );
                      })}
                    </View>
                  )}
                </View>
              )}
              {(scanDate || date) && (
                <View style={[styles.scanInfoContainerBottom, isDark && styles.darkScanInfoContainer]}>
                  <Text style={[styles.scanDateText, isDark && styles.darkText]}>
                    {scanDate && date ? `${scanDate} ‚Ä¢ ${date}` : scanDate || date}
                  </Text>
                </View>
              )}
            </View>
          )}
            
          <View style={styles.bottomPadding} />
        </ScrollView>

        <View style={[styles.fixedButtonContainer, isDark && styles.darkFixedButtonContainer]}>
          <TouchableOpacity 
            style={styles.photoButton}
            onPress={() => router.push('/scan')}
          >
            <View style={{flexDirection: 'row', alignItems: 'center', justifyContent: 'center'}}>
              <Ionicons name="camera-outline" size={22} color="#FFFFFF" style={{marginRight: 8}} />
              <Text style={{color: '#FFFFFF', fontSize: 16, fontWeight: '600'}}>{t('tabs.scan')}</Text>
            </View>
          </TouchableOpacity>
          
          <TouchableOpacity 
            style={styles.addButton}
            onPress={() => {
              setModalVisible(true); // Show modal
            }}
          >
            <View style={{flexDirection: 'row', alignItems: 'center', justifyContent: 'center'}}>
              <Ionicons name="add-outline" size={22} color="#FFFFFF" style={{marginRight: 8}} />
              <Text style={{color: '#FFFFFF', fontSize: 16, fontWeight: '600'}}>{t('product.add')}</Text>
            </View>
          </TouchableOpacity>
        </View>
      </View>

      {/* u0418u0441u043fu0440u0430u043du0438u044f u043fu043eu0440u044fu0434u043eu043a u043eu0431u044au044fu0432u043bu0435u043du0438u044f u0444u0443u043du043au0446u0438u0438 u0438 u0434u043eu0431u0430u0432u043bu044fu044u043eu0434u043eu043a u0438u043cu043fu043eu0440u0442 u043au043eu043cu043fu043eu043du0435u043du0442u0430 */}
      <PortionSizeModal
        visible={modalVisible}
        onClose={() => setModalVisible(false)}
        onConfirm={handlePortionConfirm}
        productName={typeof productName === 'string' ? productName : (productName as any)?.name || 'Product'}
      />
     {/* –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ –¥–Ω–µ–≤–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É */}
    </>
  );
  

}

const styles = StyleSheet.create({
    // –û—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç–∏–ª–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
  mainContainer: {
    flex: 1,
    backgroundColor: '#F8F9FA', 
  },
  darkContainer: {
    backgroundColor: '#121212', 
  },
  scrollView: {
    flex: 1,
  },
  scrollViewContent: {
    paddingBottom: 40, 
  },
  safeTopArea: {
    height: 50,
    width: '100%',
    position: 'relative',
    zIndex: 10,
  },
  backButton: {
    position: 'absolute',
    left: 20,
    top: 54,
    zIndex: 20,
  },
  backButtonFixed: {
    position: 'absolute',
    left: 20,
    top: 60,
    zIndex: 100,
  },
  backButtonFixedDark: {
    // Dark mode styles if needed
  },
  backButtonInner: {
    alignItems: 'center',
    justifyContent: 'center',
    padding: 5,
    backgroundColor: 'rgba(240, 240, 240, 0.7)',
    borderRadius: 20,
    width: 40,
    height: 40,
  },
  backButtonInnerDark: {
    backgroundColor: 'rgba(60, 60, 60, 0.9)',
  },
  bottomPadding: {
    height: 80, 
  },
  imageContainer: {
    width: '100%',
    height: 250, 
    alignItems: 'center',
    justifyContent: 'center',
    backgroundColor: '#E0E0E0',
    marginBottom: 16,
  },
  productImage: {
    width: '100%',
    height: '100%',
  },
  placeholderImage: {
    width: '100%',
    height: '100%',
    alignItems: 'center',
    justifyContent: 'center',
    backgroundColor: '#EEEEEE',
  },
  darkPlaceholder: {
    backgroundColor: '#2C2C2E',
  },
  analysisContainer: {
    paddingHorizontal: 16,
    paddingBottom: 16,
    paddingTop: 56,
  },
  resultImageContainer: {
    width: '100%',
    height: 250,
    borderRadius: 16,
    overflow: 'hidden',
    marginBottom: 20,
    backgroundColor: '#e0e0e0', 
  },
  resultImage: {
    width: '100%',
    height: '100%',
  },
  foodName: {
    fontSize: 24,
    fontWeight: 'bold',
    textAlign: 'center',
    marginBottom: 12,
    color: '#333',
    letterSpacing: -0.5,
    paddingHorizontal: 10,
  },
  portionContainer: {
    backgroundColor: '#f0f0f0',
    paddingVertical: 10,
    paddingHorizontal: 16,
    borderRadius: 10,
    marginBottom: 0,
    alignItems: 'center',
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.05,
    shadowRadius: 1,
    elevation: 1,
  },
  darkPortionContainer: {
    backgroundColor: '#333333', // –¢–µ–º–Ω—ã–π —Ñ–æ–Ω –¥–ª—è —Ç–µ–º–Ω–æ–π —Ç–µ–º—ã
  },
  portionText: {
    fontSize: 15,
    color: '#555',
    textAlign: 'center',
  },
  // –ù–æ–≤—ã–π —Å—Ç–∏–ª—å –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫ —Å –Ω—É—Ç—Ä–∏–µ–Ω—Ç–∞–º–∏
  nutrientCard: {
    backgroundColor: '#FFFFFF',
    borderRadius: 12,
    padding: 16,
    marginTop: 0,
    marginBottom: 0,
    shadowColor: '#000',
    shadowOffset: {
      width: 0,
      height: 2,
    },
    shadowOpacity: 0,
    shadowRadius: 0,
    elevation: 0, // –£–±—Ä–∞–ª–∏ elevation –ø–æ–ª–Ω–æ—Å—Ç—å—é
    borderWidth: 1, // –î–æ–±–∞–≤–∏–ª–∏ —Ç–æ–Ω–∫—É—é —Ä–∞–º–∫—É –≤–º–µ—Å—Ç–æ —Ç–µ–Ω–∏
    borderColor: '#d8d8d8', // –°–¥–µ–ª–∞–ª–∏ —Ä–∞–º–∫—É —Ç–µ–º–Ω–µ–µ –¥–ª—è –ª—É—á—à–µ–π –≤–∏–¥–∏–º–æ—Å—Ç–∏
  },
  darkCard: {
    backgroundColor: 'transparent', // –£–±—Ä–∞–ª–∏ —Ñ–æ–Ω –¥–ª—è –º–∏–Ω–∏–º–∞–ª–∏–∑–º–∞
    borderColor: '#4a4a4c', // –°–¥–µ–ª–∞–ª–∏ —Ä–∞–º–∫—É –∑–∞–º–µ—Ç–Ω–µ–µ –¥–ª—è —Ç–µ–º–Ω–æ–π —Ç–µ–º—ã
  },
  darkText: {
    color: '#FFFFFF', 
  },
  darkTextSecondary: {
    color: '#AEAEB2', 
  },
  cardHeader: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 10, // –£–º–µ–Ω—å—à–∏–ª–∏ —Å 14 –¥–æ 10
  },
  sectionTitle: {
    fontSize: 18,
    fontWeight: '600',
    marginBottom: 12,
    color: '#333333',
  },
  sectionTitleWithIcon: {
    marginLeft: 8,
    marginBottom: 0,
  },
  calorieSection: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 12,
  },
  calorieTitle: {
    fontSize: 16,
    color: '#555555',
  },
  calorieValue: {
    fontSize: 20,
    fontWeight: 'bold',
    color: '#FF9500',
  },
  divider: {
    height: 1,
    backgroundColor: '#E0E0E0',
    marginVertical: 12,
  },
  nutritionItem: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginVertical: 4, // –£–º–µ–Ω—å—à–∏–ª–∏ —Å 8 –¥–æ 4
    borderBottomWidth: 1,
    borderBottomColor: '#F0F0F0',
    paddingBottom: 6, // –£–º–µ–Ω—å—à–∏–ª–∏ —Å 10 –¥–æ 6
  },
  darkNutritionItem: {
    borderBottomColor: '#2A2A2A',
  },
  nutritionLabel: {
    fontSize: 15, // –£–º–µ–Ω—å—à–∏–ª–∏ —Å 16 –¥–æ 15
    color: '#555',
  },
  nutritionValue: {
    fontSize: 15, // –£–º–µ–Ω—å—à–∏–ª–∏ —Å 16 –¥–æ 15
    fontWeight: '600',
    color: '#333',
    marginLeft: 8, // –î–æ–±–∞–≤–∏–ª–∏ –æ—Ç—Å—Ç—É–ø —Å–ª–µ–≤–∞
  },
  // –°—Ç–∏–ª–∏ –¥–ª—è –≤–∏—Ç–∞–º–∏–Ω–æ–≤
  vitaminContainer: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    marginTop: 8, // –£–º–µ–Ω—å—à–∏–ª–∏ —Å 12 –¥–æ 8
    justifyContent: 'flex-start', // –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –ø–æ –ª–µ–≤–æ–º—É –∫—Ä–∞—é –¥–ª—è –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–∏—è
  },
  vitaminBadge: {
    backgroundColor: 'transparent', // –£–±—Ä–∞–ª–∏ —Ñ–æ–Ω –¥–ª—è –º–∏–Ω–∏–º–∞–ª–∏–∑–º–∞
    borderRadius: 16, // –£–º–µ–Ω—å—à–∏–ª–∏ —Ä–∞–¥–∏—É—Å
    paddingVertical: 5, // –£–º–µ–Ω—å—à–∏–ª–∏ –æ—Ç—Å—Ç—É–ø—ã
    paddingHorizontal: 10, // –£–º–µ–Ω—å—à–∏–ª–∏ –æ—Ç—Å—Ç—É–ø—ã
    margin: 4, // –£–º–µ–Ω—å—à–∏–ª–∏ –º–∞—Ä–∂–∏–Ω
    alignItems: 'center',
    justifyContent: 'center',
    shadowColor: 'transparent', // –£–±—Ä–∞–ª–∏ —Ç–µ–Ω—å
    shadowOffset: { width: 0, height: 0 },
    shadowOpacity: 0,
    shadowRadius: 0,
    elevation: 0, // –£–±—Ä–∞–ª–∏ —ç–ª–µ–≤–∞—Ü–∏—é
    minWidth: 40, // –£–º–µ–Ω—å—à–∏–ª–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —à–∏—Ä–∏–Ω—É
    borderWidth: 1,
    borderColor: '#C8E6C9',
  },
  vitaminBadgeText: {
    color: '#2E7D32',
    fontSize: 14, // –£–º–µ–Ω—å—à–∏–ª–∏ —Å 16 –¥–æ 14
    fontWeight: '500', // –£–º–µ–Ω—å—à–∏–ª–∏ –≤–µ—Å —à—Ä–∏—Ñ—Ç–∞
    textAlign: 'center',
  },
  darkVitaminText: {
    color: '#81C784',
  },
  // –°—Ç–∏–ª–∏ –¥–ª—è –∞–ª–ª–µ—Ä–≥–µ–Ω–æ–≤
  allergensList: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    marginTop: 8,
  },
  allergenItem: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: 'transparent', // –£–±—Ä–∞–ª–∏ —Ñ–æ–Ω
    borderRadius: 16, // –£–º–µ–Ω—å—à–∏–ª–∏ —Ä–∞–¥–∏—É—Å
    paddingVertical: 5, // –£–º–µ–Ω—å—à–∏–ª–∏ –æ—Ç—Å—Ç—É–ø—ã
    paddingHorizontal: 10, // –£–º–µ–Ω—å—à–∏–ª–∏ –æ—Ç—Å—Ç—É–ø—ã
    margin: 4,
    shadowColor: 'transparent', // –£–±—Ä–∞–ª–∏ —Ç–µ–Ω—å
    shadowOffset: { width: 0, height: 0 },
    shadowOpacity: 0,
    shadowRadius: 0,
    elevation: 0, // –£–±—Ä–∞–ª–∏ —ç–ª–µ–≤–∞—Ü–∏—é
    borderWidth: 1, // –î–æ–±–∞–≤–∏–ª–∏ —Ä–∞–º–∫—É –≤–º–µ—Å—Ç–æ —Ñ–æ–Ω–∞
    borderColor: '#FFCC80', // –¶–≤–µ—Ç —Ä–∞–º–∫–∏ –¥–ª—è –∞–ª–ª–µ—Ä–≥–µ–Ω–æ–≤
  },
  allergenName: {
    color: '#FF9800',
    fontSize: 14,
    fontWeight: '500',
  },
  dangerAllergen: {
    backgroundColor: '#FFEBEE',
  },
  dangerAllergenText: {
    color: '#F44336',
  },
  // –°—Ç–∏–ª–∏ –¥–ª—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
  allergenWarningContainer: {
    marginTop: 0,
    backgroundColor: '#FFF3F3', // –°–≤–µ—Ç–ª–æ-–∫—Ä–∞—Å–Ω—ã–π —Ñ–æ–Ω
    borderWidth: 1,
    borderColor: '#FF6B6B', // –ö—Ä–∞—Å–Ω–∞—è —Ä–∞–º–∫–∞
    borderRadius: 8,
    overflow: 'hidden',
    marginBottom: 0,
  },
  darkAllergenWarningContainer: {
    backgroundColor: '#3B1F1F', // –¢–µ–º–Ω—ã–π –∫—Ä–∞—Å–Ω–æ–≤–∞—Ç—ã–π —Ñ–æ–Ω –¥–ª—è —Ç–µ–º–Ω–æ–π —Ç–µ–º—ã
    borderColor: '#8B3A3A', // –¢–µ–º–Ω–æ-–∫—Ä–∞—Å–Ω–∞—è —Ä–∞–º–∫–∞
  },
  allergenWarningHeader: {
    backgroundColor: '#D32F2F', 
    padding: 12,
    flexDirection: 'row',
    alignItems: 'center',
  },
  allergenWarningTitle: {
    color: '#FFFFFF',
    fontSize: 16,
    fontWeight: 'bold',
    marginLeft: 8,
  },
  allergenWarningText: {
    color: '#D32F2F',
    fontSize: 15,
    lineHeight: 20,
    marginHorizontal: 12,
    marginTop: 8,
  },
  allergenWarningNote: {
    color: '#D32F2F',
    fontSize: 14,
    fontWeight: '500',
    fontStyle: 'italic',
    marginHorizontal: 12,
    marginVertical: 10,
  },
  // –°—Ç–∏–ª–∏ –¥–ª—è –æ–±—â–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–ª–ª–µ—Ä–≥–µ–Ω–∞—Ö (–∂–µ–ª—Ç—ã–π –±–ª–æ–∫)
  generalAllergenInfoContainer: {
    backgroundColor: '#FFF8E1', // –°–≤–µ—Ç–ª–æ-–∂–µ–ª—Ç—ã–π —Ñ–æ–Ω
    borderWidth: 1,
    borderColor: '#F5B041', // –ñ–µ–ª—Ç–∞—è/–æ—Ä–∞–Ω–∂–µ–≤–∞—è —Ä–∞–º–∫–∞
    borderRadius: 8,
    overflow: 'hidden',
    marginBottom: 0,
    marginTop: 18,
  },
  darkGeneralAllergenInfoContainer: {
    backgroundColor: '#332A1A', // –¢–µ–º–Ω—ã–π –∂–µ–ª—Ç–æ–≤–∞—Ç—ã–π —Ñ–æ–Ω –¥–ª—è —Ç–µ–º–Ω–æ–π —Ç–µ–º—ã
    borderColor: '#8B6E23', // –¢–µ–º–Ω–æ-–∂–µ–ª—Ç–∞—è —Ä–∞–º–∫–∞
  },
  generalAllergenInfoHeader: {
    backgroundColor: '#F5B041', // –û—Ä–∞–Ω–∂–µ–≤–æ-–∂–µ–ª—Ç–∞—è —à–∞–ø–∫–∞
    padding: 12,
    flexDirection: 'row',
    alignItems: 'center',
  },
  generalAllergenInfoTitle: {
    color: '#FFFFFF',
    fontSize: 16,
    fontWeight: 'bold',
    marginLeft: 8,
  },
  generalAllergenInfoText: {
    color: '#AA6D10', // –ö–æ—Ä–∏—á–Ω–µ–≤–æ-–æ—Ä–∞–Ω–∂–µ–≤—ã–π —Ç–µ–∫—Å—Ç
    fontSize: 15,
    lineHeight: 20,
    marginHorizontal: 12,
    marginTop: 8,
    marginBottom: 4,
  },
  allergensListContainer: {
    marginTop: 8,
    marginBottom: 8,
    paddingHorizontal: 4,
  },
  featureItem: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 10,
    paddingVertical: 2,
  },
  // –°—Ç–∏–ª–∏ –¥–ª—è –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤
  ingredientsText: {
    fontSize: 16,
    lineHeight: 24,
    color: '#333333',
    fontWeight: '400',
  },
  disclaimerText: {
    fontSize: 14,
    lineHeight: 20,
    color: '#777777',
    marginTop: 12,
    marginBottom: 8,
    fontStyle: 'italic',
    paddingHorizontal: 2,
  },
  infoCard: {
    backgroundColor: '#FFFFFF',
    borderRadius: 12,
    padding: 16,
    marginHorizontal: 16,
    marginBottom: 16,
    shadowColor: '#000',
    shadowOffset: {
      width: 0,
      height: 1,
    },
    shadowOpacity: 0.05,
    shadowRadius: 2,
    elevation: 2,
  },
  vitaminsList: {
    marginTop: 8,
  },
  vitaminItem: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingVertical: 4,
  },
  vitaminName: {
    marginLeft: 8,
    fontSize: 15,
    color: '#333333',
  },
  noAllergens: {
    fontSize: 14,
    color: '#777777',
    fontStyle: 'italic',
  },
  fixedButtonContainer: {
    position: 'absolute',
    bottom: 0,
    left: 0,
    right: 0,
    flexDirection: 'row',
    paddingHorizontal: 16,
    paddingVertical: 16, 
    paddingBottom: 26, 
    backgroundColor: 'rgba(248, 248, 248, 0.95)', 
    borderTopWidth: 1,
    borderTopColor: '#E0E0E0',
  },
  darkFixedButtonContainer: {
    backgroundColor: 'rgba(28, 28, 30, 0.95)', 
    borderTopColor: '#3A3A3C',
    paddingBottom: 26, 
  },
  photoButton: {
    flex: 1,
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    backgroundColor: '#6c757d', 
    paddingVertical: 14,
    borderRadius: 8,
    marginRight: 8, 
  },
  addButton: {
    flex: 1,
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    backgroundColor: '#007bff', 
    paddingVertical: 14,
    borderRadius: 8,
    marginLeft: 8, 
  },
  buttonText: {
    color: '#FFFFFF',
    fontSize: 16,
    fontWeight: '600',
    marginLeft: 8,
  },
  buttonIconContainer: {
    width: 24,
    alignItems: 'center',
    justifyContent: 'center',
  },
  headerButton: {
    padding: 8
  },
  vitaminCard: {
    marginTop: 16,
  },
  scoreContainer: {
    marginTop: 16,
    paddingVertical: 12,
    borderTopWidth: 1,
    borderBottomWidth: 1,
    borderColor: '#E0E0E0',
    alignItems: 'center',
  },
  recommendationsContainer: {
    marginTop: 16,
    paddingBottom: 16, 
  },
  recommendationText: {
    fontSize: 15,
    lineHeight: 22,
    color: '#555',
    marginBottom: 8,
  },
  recommendationFrequency: {
    fontSize: 14,
    color: '#777',
    fontStyle: 'italic',
  },
  scanInfoContainerBottom: {
    alignItems: 'center',
    paddingVertical: 12,
    borderTopWidth: 1,
    borderTopColor: '#E0E0E0',
    marginTop:16,
  },
  darkScanInfoContainer: {
    borderTopColor: '#3A3A3C',
  },
  scanDateText: {
    fontSize: 13,
    color: '#666666',
  },
  modalOverlay: {
    flex: 1,
    justifyContent: 'flex-end', 
    backgroundColor: 'rgba(0, 0, 0, 0.5)', 
  },
  modalView: {
    width: '100%',
    backgroundColor: 'white',
    borderTopLeftRadius: 16,
    borderTopRightRadius: 16,
    padding: 20,
    paddingTop: 16,
    paddingBottom: 20,
    alignItems: 'center',
    shadowColor: '#000',
    shadowOffset: {
      width: 0,
      height: -2,
    },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 5,
  },
  darkModalView: {
    backgroundColor: '#1C1C1E',
  },
  modalTitle: {
    fontSize: 22,
    fontWeight: 'bold',
    marginBottom: 20,
    width: '100%',
    textAlign: 'center',
    color: '#000',
  },
  modalSectionTitle: {
    fontSize: 16,
    fontWeight: '600',
    marginBottom: 8,
    marginTop: 12,
    alignSelf: 'flex-start',
    color: '#333',
    width: '100%',
  },
  optionsList: {
    width: '100%',
    marginBottom: 12,
  },
  optionItem: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    paddingVertical: 10,
    paddingHorizontal: 14,
    backgroundColor: 'white',
    borderRadius: 10,
    borderWidth: 1,
    borderColor: '#DDDDDD',
    marginBottom: 6,
  },
  darkOptionItem: {
    backgroundColor: '#1C1C1E',
    borderColor: '#333333',
  },
  selectedOptionItem: {
    borderColor: '#007AFF',
  },
  darkSelectedOption: {
    backgroundColor: '#0A84FF', 
    borderColor: '#007AFF',
  },
  optionText: {
    fontSize: 15,
    color: '#333333',
    fontWeight: '400',
  },
  darkRadioButton: {
    borderColor: '#444444',
    backgroundColor: '#2C2C2E',
  },
  radioButton: {
    width: 22,
    height: 22,
    borderRadius: 11,
    borderWidth: 1,
    borderColor: '#CCCCCC',
    backgroundColor: 'white',
    alignItems: 'center',
    justifyContent: 'center',
  },
  radioButtonSelected: {
    borderColor: '#007AFF',
    backgroundColor: '#007AFF',
  },
  darkSelectedOptionItem: {
    borderColor: '#0A84FF',
  },
  confirmButton: {
    backgroundColor: '#34C759', // –ó–µ–ª–µ–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
  },
  aiButton: {
    backgroundColor: '#FF9500', // –û—Ä–∞–Ω–∂–µ–≤–∞—è AI –∫–Ω–æ–ø–∫–∞  
  },
  cancelButton: {
    backgroundColor: '#FF3B30', // –ö—Ä–∞—Å–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã
  },
  productNameSection: {
    marginBottom: 12,
    paddingTop: 14, // –û—Ç—Å—Ç—É–ø —Å–≤–µ—Ä—Ö—É —á—Ç–æ–±—ã –Ω–µ –Ω–∞–∫–ª–∞–¥—ã–≤–∞–ª–æ—Å—å –Ω–∞ –∫–Ω–æ–ø–∫–∏
  },
  nameInput: {
    fontSize: 20,
    fontWeight: 'bold',
    color: '#333333',
    borderBottomWidth: 1,
    borderBottomColor: '#E0E0E0',
    paddingVertical: 8,
    paddingHorizontal: 4,
  },
  darkInput: {
    color: '#FFFFFF',
    borderBottomColor: '#444444',
    backgroundColor: 'transparent',
  },
  weightContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    marginBottom: 16,
    marginTop: 10,
    paddingVertical: 8,
  },
  weightLabel: {
    fontSize: 16,
    fontWeight: '500',
    color: '#333333',
  },
  weightInputContainer: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  weightInput: {
    fontSize: 16,
    color: '#333333',
    borderBottomWidth: 1,
    borderBottomColor: '#E0E0E0',
    paddingVertical: 4,
    paddingHorizontal: 8,
    minWidth: 60,
    textAlign: 'center',
  },
  weightUnit: {
    fontSize: 16,
    color: '#333333',
    marginLeft: 4,
  },
  weightValue: {
    fontSize: 16,
    color: '#333333',
    fontWeight: '500',
  },
  nutritionInput: {
    fontSize: 16,
    color: '#333333',
    borderBottomWidth: 1,
    borderBottomColor: '#E0E0E0',
    paddingVertical: 4,
    paddingHorizontal: 8,
    minWidth: 60,
    textAlign: 'right',
  },
  
  // –°—Ç–∏–ª–∏ –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–≥–æ –±–ª–æ–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  unifiedProductCardEditing: {
    borderWidth: 2, // –¢–æ–ª—Å—Ç–∞—è —Ä–∞–º–∫–∞ –∫–∞–∫ –Ω–∞ –≥–ª–∞–≤–Ω–æ–º —ç–∫—Ä–∞–Ω–µ
    borderColor: '#007AFF',
  },
  editControlButtons: {
    flexDirection: 'row',
    justifyContent: 'flex-end', // –ö–Ω–æ–ø–∫–∏ —Å–ø—Ä–∞–≤–∞
    alignItems: 'center',
    marginBottom: 8,
    position: 'absolute',
    top: 12,
    right: 12,
  },
  editButton: {
    padding: 4,
    borderRadius: 8,
    backgroundColor: 'rgba(200, 200, 200, 0.2)',
    marginLeft: 8,
  },
  darkEditButton: {
    backgroundColor: 'rgba(100, 100, 100, 0.3)',
  },
});