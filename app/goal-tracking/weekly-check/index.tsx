import { Ionicons } from '@expo/vector-icons';
import AsyncStorage from '@react-native-async-storage/async-storage';
import { getLocales } from 'expo-localization';
import { router } from 'expo-router';
import React, { useRef, useState } from 'react';
import { ActivityIndicator, Alert, Animated, Easing, Modal, ScrollView, Text, TouchableOpacity, useColorScheme, View } from 'react-native';
import { SafeAreaView } from 'react-native-safe-area-context';
import SimplePicker from '../../../components/SimplePicker';
import { useTranslation } from '../../../i18n/i18n';
import { saveWeeklyCheckData, WeeklyCheckData } from '../../../services/goalTrackingService';
import { getUserId } from '../../../services/userService';
import { styles } from './styles';

const CHALLENGE_KEYS = [
  'overeating',
  'emotionalEating',
  'lackOfTime',
  'workStress',
  'socialEvents',
  'sweetTemptations',
  'lackOfSleep',
  'lowMotivation',
];

const CompletionModal = ({ 
  visible, 
  onConfirm,
  weeklyCheckData 
}: { 
  visible: boolean; 
  onConfirm: () => void;
  weeklyCheckData: any;
}) => {
  const progressAnim = useRef(new Animated.Value(0)).current;
  const { t } = useTranslation();
  const isDark = useColorScheme() === 'dark';
  
  React.useEffect(() => {
    if (visible) {
      // –ê–Ω–∏–º–∞—Ü–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
      Animated.timing(progressAnim, {
        toValue: 1,
        duration: 1500,
        easing: Easing.bezier(0.25, 0.1, 0.25, 1),
        useNativeDriver: false,
      }).start();
    } else {
      progressAnim.setValue(0);
    }
  }, [visible]);

  const progressWidth = progressAnim.interpolate({
    inputRange: [0, 1],
    outputRange: ['0%', '100%']
  });

  return (
    <Modal
      transparent={true}
      visible={visible}
      animationType="fade"
    >
      <View style={styles.modalOverlay}>
        <View style={[styles.completionModal, isDark && styles.darkCompletionModal]}>
          {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
          <View style={styles.modalHeader}>
            <View style={[styles.iconContainer, {backgroundColor: '#34C759'}]}>
              <Ionicons name="checkmark" size={28} color="#FFFFFF" />
            </View>
            <Text style={[styles.modalTitle, isDark && styles.darkText]}>
              {t('weeklyCheck.completion.title')}
            </Text>
            <Text style={[styles.modalSubtitle, isDark && styles.darkTextSecondary]}>
              {t('weeklyCheck.completion.subtitle')}
            </Text>
          </View>

          {/* –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä */}
          <View style={styles.progressSection}>
            <Text style={[styles.progressLabel, isDark && styles.darkText]}>
              {t('weeklyCheck.completion.dataSaved')}
            </Text>
            <View style={[styles.progressBarContainer, isDark && styles.darkProgressBarContainer]}>
              <Animated.View 
                style={[
                  styles.progressBarFill,
                  { width: progressWidth }
                ]} 
              />
            </View>
          </View>

          {/* –ö—Ä–∞—Ç–∫–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã */}
          <View style={styles.resultsSection}>
            <Text style={[styles.resultsTitle, isDark && styles.darkText]}>
              {t('weeklyCheck.completion.yourResults')}
            </Text>
            
            <View style={styles.resultRow}>
              <Text style={[styles.resultLabel, isDark && styles.darkTextSecondary]}>{t('weeklyCheck.completion.weight')}</Text>
              <Text style={[styles.resultValue, isDark && styles.darkText]}>{weeklyCheckData?.currentWeight || 'N/A'} {t('common.kg')}</Text>
            </View>
            
            <View style={styles.resultRow}>
              <Text style={[styles.resultLabel, isDark && styles.darkTextSecondary]}>{t('weeklyCheck.completion.energy')}</Text>
              <Text style={[styles.resultValue, isDark && styles.darkText]}>{weeklyCheckData?.energyLevel || 'N/A'}/5</Text>
            </View>
            
            <View style={styles.resultRow}>
              <Text style={[styles.resultLabel, isDark && styles.darkTextSecondary]}>{t('weeklyCheck.completion.motivation')}</Text>
              <Text style={[styles.resultValue, isDark && styles.darkText]}>{weeklyCheckData?.motivationLevel || 'N/A'}/5</Text>
            </View>
          </View>

          {/* –ö–Ω–æ–ø–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π */}
          <TouchableOpacity 
            style={[styles.confirmButton, isDark && styles.confirmButtonDark]}
            onPress={onConfirm}
          >
            <Text style={styles.confirmButtonText}>{t('weeklyCheck.completion.getRecommendations')}</Text>
          </TouchableOpacity>
        </View>
      </View>
    </Modal>
  );
};

// LoadingOverlay –¥–ª—è –ø–æ–∫–∞–∑–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ webhook
const LoadingOverlay = () => {
  const progressAnim = useRef(new Animated.Value(0)).current;
  const { t } = useTranslation();
  const isDark = useColorScheme() === 'dark';
  
  console.log('üé¨ WeeklyCheck LoadingOverlay —Ä–µ–Ω–¥–µ—Ä–∏—Ç—Å—è!');
  
  React.useEffect(() => {
    console.log('üé¨ WeeklyCheck LoadingOverlay useEffect –∑–∞–ø—É—â–µ–Ω');
    // –ê–Ω–∏–º–∞—Ü–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–Ω–æ 30 —Å–µ–∫—É–Ω–¥
    Animated.timing(progressAnim, {
      toValue: 0.95, // –ù–µ –¥–µ–ª–∞–µ–º 100%, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å, —á—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å –µ—â—ë –∏–¥—ë—Ç
      duration: 30000, // 30 —Å–µ–∫—É–Ω–¥
      easing: Easing.bezier(0.25, 0.1, 0.25, 1),
      useNativeDriver: false,
    }).start();
  }, []);

  const progressWidth = progressAnim.interpolate({
    inputRange: [0, 1],
    outputRange: ['0%', '100%']
  });

  return (
    <Modal
      transparent={true}
      visible={true}
      animationType="fade"
    >
      <View style={styles.modalOverlay}>
        <View style={[styles.loadingCard, isDark && styles.darkLoadingCard]}>
          <ActivityIndicator size="large" color={isDark ? "#0A84FF" : "#007AFF"} style={styles.loadingIndicator} />
          <Text style={[styles.overlayLoadingText, isDark && styles.darkText]}>
            {t('weeklyCheck.loading.generating')}
          </Text>
          <View style={[styles.loadingProgressContainer, isDark && styles.darkLoadingProgressContainer]}>
            <Animated.View 
              style={[
                styles.loadingProgressBar,
                { width: progressWidth }
              ]} 
            />
          </View>
        </View>
      </View>
    </Modal>
  );
};

export default function WeeklyCheckScreen() {
  const { t } = useTranslation();
  const colorScheme = useColorScheme();
  const isDark = colorScheme === 'dark';
  
  const [checkData, setCheckData] = useState<WeeklyCheckData>({
    currentWeight: undefined,
    energyLevel: 3,
    motivationLevel: 3,
    challenges: [],
    dietCompliance: 3,
    exerciseCompliance: 3,
    sleepQuality: 3,
    stressLevel: 3,
    notes: '',
  });


  const [showCompletionModal, setShowCompletionModal] = useState(false);
  const [showLoadingOverlay, setShowLoadingOverlay] = useState(false);

  const [currentStep, setCurrentStep] = useState(0);
  const totalSteps = 7; // –£–≤–µ–ª–∏—á–∏–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤

  const handleRatingChange = (field: keyof WeeklyCheckData, value: number) => {
    setCheckData(prev => ({ ...prev, [field]: value }));
  };

  const handleChallengeToggle = (challenge: string) => {
    setCheckData(prev => ({
      ...prev,
      challenges: prev.challenges.includes(challenge)
        ? prev.challenges.filter(c => c !== challenge)
        : [...prev.challenges, challenge]
    }));
  };

  const handleNext = () => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–µ—Å –≤–≤–µ–¥–µ–Ω –Ω–∞ –ø–µ—Ä–≤–æ–º —à–∞–≥–µ
    if (currentStep === 0) {
      if (!checkData.currentWeight || checkData.currentWeight <= 0) {
        Alert.alert('–í–≤–µ–¥–∏—Ç–µ –≤–µ—Å', '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è');
        return;
      }
    }
    
    if (currentStep < totalSteps - 1) {
      setCurrentStep(currentStep + 1);
    } else {
      handleSubmit();
    }
  };

  const handleBack = () => {
    if (currentStep > 0) {
      setCurrentStep(currentStep - 1);
    } else {
      router.back();
    }
  };

  const handleSubmit = async () => {
    try {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
      await saveWeeklyCheckData(checkData);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
      setShowCompletionModal(true);
    } catch (error) {
      Alert.alert(
        '–û—à–∏–±–∫–∞',
        '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
        [
          {
            text: 'OK',
            style: 'default'
          }
        ]
      );
    }
  };

  const handleModalConfirm = async () => {
    try {
      setShowCompletionModal(false);
      setShowLoadingOverlay(true);
      
      console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É webhook –∏–∑ weekly-check');
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º webhook –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
      await sendWebhookAndWaitForResponse(checkData);
      
      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –æ–±—Ä–∞—Ç–Ω–æ –≤ goal-tracking
      router.replace({
        pathname: '/(tabs)/goal-tracking',
        params: { 
          weeklyDataCompleted: 'true',
          weeklyData: JSON.stringify(checkData)
        }
      });
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ webhook:', error);
      
      // –í–†–ï–ú–ï–ù–ù–û: –°–∏–º—É–ª–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      console.log('üß™ –¢–ï–°–¢: –°–∏–º—É–ª–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–π AI –æ—Ç–≤–µ—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...');
      const mockResponse = [
        {
          "text": "```json\n{\n  \"nutritionRecommendations\": {\n    \"shortSummary\": \"–í–µ—Å —É–≤–µ–ª–∏—á–∏–ª—Å—è. –ì–ª–∞–≤–Ω–∞—è —Ü–µ–ª—å: —Ç–æ—á–Ω–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –≤—Å–µ –ø—Ä–∏–µ–º—ã –ø–∏—â–∏ –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è —Ä–µ–∞–ª—å–Ω–æ–π –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç–∏.\",\n    \"bulletPoints\": [\n      \"–ù–∞—á–Ω–∏—Ç–µ –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –ö–ê–ñ–î–´–ô –ø—Ä–∏–µ–º –ø–∏—â–∏ –∏ –Ω–∞–ø–∏—Ç–æ–∫.\",\n      \"–í–∫–ª—é—á–∏—Ç–µ –≤ –∫–∞–∂–¥—ã–π –ø—Ä–∏–µ–º –ø–∏—â–∏ –∏—Å—Ç–æ—á–Ω–∏–∫ –±–µ–ª–∫–∞ (–º—è—Å–æ, —è–π—Ü–∞).\",\n      \"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –ø—Ä–∏—á–∏–Ω—ã –ø–µ—Ä–µ–µ–¥–∞–Ω–∏—è, –Ω–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —ç–º–æ—Ü–∏—è–º–∏.\"\n    ]\n  },\n  \"weeklyFocus\": {\n    \"mainGoal\": \"–î–æ—Å—Ç–∏—á—å 100% —á–µ—Å—Ç–Ω–æ—Å—Ç–∏ –∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤ –≤–µ–¥–µ–Ω–∏–∏ –¥–Ω–µ–≤–Ω–∏–∫–∞ –ø–∏—Ç–∞–Ω–∏—è.\",\n    \"specificFoods\": [\n      \"–ê—Å–∞–¥–æ –∏–ª–∏ –±–∏—Ñ–µ –¥–µ —á–æ—Ä–∏–∑–æ (–Ω–µ–∂–∏—Ä–Ω—ã–µ –∫—É—Å–∫–∏)\",\n      \"–ú–∞—Ç–µ: —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–π –∞—Ä–≥–µ–Ω—Ç–∏–Ω—Å–∫–∏–π –Ω–∞–ø–∏—Ç–æ–∫\",\n      \"–ö–µ—Ñ–∏—Ä –∏–ª–∏ –π–æ–≥—É—Ä—Ç –±–µ–∑ —Å–∞—Ö–∞—Ä–∞\"\n    ],\n    \"avoidOrReduce\": [\n      \"–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–µ —Å–æ—É—Å—ã –∏ –∑–∞–ø—Ä–∞–≤–∫–∏\",\n      \"–ü—Ä–∏–µ–º—ã –ø–∏—â–∏ '–Ω–∞ —Ö–æ–¥—É' –∏–ª–∏ –ø–µ—Ä–µ–¥ —ç–∫—Ä–∞–Ω–æ–º\"\n    ]\n  },\n  \"progressNotes\": {\n    \"weightProgress\": \"–ù–∞–±–æ—Ä –≤–µ—Å–∞ –≤ 2 –∫–≥ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç–∏.\",\n    \"nutritionQuality\": \"–û—Ü–µ–Ω–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è 60/100 —Ç—Ä–µ–±—É–µ—Ç —É–ª—É—á—à–µ–Ω–∏—è.\",\n    \"challengeEvolution\": \"–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –ø–µ—Ä–µ–µ–¥–∞–Ω–∏–µ –±–æ–ª—å—à–µ –Ω–µ –ø—Ä–æ–±–ª–µ–º–∞ - –æ—Ç–ª–∏—á–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å!\",\n    \"encouragement\": \"–ü–µ—Ä–≤–∞—è –Ω–µ–¥–µ–ª—è ‚Äì —ç—Ç–æ –∞–¥–∞–ø—Ç–∞—Ü–∏—è. –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –≤–µ—Å–∞ ‚Äì —ç—Ç–æ —Ü–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è!\"\n  },\n  \"nextWeekTargets\": {\n    \"calorieTarget\": \"2300-2400 –∫–∫–∞–ª/–¥–µ–Ω—å\",\n    \"macroFocus\": \"–§–æ–∫—É—Å –Ω–∞ –±–µ–ª–æ–∫ –≤ –∫–∞–∂–¥–æ–º –ø—Ä–∏–µ–º–µ –ø–∏—â–∏\",\n    \"behavioralGoal\": \"–ó–∞–ø–∏—Å—ã–≤–∞—Ç—å –µ–¥—É —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏\",\n    \"activitySuggestion\": \"20-–º–∏–Ω—É—Ç–Ω–∞—è –ø—Ä–æ–≥—É–ª–∫–∞ –ø–æ—Å–ª–µ —É–∂–∏–Ω–∞\"\n  }\n}\n```"
        }
      ];
      
      try {
        await AsyncStorage.setItem('ai_recommendations', JSON.stringify(mockResponse));
        await AsyncStorage.setItem('ai_recommendations_timestamp', new Date().toISOString());
        console.log('‚úÖ WeeklyCheck MOCK —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ AsyncStorage');
        
        // –¢–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ mock –¥–∞–Ω–Ω—ã—Ö
        const { parseAIResponse } = require('../../../utils/aiResponseParser');
        const testParsed = parseAIResponse(mockResponse);
        if (testParsed) {
          console.log('üß™ –¢–ï–°–¢: –ü–∞—Ä—Å–∏–Ω–≥ MOCK –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–µ–Ω!');
          console.log('üß™ –¢–ï–°–¢: Short Summary:', testParsed.nutritionRecommendations.shortSummary.substring(0, 50) + '...');
        } else {
          console.log('üß™ –¢–ï–°–¢: –ü–∞—Ä—Å–∏–Ω–≥ MOCK –¥–∞–Ω–Ω—ã—Ö –Ω–µ —É–¥–∞–ª—Å—è');
        }
      } catch (mockError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è mock –¥–∞–Ω–Ω—ã—Ö:', mockError);
      }
      
      // –°–æ–∑–¥–∞–µ–º fallback —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
      const fallbackRecommendations = generateFallbackRecommendations(checkData);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º fallback —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≤ AsyncStorage
      try {
        await AsyncStorage.setItem('weekly_recommendations', fallbackRecommendations);
        console.log('‚úÖ WeeklyCheck fallback —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ AsyncStorage');
      } catch (storageError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ fallback —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π:', storageError);
      }
      
      // –ù–µ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å
      console.log('‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ webhook');
      
      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –æ–±—Ä–∞—Ç–Ω–æ –≤ goal-tracking
      router.replace({
        pathname: '/(tabs)/goal-tracking',
        params: { 
          weeklyDataCompleted: 'true',
          weeklyData: JSON.stringify(checkData)
        }
      });
    } finally {
      setShowLoadingOverlay(false);
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —á–∏—Å–ª–æ–≤—ã—Ö –æ—Ü–µ–Ω–æ–∫ –≤ –ø–æ–Ω—è—Ç–Ω—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è (–∫–æ–ø–∏—è –∏–∑ goal-tracking)
  const convertRatingsToDescriptions = (weeklyData: WeeklyCheckData) => {
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ challenges –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
    const translateChallenges = (challenges: string[]): string[] => {
      const translations: { [key: string]: string } = {
        '–ü–µ—Ä–µ–µ–¥–∞–Ω–∏–µ': 'Overeating',
        '–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ': 'Emotional eating',
        '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ–∫ –≤—Ä–µ–º–µ–Ω–∏': 'Lack of time',
        '–°—Ç—Ä–µ—Å—Å –Ω–∞ —Ä–∞–±–æ—Ç–µ': 'Work stress',
        '–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è': 'Social events',
        '–°–ª–∞–¥–∫–∏–µ —Å–æ–±–ª–∞–∑–Ω—ã': 'Sweet cravings',
        '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ–∫ —Å–Ω–∞': 'Lack of sleep',
        '–ù–∏–∑–∫–∞—è –º–æ—Ç–∏–≤–∞—Ü–∏—è': 'Low motivation',
      };
      
      return challenges.map(challenge => translations[challenge] || challenge);
    };
    const getEnergyDescription = (level: number): string => {
      switch (level) {
        case 1: return "Very low energy";
        case 2: return "Low energy";
        case 3: return "Moderate energy";
        case 4: return "Good energy";
        case 5: return "Excellent energy";
        default: return "Not specified";
      }
    };

    const getMotivationDescription = (level: number): string => {
      switch (level) {
        case 1: return "No motivation at all";
        case 2: return "Low motivation";
        case 3: return "Moderate motivation";
        case 4: return "High motivation";
        case 5: return "Very high motivation";
        default: return "Not specified";
      }
    };

    const getDietComplianceDescription = (level: number): string => {
      switch (level) {
        case 1: return "Did not follow diet plan at all";
        case 2: return "Poorly followed diet plan";
        case 3: return "Moderately followed diet plan";
        case 4: return "Well followed diet plan";
        case 5: return "Perfectly followed diet plan";
        default: return "Not specified";
      }
    };

    const getExerciseComplianceDescription = (level: number): string => {
      switch (level) {
        case 1: return "Did not exercise at all";
        case 2: return "Minimal exercise activity";
        case 3: return "Moderate exercise activity";
        case 4: return "Good exercise activity";
        case 5: return "Excellent exercise activity";
        default: return "Not specified";
      }
    };

    const getSleepQualityDescription = (level: number): string => {
      switch (level) {
        case 1: return "Very poor sleep quality";
        case 2: return "Poor sleep quality";
        case 3: return "Average sleep quality";
        case 4: return "Good sleep quality";
        case 5: return "Excellent sleep quality";
        default: return "Not specified";
      }
    };

    const getStressLevelDescription = (level: number): string => {
      switch (level) {
        case 1: return "Very high stress level";
        case 2: return "High stress level";
        case 3: return "Moderate stress level";
        case 4: return "Low stress level";
        case 5: return "Very low stress level";
        default: return "Not specified";
      }
    };

    return {
      currentWeight: weeklyData.currentWeight,
      energyLevel: getEnergyDescription(weeklyData.energyLevel),
      motivationLevel: getMotivationDescription(weeklyData.motivationLevel),
      challenges: translateChallenges(weeklyData.challenges), // –ü–µ—Ä–µ–≤–æ–¥–∏–º challenges –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
      dietCompliance: getDietComplianceDescription(weeklyData.dietCompliance),
      exerciseCompliance: getExerciseComplianceDescription(weeklyData.exerciseCompliance),
      sleepQuality: getSleepQualityDescription(weeklyData.sleepQuality),
      stressLevel: getStressLevelDescription(weeklyData.stressLevel),
      completedAt: new Date().toISOString(),
      timestamp: new Date().toISOString(),
      // –£–±–∏—Ä–∞–µ–º originalRatings - —Ç–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –æ–ø–∏—Å–∞—Ç–µ–ª—å–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã
      // originalRatings: {
      //   energyLevel: weeklyData.energyLevel,
      //   motivationLevel: weeklyData.motivationLevel,
      //   dietCompliance: weeklyData.dietCompliance,
      //   exerciseCompliance: weeklyData.exerciseCompliance,
      //   sleepQuality: weeklyData.sleepQuality,
      //   stressLevel: weeklyData.stressLevel,
      // }
    };
  };

  const sendWebhookAndWaitForResponse = async (weeklyData: WeeklyCheckData) => {
    try {
      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —á–∏—Å–ª–æ–≤—ã–µ –æ—Ü–µ–Ω–∫–∏ –≤ –æ–ø–∏—Å–∞—Ç–µ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç
      const descriptiveWeeklyData = convertRatingsToDescriptions(weeklyData);
      
      // –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ —Å–∏—Å—Ç–µ–º—ã
      const locales = getLocales();
      const systemLanguage = locales[0]?.languageCode || 'en';
      
      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
      const webhookData = {
        userId: await getUserId(),
        body: {
          userId: await getUserId()
        },
        weeklyData: {
          ...descriptiveWeeklyData,
          language: systemLanguage
        }
      };

      console.log('üì§ WeeklyCheck –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ AI webhook:', webhookData);
      
      const N8N_WEBHOOK_URL = 'https://ttagent.website/webhook/pro_week_check';
      
      // –°–æ–∑–¥–∞–µ–º AbortController –¥–ª—è timeout - —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–æ 90 —Å–µ–∫—É–Ω–¥
      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), 90000); // 90 —Å–µ–∫—É–Ω–¥ timeout
      
      const response = await fetch(N8N_WEBHOOK_URL, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(webhookData),
        signal: controller.signal
      });
      
      clearTimeout(timeoutId);

      console.log('üì® WeeklyCheck Response status:', response.status);

      if (response.ok) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤ –æ—Ç–≤–µ—Ç–µ
        const responseText = await response.text();
        console.log('üì¶ WeeklyCheck Raw response text:', responseText ? responseText.substring(0, 200) + '...' : 'EMPTY');
        
        if (!responseText || responseText.trim() === '') {
          console.warn('‚ö†Ô∏è WeeklyCheck Webhook –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback');
          const fallbackRecommendations = generateFallbackRecommendations(weeklyData);
          await AsyncStorage.setItem('weekly_recommendations', fallbackRecommendations);
          console.log('‚úÖ WeeklyCheck fallback —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ AsyncStorage');
          router.replace({
            pathname: '/(tabs)/goal-tracking',
            params: { 
              weeklyDataCompleted: 'true',
              weeklyData: JSON.stringify(checkData)
            }
          });
          return;
        }
        
        let result;
        try {
          result = JSON.parse(responseText);
        } catch (parseError) {
          console.error('‚ùå WeeklyCheck –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:', parseError);
          console.log('‚ö†Ô∏è WeeklyCheck –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞');
          const fallbackRecommendations = generateFallbackRecommendations(weeklyData);
          await AsyncStorage.setItem('weekly_recommendations', fallbackRecommendations);
          console.log('‚úÖ WeeklyCheck fallback —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ AsyncStorage');
          router.replace({
            pathname: '/(tabs)/goal-tracking',
            params: { 
              weeklyDataCompleted: 'true',
              weeklyData: JSON.stringify(checkData)
            }
          });
          return;
        }
        
        console.log('‚úÖ WeeklyCheck –ø–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç AI:', result);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –≤ –Ω–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –¥–ª—è hook
        try {
          await AsyncStorage.setItem('ai_recommendations', JSON.stringify(result));
          await AsyncStorage.setItem('ai_recommendations_timestamp', new Date().toISOString());
          console.log('‚úÖ WeeklyCheck —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ AsyncStorage');
          
          // –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞
          const { parseAIResponse } = require('../../../utils/aiResponseParser');
          const testParsed = parseAIResponse(result);
          if (testParsed) {
            console.log('üß™ –¢–ï–°–¢: –ü–∞—Ä—Å–∏–Ω–≥ –Ω–æ–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ —É—Å–ø–µ—à–µ–Ω!');
            console.log('üß™ –¢–ï–°–¢: Short Summary:', testParsed.nutritionRecommendations.shortSummary.substring(0, 50) + '...');
            console.log('üß™ –¢–ï–°–¢: Bullet Points count:', testParsed.nutritionRecommendations.bulletPoints.length);
          } else {
            console.log('üß™ –¢–ï–°–¢: –ü–∞—Ä—Å–∏–Ω–≥ –Ω–µ —É–¥–∞–ª—Å—è');
          }
        } catch (saveError) {
          console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π:', saveError);
        }
        
        // –¢–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å—Ç–∞—Ä–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
        try {
          // –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
          let aiData = result;
          
          // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç: [{"text": "```json\n{...}\n```"}]
          if (Array.isArray(result) && result.length > 0 && result[0].text) {
            console.log('üîç WeeklyCheck –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–∞—Å—Å–∏–≤ –æ—Ç–≤–µ—Ç–æ–≤');
            const textContent = result[0].text;
            
            // –ò–∑–≤–ª–µ–∫–∞–µ–º JSON –∏–∑ markdown
            const jsonMatch = textContent.match(/```json\n([\s\S]*?)\n```/);
            if (jsonMatch && jsonMatch[1]) {
              aiData = JSON.parse(jsonMatch[1]);
              console.log('‚úÖ WeeklyCheck JSON –∏–∑–≤–ª–µ—á–µ–Ω –∏–∑ markdown');
            }
          } else if (result.text && typeof result.text === 'string') {
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç
            const jsonMatch = result.text.match(/```json\n([\s\S]*?)\n```/);
            if (jsonMatch && jsonMatch[1]) {
              aiData = JSON.parse(jsonMatch[1]);
              console.log('‚úÖ WeeklyCheck JSON –∏–∑–≤–ª–µ—á–µ–Ω –∏–∑ markdown (—Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç)');
            }
          }
          
          // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
          let recommendationsText = '';
          
          if (aiData.nutritionRecommendations?.shortSummary) {
            recommendationsText = aiData.nutritionRecommendations.shortSummary;
            
            if (aiData.nutritionRecommendations?.bulletPoints?.length > 0) {
              recommendationsText += '\n\n' + aiData.nutritionRecommendations.bulletPoints
                .map((point: string) => `‚Ä¢ ${point}`)
                .join('\n');
            }
            
            if (aiData.progressNotes?.encouragement) {
              recommendationsText += '\n\nüí™ ' + aiData.progressNotes.encouragement;
            }
          }
          
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å—Ç–∞—Ä–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
          if (recommendationsText) {
            await AsyncStorage.setItem('weekly_recommendations', recommendationsText);
            console.log('‚úÖ WeeklyCheck legacy —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
          }
        } catch (legacyError) {
          console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è legacy —Ñ–æ—Ä–º–∞—Ç–∞:', legacyError);
        }
        
      } else {
        throw new Error(`Webhook –æ—Ç–≤–µ—Ç–∏–ª —Å –æ—à–∏–±–∫–æ–π: ${response.status}`);
      }
    } catch (error) {
      console.error('‚ùå WeeklyCheck –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ webhook:', error);
      
      // –°–æ–∑–¥–∞–µ–º fallback —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
      const fallbackRecommendations = generateFallbackRecommendations(weeklyData);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º fallback —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≤ AsyncStorage
      try {
        await AsyncStorage.setItem('weekly_recommendations', fallbackRecommendations);
        console.log('‚úÖ WeeklyCheck fallback —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ AsyncStorage');
      } catch (storageError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ fallback —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π:', storageError);
      }
      
      // –ù–µ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å
      console.log('‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ webhook');
      
      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –æ–±—Ä–∞—Ç–Ω–æ –≤ goal-tracking
      router.replace({
        pathname: '/(tabs)/goal-tracking',
        params: { 
          weeklyDataCompleted: 'true',
          weeklyData: JSON.stringify(checkData)
        }
      });
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è fallback —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
  const generateFallbackRecommendations = (weeklyData: WeeklyCheckData): string => {
    let recommendations = `üìã ${t('goalTracking.thankYouForWeeklyCheck')}\n\n`;
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —ç–Ω–µ—Ä–≥–∏—é
    if (weeklyData.energyLevel <= 2) {
      recommendations += `üéØ ${t('goalTracking.weeklyCheckFallback.recommendationsTitle')}\n`;
      recommendations += `1. ${t('goalTracking.weeklyCheckFallback.lowEnergyTips.1')}\n`;
      recommendations += `2. ${t('goalTracking.weeklyCheckFallback.lowEnergyTips.2')}\n`;
      recommendations += `3. ${t('goalTracking.weeklyCheckFallback.lowEnergyTips.3')}\n\n`;
    } else if (weeklyData.energyLevel >= 4) {
      recommendations += `üéØ ${t('goalTracking.weeklyCheckFallback.recommendationsTitle')}\n`;
      recommendations += `1. ${t('goalTracking.weeklyCheckFallback.highEnergyTips.1')}\n`;
      recommendations += `2. ${t('goalTracking.weeklyCheckFallback.highEnergyTips.2')}\n`;
      recommendations += `3. ${t('goalTracking.weeklyCheckFallback.highEnergyTips.3')}\n\n`;
    } else {
      recommendations += `üéØ ${t('goalTracking.weeklyCheckFallback.recommendationsTitle')}\n`;
      recommendations += `1. ${t('goalTracking.weeklyCheckFallback.moderateEnergyTips.1')}\n`;
      recommendations += `2. ${t('goalTracking.weeklyCheckFallback.moderateEnergyTips.2')}\n`;
      recommendations += `3. ${t('goalTracking.weeklyCheckFallback.moderateEnergyTips.3')}\n\n`;
    }
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º challenges
    if (weeklyData.challenges.includes('–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ')) {
      recommendations += `üéØ ${t('goalTracking.weeklyCheckFallback.mainGoals.emotionalEating')}\n\n`;
    } else if (weeklyData.challenges.includes('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ–∫ –≤—Ä–µ–º–µ–Ω–∏')) {
      recommendations += `üéØ ${t('goalTracking.weeklyCheckFallback.mainGoals.timeShortage')}\n\n`;
    } else {
      recommendations += `üéØ ${t('goalTracking.weeklyCheckFallback.mainGoals.general')}\n\n`;
    }
    
    recommendations += `üí™ ${t('goalTracking.dailyOpportunityReminder')}`;
    
         return recommendations;
   };

  const renderRatingScale = (
    title: string,
    value: number,
    onValueChange: (value: number) => void,
    labels: string[]
  ) => (
    <View style={styles.ratingContainer}>
      <Text style={[styles.ratingTitle, isDark && styles.darkText]}>{title}</Text>
      <View style={styles.ratingScale}>
        {[1, 2, 3, 4, 5].map(rating => (
          <TouchableOpacity
            key={rating}
            style={[
              styles.ratingButton,
              value === rating && styles.ratingButtonActive,
              isDark && styles.darkRatingButton,
              value === rating && isDark && styles.darkRatingButtonActive,
            ]}
            onPress={() => onValueChange(rating)}
          >
            <Text style={[
              styles.ratingButtonText,
              value === rating && styles.ratingButtonTextActive,
              isDark && styles.darkRatingButtonText,
              value === rating && isDark && styles.darkRatingButtonTextActive,
            ]}>
              {rating}
            </Text>
          </TouchableOpacity>
        ))}
      </View>
      <View style={styles.ratingLabels}>
        <Text style={[styles.ratingLabel, isDark && styles.darkTextSecondary]}>{labels[0]}</Text>
        <Text style={[styles.ratingLabel, isDark && styles.darkTextSecondary]}>{labels[1]}</Text>
      </View>
    </View>
  );

  const renderWeightInput = () => {
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –∫–∏–ª–æ–≥—Ä–∞–º–º–æ–≤ (40-200 –∫–≥)
    const kgValues = Array.from({ length: 161 }, (_, i) => i + 40);
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –≥—Ä–∞–º–º–æ–≤ (0, 100, 200, ... 900)
    const gramValues = Array.from({ length: 10 }, (_, i) => i * 100);
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∫–∏–ª–æ–≥—Ä–∞–º–º—ã –∏ –≥—Ä–∞–º–º—ã
    const currentKg = checkData.currentWeight ? Math.floor(checkData.currentWeight) : 75;
    const currentGrams = checkData.currentWeight ? Math.round((checkData.currentWeight - Math.floor(checkData.currentWeight)) * 1000 / 100) * 100 : 0;
    
    const handleWeightChange = (kg: number, grams: number) => {
      const totalWeight = kg + (grams / 1000);
      setCheckData(prev => ({ ...prev, currentWeight: totalWeight }));
    };
    
    return (
    <View style={styles.weightInputContainer}>
      <Text style={[styles.weightInputLabel, isDark && styles.darkText]}>
        {t('weeklyCheck.steps.weight.label')}
      </Text>
        
        <View style={styles.weightPickerContainer}>
          <View style={styles.pickerSection}>
            <SimplePicker
              values={kgValues}
              selectedValue={currentKg}
              onChange={(value) => handleWeightChange(Number(value), currentGrams)}
              pickerWidth={100}
              pickerHeight={180}
              formatValue={(value) => `${value}`}
            />
            <Text style={[styles.pickerLabel, isDark && styles.darkText]}>{t('common.kg')}</Text>
          </View>
          
          <View style={styles.pickerSection}>
            <SimplePicker
              values={gramValues}
              selectedValue={currentGrams}
              onChange={(value) => handleWeightChange(currentKg, Number(value))}
              pickerWidth={100}
              pickerHeight={180}
              formatValue={(value) => `${value}`}
            />
            <Text style={[styles.pickerLabel, isDark && styles.darkText]}>{t('weeklyCheck.steps.weight.grams')}</Text>
          </View>
        </View>
        
      <Text style={[styles.weightInputHint, isDark && styles.darkTextSecondary]}>
          {t('weeklyCheck.steps.weight.hintPicker')}
      </Text>
    </View>
  );
  };

  const renderStep = () => {
    switch (currentStep) {
      case 0:
        return (
          <View style={[styles.stepContainer, isDark && styles.darkStepContainer]}>
            <Text style={[styles.stepTitle, isDark && styles.darkText]}>
              {t('weeklyCheck.steps.weight.title')}
            </Text>
            <Text style={[styles.stepDescription, isDark && styles.darkTextSecondary]}>
              {t('weeklyCheck.steps.weight.description')}
            </Text>
            {renderWeightInput()}
          </View>
        );

      case 1:
        return (
          <View style={[styles.stepContainer, isDark && styles.darkStepContainer]}>
            <Text style={[styles.stepTitle, isDark && styles.darkText]}>
              {t('weeklyCheck.steps.energy.title')}
            </Text>
            <Text style={[styles.stepDescription, isDark && styles.darkTextSecondary]}>
              {t('weeklyCheck.steps.energy.description')}
            </Text>
            {renderRatingScale(
              t('weeklyCheck.steps.energy.ratingTitle'),
              checkData.energyLevel,
              (value) => handleRatingChange('energyLevel', value),
              [t('weeklyCheck.steps.energy.labels.0'), t('weeklyCheck.steps.energy.labels.1')]
            )}
          </View>
        );

      case 2:
        return (
          <View style={[styles.stepContainer, isDark && styles.darkStepContainer]}>
            <Text style={[styles.stepTitle, isDark && styles.darkText]}>
              {t('weeklyCheck.steps.motivation.title')}
            </Text>
            <Text style={[styles.stepDescription, isDark && styles.darkTextSecondary]}>
              {t('weeklyCheck.steps.motivation.description')}
            </Text>
            {renderRatingScale(
              t('weeklyCheck.steps.motivation.ratingTitle'),
              checkData.motivationLevel,
              (value) => handleRatingChange('motivationLevel', value),
              [t('weeklyCheck.steps.motivation.labels.0'), t('weeklyCheck.steps.motivation.labels.1')]
            )}
          </View>
        );

      case 3:
        return (
          <View style={[styles.stepContainer, isDark && styles.darkStepContainer]}>
            <Text style={[styles.stepTitle, isDark && styles.darkText]}>
              {t('weeklyCheck.steps.challenges.title')}
            </Text>
            <Text style={[styles.stepDescription, isDark && styles.darkTextSecondary]}>
              {t('weeklyCheck.steps.challenges.description')}
            </Text>
            <View style={styles.challengesContainer}>
              {CHALLENGE_KEYS.map(challenge => (
                <TouchableOpacity
                  key={challenge}
                  style={[
                    styles.challengeButton,
                    checkData.challenges.includes(challenge) && styles.challengeButtonActive,
                    isDark && styles.darkChallengeButton,
                    checkData.challenges.includes(challenge) && isDark && styles.darkChallengeButtonActive,
                  ]}
                  onPress={() => handleChallengeToggle(challenge)}
                >
                  <Text style={[
                    styles.challengeButtonText,
                    checkData.challenges.includes(challenge) && styles.challengeButtonTextActive,
                    isDark && styles.darkChallengeButtonText,
                    checkData.challenges.includes(challenge) && isDark && styles.darkChallengeButtonTextActive,
                  ]}>
                    {t(`weeklyCheck.challenges.${challenge}`)}
                  </Text>
                </TouchableOpacity>
              ))}
            </View>
          </View>
        );

      case 4:
        return (
          <View style={[styles.stepContainer, isDark && styles.darkStepContainer]}>
            <Text style={[styles.stepTitle, isDark && styles.darkText]}>
              {t('weeklyCheck.steps.diet.title')}
            </Text>
            <Text style={[styles.stepDescription, isDark && styles.darkTextSecondary]}>
              {t('weeklyCheck.steps.diet.description')}
            </Text>
            {renderRatingScale(
              t('weeklyCheck.steps.diet.ratingTitle'),
              checkData.dietCompliance,
              (value) => handleRatingChange('dietCompliance', value),
              [t('weeklyCheck.steps.diet.labels.0'), t('weeklyCheck.steps.diet.labels.1')]
            )}
          </View>
        );

      case 5:
        return (
          <View style={[styles.stepContainer, isDark && styles.darkStepContainer]}>
            <Text style={[styles.stepTitle, isDark && styles.darkText]}>
              {t('weeklyCheck.steps.exercise.title')}
            </Text>
            <Text style={[styles.stepDescription, isDark && styles.darkTextSecondary]}>
              {t('weeklyCheck.steps.exercise.description')}
            </Text>
            {renderRatingScale(
              t('weeklyCheck.steps.exercise.ratingTitle'),
              checkData.exerciseCompliance,
              (value) => handleRatingChange('exerciseCompliance', value),
              [t('weeklyCheck.steps.exercise.labels.0'), t('weeklyCheck.steps.exercise.labels.1')]
            )}
          </View>
        );

      case 6:
        return (
          <View style={[styles.stepContainer, isDark && styles.darkStepContainer]}>
            <Text style={[styles.stepTitle, isDark && styles.darkText]}>
              {t('weeklyCheck.steps.sleepStress.title')}
            </Text>
            <Text style={[styles.stepDescription, isDark && styles.darkTextSecondary]}>
              {t('weeklyCheck.steps.sleepStress.description')}
            </Text>
            {renderRatingScale(
              t('weeklyCheck.steps.sleepStress.sleepTitle'),
              checkData.sleepQuality,
              (value) => handleRatingChange('sleepQuality', value),
              [t('weeklyCheck.steps.sleepStress.sleepLabels.0'), t('weeklyCheck.steps.sleepStress.sleepLabels.1')]
            )}
            {renderRatingScale(
              t('weeklyCheck.steps.sleepStress.stressTitle'),
              checkData.stressLevel,
              (value) => handleRatingChange('stressLevel', value),
              [t('weeklyCheck.steps.sleepStress.stressLabels.0'), t('weeklyCheck.steps.sleepStress.stressLabels.1')]
            )}
          </View>
        );

      default:
        return null;
    }
  };

  return (
    <SafeAreaView style={[styles.safeArea, isDark && styles.darkSafeArea]}>
      {/* Header */}
      <View style={styles.header}>
        <TouchableOpacity
          style={styles.backButton}
          onPress={handleBack}
        >
          <Ionicons name="arrow-back" size={24} color={isDark ? "#FFFFFF" : "#000000"} />
        </TouchableOpacity>
        <Text style={[styles.title, isDark && styles.darkText]}>{t('weeklyCheck.title')}</Text>
        <View style={{ width: 24 }} />
      </View>

      {/* Progress indicator */}
      <View style={styles.progressContainer}>
        <View style={[styles.progressBar, isDark && styles.darkProgressBar]}>
          <View 
            style={[
              styles.progressFill, 
              { width: `${((currentStep + 1) / totalSteps) * 100}%` }
            ]} 
          />
        </View>
        <Text style={[styles.progressText, isDark && styles.darkTextSecondary]}>
          {currentStep + 1} {t('weeklyCheck.stepOf')} {totalSteps}
        </Text>
      </View>

      <ScrollView 
        style={[styles.scrollViewContainer, isDark && styles.darkContainer]}
        contentContainerStyle={styles.scrollContentContainer}
        showsVerticalScrollIndicator={false}
      >
        {renderStep()}
      </ScrollView>

      {/* Bottom buttons */}
      <View style={[styles.bottomContainer, isDark && styles.darkBottomContainer]}>
        <TouchableOpacity
          style={[styles.nextButton, isDark && styles.darkNextButton]}
          onPress={handleNext}
        >
          <Text style={[styles.nextButtonText, isDark && styles.darkNextButtonText]}>
            {currentStep === totalSteps - 1 ? t('weeklyCheck.finish') : t('weeklyCheck.next')}
          </Text>
          <Ionicons 
            name={currentStep === totalSteps - 1 ? "checkmark" : "arrow-forward"} 
            size={20} 
            color="#FFFFFF" 
          />
        </TouchableOpacity>
      </View>

      {/* Completion Modal */}
      <CompletionModal 
        visible={showCompletionModal}
        onConfirm={handleModalConfirm}
        weeklyCheckData={checkData}
      />
      
      {/* –ü–æ–∫–∞–∑—ã–≤–∞–µ–º LoadingOverlay –≤–æ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ webhook */}
      {showLoadingOverlay && <LoadingOverlay />}
    </SafeAreaView>
  );
} 