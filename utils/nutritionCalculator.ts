/**
 * üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ø–∏—Ç–∞–Ω–∏—è NutriChecker
 * –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ä–∞—Å—á–µ—Ç–∞ –∫–∞–ª–æ—Ä–∏–π –∏ –Ω—É—Ç—Ä–∏–µ–Ω—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞
 * 
 * –û—Å–Ω–æ–≤–∞–Ω –Ω–∞ –Ω–∞—É—á–Ω—ã—Ö —Ñ–æ—Ä–º—É–ª–∞—Ö:
 * - Mifflin-St Jeor –¥–ª—è BMR
 * - –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è TDEE
 * - –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –í–û–ó –∏ –¥–∏–µ—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –∞—Å—Å–æ—Ü–∏–∞—Ü–∏–π
 */

import { UserProfile } from '../app/types/onboarding';

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ä–∞—Å—á–µ—Ç–∞ –ø–∏—Ç–∞–Ω–∏—è
export interface NutritionCalculationResult {
  // –ë–∞–∑–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
  bmr: number;
  tdee: number;
  targetCalories: number;
  
  // –ú–∞–∫—Ä–æ–Ω—É—Ç—Ä–∏–µ–Ω—Ç—ã (–¥–Ω–µ–≤–Ω—ã–µ)
  dailyMacros: {
    protein: number;
    fat: number;
    carbs: number;
    percentages: { protein: number; fat: number; carbs: number };
  };
  
  // –°–∫—Ä—ã—Ç—ã–π —Å–∞—Ö–∞—Ä
  maxHiddenSugar: number;
  
  // –ù–µ–¥–µ–ª—å–Ω—ã–µ —Ü–µ–ª–∏
  weeklyTargets: {
    calories: number;
    protein: number;
    fat: number;
    carbs: number;
    hiddenSugar: number;
  };
  
  // –ü—Ä–æ–≥–Ω–æ–∑
  expectedWeightChange: number;
  
  // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏
  appliedAdjustments: {
    diet: number;
    stress: number;
    mealFrequency: number;
    foodPreferences: number;
    total: number;
  };
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
export interface ValidationResult {
  isValid: boolean;
  warnings: string[];
  recommendations: string[];
}

/**
 * 1. –†–∞—Å—á–µ—Ç –±–∞–∑–æ–≤–æ–≥–æ –º–µ—Ç–∞–±–æ–ª–∏–∑–º–∞ (BMR) –ø–æ —Ñ–æ—Ä–º—É–ª–µ Mifflin-St Jeor
 * –ù–∞–∏–±–æ–ª–µ–µ —Ç–æ—á–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∞ –¥–ª—è —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –Ω–∞—Å–µ–ª–µ–Ω–∏—è
 */
export function calculateBMR(weight: number, height: number, age: number, gender: string): number {
  if (gender === 'male') {
    return 10 * weight + 6.25 * height - 5 * age + 5;
  } else {
    // –î–ª—è female, non-binary, prefer-not-to-say –∏—Å–ø–æ–ª—å–∑—É–µ–º –∂–µ–Ω—Å–∫—É—é —Ñ–æ—Ä–º—É–ª—É
    return 10 * weight + 6.25 * height - 5 * age - 161;
  }
}

/**
 * 2. –†–∞—Å—á–µ—Ç –æ–±—â–µ–≥–æ –¥–Ω–µ–≤–Ω–æ–≥–æ —Ä–∞—Å—Ö–æ–¥–∞ —ç–Ω–µ—Ä–≥–∏–∏ (TDEE)
 * –£—á–∏—Ç—ã–≤–∞–µ—Ç —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ –Ω–∞–º–µ—Ä–µ–Ω–∏–µ –∑–∞–Ω–∏–º–∞—Ç—å—Å—è —Å–ø–æ—Ä—Ç–æ–º
 */
export function calculateTDEE(bmr: number, activityLevel: string, exerciseIntent: boolean): number {
  const activityMultipliers: Record<string, number> = {
    'sedentary': 1.2,
    'lightly-active': 1.375,
    'moderately-active': 1.55,
    'very-active': 1.725,
    'extremely-active': 1.9
  };
  
  let multiplier = activityMultipliers[activityLevel] || 1.2;
  
  // –ë–æ–Ω—É—Å –∑–∞ –Ω–∞–º–µ—Ä–µ–Ω–∏–µ –∑–∞–Ω–∏–º–∞—Ç—å—Å—è —Å–ø–æ—Ä—Ç–æ–º
  if (exerciseIntent) {
    multiplier += 0.05; // +5% –∑–∞ –ø–ª–∞–Ω–∏—Ä—É–µ–º—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
  }
  
  return bmr * multiplier;
}

/**
 * 3. –†–∞—Å—á–µ—Ç —Ü–µ–ª–µ–≤—ã—Ö –∫–∞–ª–æ—Ä–∏–π —Å —É—á–µ—Ç–æ–º —Ü–µ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * –í–∫–ª—é—á–∞–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –ø–æ –ø–ª–∞–Ω—É
 */
export function calculateTargetCalories(
  tdee: number, 
  primaryGoal: string, 
  weightLossRate: number,
  weightLossPlan: string,
  gender: string
): number {
  const minCalories = gender === 'female' ? 1200 : 1500; // –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –º–∏–Ω–∏–º—É–º—ã
  
  if (primaryGoal === 'lose-weight') {
    // 1 –∫–≥ –∂–∏—Ä–∞ = 7000 –∫–∫–∞–ª (—Å–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∞)
    const dailyDeficit = (weightLossRate * 7000) / 7;
    
    // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –ø–ª–∞–Ω—É –ø–æ—Ö—É–¥–µ–Ω–∏—è
    const planMultipliers: Record<string, number> = {
      'steady': 1.0,    // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –¥–µ—Ñ–∏—Ü–∏—Ç
      'moderate': 1.2,  // +20% –∫ –¥–µ—Ñ–∏—Ü–∏—Ç—É
      'aggressive': 1.5 // +50% –∫ –¥–µ—Ñ–∏—Ü–∏—Ç—É (–º–∞–∫—Å–∏–º—É–º)
    };
    
    const adjustedDeficit = dailyDeficit * (planMultipliers[weightLossPlan] || 1.0);
    const targetCalories = tdee - adjustedDeficit;
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    return Math.max(targetCalories, minCalories);
    
  } else if (primaryGoal === 'gain-muscle') {
    return tdee + 300; // –£–º–µ—Ä–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏—Ü–∏—Ç –¥–ª—è –Ω–∞–±–æ—Ä–∞ –º—ã—à—Ü
    
  } else if (primaryGoal === 'maintain-weight') {
    return tdee;
    
  } else {
    return tdee; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –≤–µ—Å–∞
  }
}

/**
 * 4. –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –ø–æ —Ç–∏–ø—É –¥–∏–µ—Ç—ã
 * –£—á–∏—Ç—ã–≤–∞–µ—Ç —Ç–µ—Ä–º–æ–≥–µ–Ω–µ–∑ –∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –¥–∏–µ—Ç
 */
export function getDietAdjustments(dietPreference: string): {
  calorieMultiplier: number;
  carbs: number;
  protein: number;
  fat: number;
} {
  const dietAdjustments: Record<string, any> = {
    'standard': { 
      calorieMultiplier: 1.0, 
      carbs: 0.50, protein: 0.20, fat: 0.30 
    },
    'keto': { 
      calorieMultiplier: 1.05, // +5% –∏–∑-–∑–∞ —Ç–µ—Ä–º–æ–≥–µ–Ω–µ–∑–∞
      carbs: 0.05, protein: 0.25, fat: 0.70 
    },
    'low-carb': { 
      calorieMultiplier: 1.03, 
      carbs: 0.20, protein: 0.30, fat: 0.50 
    },
    'paleo': { 
      calorieMultiplier: 1.08, // +8% –∏–∑-–∑–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–π –ø–∏—â–∏
      carbs: 0.35, protein: 0.30, fat: 0.35 
    },
    'mediterranean': { 
      calorieMultiplier: 1.02, 
      carbs: 0.45, protein: 0.20, fat: 0.35 
    },
    'vegan': { 
      calorieMultiplier: 1.05, // +5% –∏–∑-–∑–∞ –∫–ª–µ—Ç—á–∞—Ç–∫–∏
      carbs: 0.55, protein: 0.15, fat: 0.30 
    },
    'vegetarian': { 
      calorieMultiplier: 1.02, 
      carbs: 0.50, protein: 0.18, fat: 0.32 
    }
  };
  
  return dietAdjustments[dietPreference] || dietAdjustments['standard'];
}

/**
 * 5. –ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –∫–∞–ª–æ—Ä–∏–π
 * –£—á–∏—Ç—ã–≤–∞–µ—Ç —Å—Ç—Ä–µ—Å—Å, —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –∏ —Å–∞–º–æ–∫–æ–Ω—Ç—Ä–æ–ª—å
 */
export function getStressAdjustment(
  stressResponse: string, 
  confidenceLevel: number,
  temptationResponse: string,
  additionalFactors?: {
    mainObstacle?: string;
    challengesView?: string;
    setbacksResponse?: string;
    difficultSituationsHandling?: string;
    adaptability?: string;
  }
): number {
  let adjustment = 0;
  
  // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Å—Ç—Ä–µ—Å—Å—É
  if (stressResponse === 'emotional-eating') {
    adjustment += 100; // +100 –∫–∫–∞–ª –±—É—Ñ–µ—Ä –¥–ª—è —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ø–µ—Ä–µ–µ–¥–∞–Ω–∏—è
  } else if (stressResponse === 'loss-of-appetite') {
    adjustment -= 50; // -50 –∫–∫–∞–ª –ø—Ä–∏ –ø–æ—Ç–µ—Ä–µ –∞–ø–ø–µ—Ç–∏—Ç–∞
  }
  
  // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
  if (confidenceLevel <= 2) {
    adjustment += 50; // –ë—É—Ñ–µ—Ä –¥–ª—è –Ω–µ—É–≤–µ—Ä–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  } else if (confidenceLevel >= 4) {
    adjustment -= 25; // –ú–µ–Ω—å—à–∏–π –±—É—Ñ–µ—Ä –¥–ª—è —É–≤–µ—Ä–µ–Ω–Ω—ã—Ö
  }
  
  // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –∫–æ–Ω—Ç—Ä–æ–ª—é —Å–æ–±–ª–∞–∑–Ω–æ–≤
  if (temptationResponse === 'often-give-in') {
    adjustment += 75; // –ë–æ–ª—å—à–∏–π –±—É—Ñ–µ—Ä –¥–ª—è —Å–ª–∞–±–æ–≥–æ —Å–∞–º–æ–∫–æ–Ω—Ç—Ä–æ–ª—è
  } else if (temptationResponse === 'easily-resist') {
    adjustment -= 25; // –ú–µ–Ω—å—à–∏–π –±—É—Ñ–µ—Ä –¥–ª—è —Å–∏–ª—å–Ω–æ–≥–æ —Å–∞–º–æ–∫–æ–Ω—Ç—Ä–æ–ª—è
  }
  
  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Ñ–∞–∫—Ç–æ—Ä—ã
  if (additionalFactors) {
    // –û—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–µ
    if (additionalFactors.mainObstacle === 'emotional-eating') {
      adjustment += 50; // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –±—É—Ñ–µ—Ä
    } else if (additionalFactors.mainObstacle === 'busy-schedule') {
      adjustment += 30; // –ë—É—Ñ–µ—Ä –¥–ª—è –∑–∞–Ω—è—Ç—ã—Ö –ª—é–¥–µ–π
    }
    
    // –û—Ç–Ω–æ—à–µ–Ω–∏–µ –∫ –Ω–µ—É–¥–∞—á–∞–º
    if (additionalFactors.setbacksResponse === 'give-up-easily') {
      adjustment += 40; // –ë–æ–ª—å—à–∏–π –±—É—Ñ–µ—Ä –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ –ª–µ–≥–∫–æ —Å–¥–∞–µ—Ç—Å—è
    } else if (additionalFactors.setbacksResponse === 'bounce-back') {
      adjustment -= 20; // –ú–µ–Ω—å—à–∏–π –±—É—Ñ–µ—Ä –¥–ª—è —Å—Ç–æ–π–∫–∏—Ö
    }
    
    // –ê–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å
    if (additionalFactors.adaptability === 'struggle-change') {
      adjustment += 35; // –ë—É—Ñ–µ—Ä –¥–ª—è —Ç–µ—Ö, –∫–æ–º—É —Å–ª–æ–∂–Ω–æ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è
    }
  }
  
  return adjustment;
}

/**
 * 6. –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —á–∞—Å—Ç–æ—Ç–µ –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏
 * –£—á–∏—Ç—ã–≤–∞–µ—Ç —Ç–µ—Ä–º–æ–≥–µ–Ω–µ–∑ –∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–æ–µ –≥–æ–ª–æ–¥–∞–Ω–∏–µ
 */
export function getMealFrequencyAdjustment(mealFrequency: string, intermittentFasting: boolean): number {
  if (intermittentFasting) {
    return -50; // -50 –∫–∫–∞–ª –∑–∞ —Å—á–µ—Ç —É–ª—É—á—à–µ–Ω–Ω–æ–π —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫ –∏–Ω—Å—É–ª–∏–Ω—É
  }
  
  const frequencyAdjustments: Record<string, number> = {
    '2-meals': -30,    // –ú–µ–Ω—å—à–µ –ø–µ—Ä–µ–∫—É—Å–æ–≤
    '3-meals': 0,      // –°—Ç–∞–Ω–¥–∞—Ä—Ç
    '4-meals': 20,     // –ù–µ–±–æ–ª—å—à–æ–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –º–µ—Ç–∞–±–æ–ª–∏–∑–º–∞
    '5-meals': 40,     // –¢–µ—Ä–º–æ–≥–µ–Ω–µ–∑ –æ—Ç —á–∞—Å—Ç–æ–≥–æ –ø–∏—Ç–∞–Ω–∏—è
    '6-meals': 60,     // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ç–µ—Ä–º–æ–≥–µ–Ω–µ–∑
    'intermittent': -50 // –ò–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–æ–µ –≥–æ–ª–æ–¥–∞–Ω–∏–µ
  };
  
  return frequencyAdjustments[mealFrequency] || 0;
}

/**
 * 7. –†–∞—Å—á–µ—Ç –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ –≤ –±–µ–ª–∫–µ
 * –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø–æ –≤–µ—Å—É —Ç–µ–ª–∞, –∞ –Ω–µ –ø–æ –∫–∞–ª–æ—Ä–∏—è–º
 */
export function calculateProteinNeeds(
  weight: number, 
  activityLevel: string, 
  primaryGoal: string,
  nutritionFocus: string
): number {
  let proteinPerKg = 1.2; // –ë–∞–∑–æ–≤–∞—è –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å
  
  // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
  if (activityLevel === 'very-active' || activityLevel === 'extremely-active') {
    proteinPerKg = 1.8;
  } else if (activityLevel === 'moderately-active') {
    proteinPerKg = 1.5;
  }
  
  // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Ü–µ–ª–∏
  if (primaryGoal === 'gain-muscle') {
    proteinPerKg = Math.max(proteinPerKg, 2.0);
  } else if (primaryGoal === 'lose-weight') {
    proteinPerKg = Math.max(proteinPerKg, 1.6); // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º—ã—à—Ü –ø—Ä–∏ –ø–æ—Ö—É–¥–µ–Ω–∏–∏
  }
  
  // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Ñ–æ–∫—É—Å—É –ø–∏—Ç–∞–Ω–∏—è
  if (nutritionFocus === 'high-protein') {
    proteinPerKg *= 1.2; // +20% –±–µ–ª–∫–∞
  }
  
  return weight * proteinPerKg;
}

/**
 * 8. –ü–æ–ª–Ω—ã–π —Ä–∞—Å—á–µ—Ç –º–∞–∫—Ä–æ–Ω—É—Ç—Ä–∏–µ–Ω—Ç–æ–≤
 * –ë–µ–ª–æ–∫ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω, –∂–∏—Ä—ã –∏ —É–≥–ª–µ–≤–æ–¥—ã —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è—é—Ç—Å—è –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
 */
export function calculateMacronutrients(
  targetCalories: number,
  proteinGrams: number,
  dietPreference: string,
  nutritionFocus: string
): {
  protein: number;
  fat: number;
  carbs: number;
  percentages: { protein: number; fat: number; carbs: number };
} {
  const dietRatios = getDietAdjustments(dietPreference);
  
  // –ë–µ–ª–æ–∫ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω –ø–æ –≤–µ—Å—É —Ç–µ–ª–∞
  const proteinCalories = proteinGrams * 4;
  
  // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–π –ø–æ —Ñ–æ–∫—É—Å—É –ø–∏—Ç–∞–Ω–∏—è
  let fatRatio = dietRatios.fat;
  let carbRatio = dietRatios.carbs;
  
  if (nutritionFocus === 'low-carb') {
    carbRatio *= 0.7; // -30% —É–≥–ª–µ–≤–æ–¥–æ–≤
    fatRatio = 1 - (proteinCalories / targetCalories) - carbRatio;
  } else if (nutritionFocus === 'plant-based') {
    carbRatio *= 1.1; // +10% —É–≥–ª–µ–≤–æ–¥–æ–≤
    fatRatio = 1 - (proteinCalories / targetCalories) - carbRatio;
  }
  
  // –†–∞—Å—á–µ—Ç –∂–∏—Ä–æ–≤ –∏ —É–≥–ª–µ–≤–æ–¥–æ–≤
  const remainingCalories = targetCalories - proteinCalories;
  const fatCalories = remainingCalories * (fatRatio / (fatRatio + carbRatio));
  const carbCalories = remainingCalories - fatCalories;
  
  const fatGrams = fatCalories / 9;
  const carbGrams = carbCalories / 4;
  
  return {
    protein: Math.round(proteinGrams),
    fat: Math.round(fatGrams),
    carbs: Math.round(carbGrams),
    percentages: {
      protein: Math.round((proteinCalories / targetCalories) * 100),
      fat: Math.round((fatCalories / targetCalories) * 100),
      carbs: Math.round((carbCalories / targetCalories) * 100)
    }
  };
}

/**
 * 9. –†–∞—Å—á–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥–æ–∑—ã —Å–∫—Ä—ã—Ç–æ–≥–æ —Å–∞—Ö–∞—Ä–∞
 * –û—Å–Ω–æ–≤–∞–Ω –Ω–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è—Ö –í–û–ó (<10% –∫–∞–ª–æ—Ä–∏–π, –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ <5%)
 */
export function calculateMaxHiddenSugar(targetCalories: number, dietPreference: string): number {
  // –í–û–ó —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç <10% –∫–∞–ª–æ—Ä–∏–π –æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–∞—Ö–∞—Ä–∞, –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ <5%
  let maxSugarPercentage = 0.10; // 10% –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  
  // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Ç–∏–ø—É –¥–∏–µ—Ç—ã
  if (dietPreference === 'keto') {
    maxSugarPercentage = 0.02; // 2% –¥–ª—è –∫–µ—Ç–æ
  } else if (dietPreference === 'low-carb') {
    maxSugarPercentage = 0.05; // 5% –¥–ª—è –Ω–∏–∑–∫–æ—É–≥–ª–µ–≤–æ–¥–Ω–æ–π
  } else if (dietPreference === 'mediterranean') {
    maxSugarPercentage = 0.07; // 7% –¥–ª—è —Å—Ä–µ–¥–∏–∑–µ–º–Ω–æ–º–æ—Ä—Å–∫–æ–π
  }
  
  const maxSugarCalories = targetCalories * maxSugarPercentage;
  const maxSugarGrams = maxSugarCalories / 4; // 1–≥ —Å–∞—Ö–∞—Ä–∞ = 4 –∫–∫–∞–ª
  
  return Math.round(maxSugarGrams);
}

/**
 * 10. –†–∞—Å—á–µ—Ç –Ω–µ–¥–µ–ª—å–Ω—ã—Ö —Ü–µ–ª–µ–π
 * –£–º–Ω–æ–∂–µ–Ω–∏–µ –¥–Ω–µ–≤–Ω—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π –Ω–∞ 7 –¥–Ω–µ–π
 */
export function calculateWeeklyTargets(dailyTargets: {
  calories: number;
  protein: number;
  fat: number;
  carbs: number;
  hiddenSugar: number;
}): {
  weekly: typeof dailyTargets;
  expectedWeightChange: number;
} {
  return {
    weekly: {
      calories: dailyTargets.calories * 7,
      protein: dailyTargets.protein * 7,
      fat: dailyTargets.fat * 7,
      carbs: dailyTargets.carbs * 7,
      hiddenSugar: dailyTargets.hiddenSugar * 7
    },
    expectedWeightChange: 0.5 // –∫–≥/–Ω–µ–¥–µ–ª—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  };
}

/**
 * 12. –†–∞—Å—á–µ—Ç –≤–æ–∑—Ä–∞—Å—Ç–∞ –∏–∑ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è
 */
export function calculateAge(birthday: string): number {
  const birthDate = new Date(birthday);
  const today = new Date();
  let age = today.getFullYear() - birthDate.getFullYear();
  const monthDiff = today.getMonth() - birthDate.getMonth();
  
  if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birthDate.getDate())) {
    age--;
  }
  
  return Math.max(age, 18); // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç 18 –ª–µ—Ç
}

/**
 * 13. –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ä–∞—Å—á–µ—Ç–∞
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –≤—ã–¥–∞—á–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
 */
export function validateNutritionResults(result: NutritionCalculationResult, userProfile: Partial<UserProfile>): ValidationResult {
  const warnings: string[] = [];
  const recommendations: string[] = [];
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö –∫–∞–ª–æ—Ä–∏–π
  const minCalories = userProfile.gender === 'female' ? 1200 : 1500;
  if (result.targetCalories < minCalories) {
    warnings.push(`–ö–∞–ª–æ—Ä–∏–∏ –Ω–∏–∂–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –º–∏–Ω–∏–º—É–º–∞ (${minCalories})`);
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–≥–æ –¥–µ—Ñ–∏—Ü–∏—Ç–∞
  const deficit = result.tdee - result.targetCalories;
  if (deficit > 1000) {
    warnings.push('–°–ª–∏—à–∫–æ–º –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π –¥–µ—Ñ–∏—Ü–∏—Ç –∫–∞–ª–æ—Ä–∏–π (>1000 –∫–∫–∞–ª/–¥–µ–Ω—å)');
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–ª–∫–∞
  const weight = userProfile.currentWeight || userProfile.weight;
  if (weight) {
    const proteinPerKg = result.dailyMacros.protein / weight;
    if (proteinPerKg < 1.0) {
      recommendations.push('–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –±–µ–ª–∫–∞');
    }
  }
  
  // –ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
  const medication = userProfile.medication || (userProfile as any).medicationUse;
  if (medication && medication !== 'not-using') {
    recommendations.push('–ü—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É–π—Ç–µ—Å—å —Å –≤—Ä–∞—á–æ–º –ø—Ä–∏ –ø—Ä–∏–µ–º–µ –ª–µ–∫–∞—Ä—Å—Ç–≤');
  }
  
  // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –¥–∏–µ—Ç–µ
  if (userProfile.dietPreference === 'keto' || userProfile.dietPreference === 'low-carb') {
    recommendations.push('–ü—Ä–∏ –Ω–∏–∑–∫–æ—É–≥–ª–µ–≤–æ–¥–Ω–æ–π –¥–∏–µ—Ç–µ —Å–ª–µ–¥–∏—Ç–µ –∑–∞ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ–º –∫–ª–µ—Ç—á–∞—Ç–∫–∏');
  }
  
  if (userProfile.dietPreference === 'vegan') {
    recommendations.push('–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –≤–∏—Ç–∞–º–∏–Ω B12, –∂–µ–ª–µ–∑–æ –∏ –æ–º–µ–≥–∞-3');
  }
  
  // –ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
  if (userProfile.stressResponse === 'emotional-eating') {
    recommendations.push('–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ –ø–∏—Ç–∞–Ω–∏—è');
  }
  
  if (userProfile.confidenceLevel && userProfile.confidenceLevel <= 2) {
    recommendations.push('–ù–∞—á–Ω–∏—Ç–µ —Å –Ω–µ–±–æ–ª—å—à–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏');
  }
  
  return {
    isValid: warnings.length === 0,
    warnings,
    recommendations
  };
}

/**
 * üéØ –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ä–∞—Å—á–µ—Ç –≤—Å–µ—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π –ø–∏—Ç–∞–Ω–∏—è
 * –û–±—ä–µ–¥–∏–Ω—è–µ—Ç –≤—Å–µ —Ñ–æ—Ä–º—É–ª—ã –∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –≤ –µ–¥–∏–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
 */
export function calculateCompleteNutrition(userProfile: Partial<UserProfile>): NutritionCalculationResult {
  // –ü–æ–ª—É—á–∞–µ–º –≤–µ—Å —Å fallback –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
  const weight = userProfile.currentWeight || userProfile.weight;
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
  if (!weight || !userProfile.height || !userProfile.birthday || !userProfile.gender) {
    throw new Error('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ø–∏—Ç–∞–Ω–∏—è');
  }
  
  // 1. –†–∞—Å—á–µ—Ç –≤–æ–∑—Ä–∞—Å—Ç–∞
  const age = calculateAge(userProfile.birthday);
  
  // 2. BMR
  const bmr = calculateBMR(weight, userProfile.height, age, userProfile.gender);
  
  // 3. TDEE
  const tdee = calculateTDEE(
    bmr, 
    userProfile.activityLevel || 'lightly-active', 
    userProfile.exerciseIntent || false
  );
  
  // 4. –ë–∞–∑–æ–≤—ã–µ —Ü–µ–ª–µ–≤—ã–µ –∫–∞–ª–æ—Ä–∏–∏
  const baseCalories = calculateTargetCalories(
    tdee, 
    userProfile.primaryGoal || 'maintain-weight', 
    userProfile.weightLossRate || 0.5,
    userProfile.weightLossPlan || 'steady',
    userProfile.gender
  );
  
  // 5. –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–æ–∫
  const dietAdjustment = getDietAdjustments(userProfile.dietPreference || 'standard');
  const stressAdjustment = getStressAdjustment(
    userProfile.stressResponse || 'exercise',
    userProfile.confidenceLevel || 3,
    userProfile.temptationResponse || 'usually-control',
    {
      mainObstacle: (userProfile as any).mainObstacle,
      challengesView: (userProfile as any).challengesView,
      setbacksResponse: (userProfile as any).setbacksResponse,
      difficultSituationsHandling: (userProfile as any).difficultSituationsHandling,
      adaptability: (userProfile as any).adaptability
    }
  );
  const mealFrequencyAdjustment = getMealFrequencyAdjustment(
    userProfile.mealFrequency || '3-meals',
    userProfile.intermittentFasting || false
  );
  const foodPreferencesAdjustment = getFoodPreferencesAdjustment(
    (userProfile as any).foodPreferences,
    (userProfile as any).foodVariety,
    (userProfile as any).mealFeelings
  );
  
  // 6. –§–∏–Ω–∞–ª—å–Ω—ã–µ –∫–∞–ª–æ—Ä–∏–∏
  const finalCalories = Math.round(
    baseCalories * dietAdjustment.calorieMultiplier + 
    stressAdjustment + 
    mealFrequencyAdjustment +
    foodPreferencesAdjustment
  );
  
  // 7. –ë–µ–ª–∫–∏
  const proteinGrams = calculateProteinNeeds(
    weight,
    userProfile.activityLevel || 'lightly-active',
    userProfile.primaryGoal || 'maintain-weight',
    userProfile.nutritionFocus || 'balanced'
  );
  
  // 8. –ú–∞–∫—Ä–æ–Ω—É—Ç—Ä–∏–µ–Ω—Ç—ã
  const macros = calculateMacronutrients(
    finalCalories,
    proteinGrams,
    userProfile.dietPreference || 'standard',
    userProfile.nutritionFocus || 'balanced'
  );
  
  // 9. –°–∫—Ä—ã—Ç—ã–π —Å–∞—Ö–∞—Ä
  const maxHiddenSugar = calculateMaxHiddenSugar(finalCalories, userProfile.dietPreference || 'standard');
  
  // 10. –ù–µ–¥–µ–ª—å–Ω—ã–µ —Ü–µ–ª–∏
  const weeklyTargets = calculateWeeklyTargets({
    calories: finalCalories,
    protein: macros.protein,
    fat: macros.fat,
    carbs: macros.carbs,
    hiddenSugar: maxHiddenSugar
  });
  
  return {
    bmr: Math.round(bmr),
    tdee: Math.round(tdee),
    targetCalories: finalCalories,
    dailyMacros: macros,
    maxHiddenSugar,
    weeklyTargets: weeklyTargets.weekly,
    expectedWeightChange: userProfile.weightLossRate || 0.5,
    appliedAdjustments: {
      diet: Math.round((dietAdjustment.calorieMultiplier - 1) * baseCalories),
      stress: stressAdjustment,
      mealFrequency: mealFrequencyAdjustment,
      foodPreferences: foodPreferencesAdjustment,
      total: finalCalories - baseCalories
    }
  };
}

/**
 * üîÑ –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ—Å—á–µ—Ç–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
 */
export function recalculateNutrition(
  currentResult: NutritionCalculationResult,
  updatedProfile: Partial<UserProfile>
): NutritionCalculationResult {
  // –ï—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –¥–µ–ª–∞–µ–º –ø–æ–ª–Ω—ã–π –ø–µ—Ä–µ—Å—á–µ—Ç
  const criticalFields = ['weight', 'height', 'birthday', 'gender', 'primaryGoal', 'activityLevel'];
  const needsFullRecalculation = criticalFields.some(field => 
    updatedProfile[field as keyof UserProfile] !== undefined
  );
  
  if (needsFullRecalculation) {
    return calculateCompleteNutrition(updatedProfile);
  }
  
  // –ò–Ω–∞—á–µ –¥–µ–ª–∞–µ–º —á–∞—Å—Ç–∏—á–Ω—ã–π –ø–µ—Ä–µ—Å—á–µ—Ç —Ç–æ–ª—å–∫–æ –∏–∑–º–µ–Ω–µ–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
  return currentResult; // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è, –º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å
}

/**
 * 6.5. –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –ø–æ –ø–∏—â–µ–≤—ã–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è–º
 * –£—á–∏—Ç—ã–≤–∞–µ—Ç –æ—Ç–Ω–æ—à–µ–Ω–∏–µ –∫ –µ–¥–µ –∏ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—é
 */
export function getFoodPreferencesAdjustment(
  foodPreferences?: string,
  foodVariety?: string,
  mealFeelings?: string
): number {
  let adjustment = 0;
  
  // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è–º
  if (foodPreferences === 'convenience') {
    adjustment += 50; // –ë—É—Ñ–µ—Ä –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç —É–¥–æ–±—Å—Ç–≤–æ
  } else if (foodPreferences === 'health') {
    adjustment -= 30; // –ú–µ–Ω—å—à–µ –∫–∞–ª–æ—Ä–∏–π –¥–ª—è –∑–¥–æ—Ä–æ–≤—ã—Ö –µ–¥–æ–∫–æ–≤
  }
  
  // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—é
  if (foodVariety === 'rarely') {
    adjustment += 40; // –ë—É—Ñ–µ—Ä –¥–ª—è –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã—Ö –µ–¥–æ–∫–æ–≤
  } else if (foodVariety === 'always') {
    adjustment -= 20; // –ú–µ–Ω—å—à–µ –¥–ª—è –ª—é–±–∏—Ç–µ–ª–µ–π —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è
  }
  
  // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –æ—â—É—â–µ–Ω–∏—è–º –ø–æ—Å–ª–µ –µ–¥—ã
  if (mealFeelings === 'sluggish') {
    adjustment += 60; // –ë–æ–ª—å—à–∏–π –±—É—Ñ–µ—Ä –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ —á—É–≤—Å—Ç–≤—É–µ—Ç –≤—è–ª–æ—Å—Ç—å
  } else if (mealFeelings === 'energized') {
    adjustment -= 25; // –ú–µ–Ω—å—à–µ –¥–ª—è —ç–Ω–µ—Ä–≥–∏—á–Ω—ã—Ö
  }
  
  return adjustment;
}

// –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
export default {
  calculateCompleteNutrition,
  validateNutritionResults,
  recalculateNutrition,
  calculateBMR,
  calculateTDEE,
  calculateAge
}; 