/**
 * –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–∏—Ç–∞–Ω–∏—è
 */

import AsyncStorage from '@react-native-async-storage/async-storage';

export interface DataIntegrityReport {
  totalDays: number;
  duplicateProducts: Array<{
    productId: string;
    dates: string[];
    count: number;
  }>;
  inconsistentCalories: Array<{
    date: string;
    calculatedCalories: number;
    storedCalories: number;
    difference: number;
  }>;
  missingTimestamps: Array<{
    date: string;
    productsWithoutTimestamp: number;
  }>;
  sugarInconsistencies: Array<{
    date: string;
    calculatedSugar: number;
    storedSugar: number;
    difference: number;
  }>;
}

/**
 * –õ–æ–≥–∏—Ä—É–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–∏—Ç–∞–Ω–∏—è
 */
export const logNutritionState = async (context: string, currentDate?: Date) => {
  try {
    const { formatDateToString, getAllDailyNutrition } = await import('../services/dailyNutrition');
    
    console.log(`\nüîç === NUTRITION STATE DEBUG [${context}] ===`);
    
    if (currentDate) {
      const dateStr = formatDateToString(currentDate);
      console.log(`üìÖ –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞: ${dateStr}`);
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
    const allDays = await getAllDailyNutrition();
    console.log(`üìä –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π —Å –¥–∞–Ω–Ω—ã–º–∏: ${allDays.length}`);
    
    for (const day of allDays) {
      console.log(`\nüìÖ –î–∞—Ç–∞: ${day.date}`);
      console.log(`   –ö–∞–ª–æ—Ä–∏–∏: ${day.caloriesConsumed}`);
      console.log(`   –°–∞—Ö–∞—Ä: ${day.sugar}`);
      console.log(`   –ü—Ä–æ–¥—É–∫—Ç–æ–≤: ${day.addedProducts.length}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –ø—Ä–æ–¥—É–∫—Ç
      day.addedProducts.forEach((product, index) => {
        console.log(`   [${index}] ${product.name}`);
        console.log(`       ID: ${product.productId}`);
        console.log(`       –ö–∞–ª–æ—Ä–∏–∏: ${product.calories}`);
        console.log(`       –°–∞—Ö–∞—Ä: ${product.sugar}`);
        console.log(`       Timestamp: ${product.timestamp ? new Date(product.timestamp).toLocaleString() : '–ù–ï–¢'}`);
      });
      
      // –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—É–º–º—ã –∫–∞–ª–æ—Ä–∏–π
      const calculatedCalories = day.addedProducts.reduce((sum, p) => sum + p.calories, 0);
      if (Math.abs(calculatedCalories - day.caloriesConsumed) > 1) {
        console.log(`   ‚ö†Ô∏è –ù–ï–°–û–û–¢–í–ï–¢–°–¢–í–ò–ï –ö–ê–õ–û–†–ò–ô: —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–æ=${calculatedCalories}, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ=${day.caloriesConsumed}`);
      }
      
      // –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—É–º–º—ã —Å–∞—Ö–∞—Ä–∞
      const calculatedSugar = day.addedProducts.reduce((sum, p) => sum + p.sugar, 0);
      if (Math.abs(calculatedSugar - day.sugar) > 0.1) {
        console.log(`   ‚ö†Ô∏è –ù–ï–°–û–û–¢–í–ï–¢–°–¢–í–ò–ï –°–ê–•–ê–†–ê: —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–æ=${calculatedSugar}, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ=${day.sugar}`);
      }
    }
    
    console.log(`üîç === END NUTRITION STATE DEBUG ===\n`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è:', error);
  }
};

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –ø–∏—Ç–∞–Ω–∏—è
 */
export const checkDataIntegrity = async (): Promise<DataIntegrityReport> => {
  const report: DataIntegrityReport = {
    totalDays: 0,
    duplicateProducts: [],
    inconsistentCalories: [],
    missingTimestamps: [],
    sugarInconsistencies: []
  };
  
  try {
    const { getAllDailyNutrition } = await import('../services/dailyNutrition');
    const allDays = await getAllDailyNutrition();
    report.totalDays = allDays.length;
    
    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø—Ä–æ–¥—É–∫—Ç–æ–≤
    const productTracker = new Map<string, string[]>();
    
    for (const day of allDays) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–ª–æ—Ä–∏–∏
      const calculatedCalories = day.addedProducts.reduce((sum, p) => sum + p.calories, 0);
      if (Math.abs(calculatedCalories - day.caloriesConsumed) > 1) {
        report.inconsistentCalories.push({
          date: day.date,
          calculatedCalories,
          storedCalories: day.caloriesConsumed,
          difference: calculatedCalories - day.caloriesConsumed
        });
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∞—Ö–∞—Ä
      const calculatedSugar = day.addedProducts.reduce((sum, p) => sum + p.sugar, 0);
      if (Math.abs(calculatedSugar - day.sugar) > 0.1) {
        report.sugarInconsistencies.push({
          date: day.date,
          calculatedSugar,
          storedSugar: day.sugar,
          difference: calculatedSugar - day.sugar
        });
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º timestamp
      const productsWithoutTimestamp = day.addedProducts.filter(p => !p.timestamp).length;
      if (productsWithoutTimestamp > 0) {
        report.missingTimestamps.push({
          date: day.date,
          productsWithoutTimestamp
        });
      }
      
      // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
      day.addedProducts.forEach(product => {
        const key = `${product.productId}-${product.name}`;
        if (!productTracker.has(key)) {
          productTracker.set(key, []);
        }
        productTracker.get(key)!.push(day.date);
      });
    }
    
    // –ù–∞—Ö–æ–¥–∏–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    for (const [key, dates] of productTracker.entries()) {
      if (dates.length > 1) {
        const [productId] = key.split('-');
        report.duplicateProducts.push({
          productId,
          dates,
          count: dates.length
        });
      }
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
  }
  
  return report;
};

/**
 * –ü–µ—á–∞—Ç–∞–µ—Ç –æ—Ç—á–µ—Ç –æ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
 */
export const printIntegrityReport = (report: DataIntegrityReport) => {
  console.log('\nüìã === –û–¢–ß–ï–¢ –û –¶–ï–õ–û–°–¢–ù–û–°–¢–ò –î–ê–ù–ù–´–• ===');
  console.log(`üìä –í—Å–µ–≥–æ –¥–Ω–µ–π —Å –¥–∞–Ω–Ω—ã–º–∏: ${report.totalDays}`);
  
  if (report.duplicateProducts.length > 0) {
    console.log(`\nüîÑ –î—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –ø—Ä–æ–¥—É–∫—Ç—ã (${report.duplicateProducts.length}):`);
    report.duplicateProducts.forEach(dup => {
      console.log(`   ${dup.productId}: ${dup.count} —Ä–∞–∑ –≤ –¥–∞—Ç–∞—Ö [${dup.dates.join(', ')}]`);
    });
  }
  
  if (report.inconsistentCalories.length > 0) {
    console.log(`\n‚ö†Ô∏è –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∫–∞–ª–æ—Ä–∏–π (${report.inconsistentCalories.length}):`);
    report.inconsistentCalories.forEach(inc => {
      console.log(`   ${inc.date}: —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–æ=${inc.calculatedCalories}, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ=${inc.storedCalories}, —Ä–∞–∑–Ω–∏—Ü–∞=${inc.difference}`);
    });
  }
  
  if (report.sugarInconsistencies.length > 0) {
    console.log(`\nüçØ –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Å–∞—Ö–∞—Ä–∞ (${report.sugarInconsistencies.length}):`);
    report.sugarInconsistencies.forEach(inc => {
      console.log(`   ${inc.date}: —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–æ=${inc.calculatedSugar}, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ=${inc.storedSugar}, —Ä–∞–∑–Ω–∏—Ü–∞=${inc.difference}`);
    });
  }
  
  if (report.missingTimestamps.length > 0) {
    console.log(`\n‚è∞ –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ timestamp (${report.missingTimestamps.length}):`);
    report.missingTimestamps.forEach(miss => {
      console.log(`   ${miss.date}: ${miss.productsWithoutTimestamp} –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –±–µ–∑ timestamp`);
    });
  }
  
  console.log('üìã === –ö–û–ù–ï–¶ –û–¢–ß–ï–¢–ê ===\n');
};

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –ª–æ–≥–∏—Ä—É–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞
 */
export const logAfterProductAdd = async (productName: string, targetDate: Date) => {
  const { formatDateToString } = await import('../services/dailyNutrition');
  const dateStr = formatDateToString(targetDate);
  console.log(`\nüçΩÔ∏è === –ü–û–°–õ–ï –î–û–ë–ê–í–õ–ï–ù–ò–Ø –ü–†–û–î–£–ö–¢–ê: ${productName} ===`);
  console.log(`üìÖ –¶–µ–ª–µ–≤–∞—è –¥–∞—Ç–∞: ${dateStr}`);
  
  await logNutritionState(`–ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è ${productName}`, targetDate);
  
  const report = await checkDataIntegrity();
  printIntegrityReport(report);
};

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –ª–æ–≥–∏—Ä—É–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞
 */
export const logAfterProductDelete = async (productId: string, targetDate: Date) => {
  const { formatDateToString } = await import('../services/dailyNutrition');
  const dateStr = formatDateToString(targetDate);
  console.log(`\nüóëÔ∏è === –ü–û–°–õ–ï –£–î–ê–õ–ï–ù–ò–Ø –ü–†–û–î–£–ö–¢–ê: ${productId} ===`);
  console.log(`üìÖ –¶–µ–ª–µ–≤–∞—è –¥–∞—Ç–∞: ${dateStr}`);
  
  await logNutritionState(`–ü–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è ${productId}`, targetDate);
  
  const report = await checkDataIntegrity();
  printIntegrityReport(report);
};

/**
 * –û—á–∏—â–∞–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–∏—Ç–∞–Ω–∏—è –∏ –ª–æ–≥–∏—Ä—É–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å
 */
export const clearAllDataWithLogging = async () => {
  console.log('\nüßπ === –û–ß–ò–°–¢–ö–ê –í–°–ï–• –î–ê–ù–ù–´–• ===');
  
  await logNutritionState('–ü–µ—Ä–µ–¥ –æ—á–∏—Å—Ç–∫–æ–π');
  
  try {
    await AsyncStorage.removeItem('dailyNutrition');
    console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –ø–∏—Ç–∞–Ω–∏—è –æ—á–∏—â–µ–Ω—ã');
    
    await logNutritionState('–ü–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö:', error);
  }
  
  console.log('üßπ === –û–ß–ò–°–¢–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê ===\n');
};

/**
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–π –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞
 */
export const testProductLifecycle = async () => {
  console.log('\nüß™ === –¢–ï–°–¢ –ñ–ò–ó–ù–ï–ù–ù–û–ì–û –¶–ò–ö–õ–ê –ü–†–û–î–£–ö–¢–ê ===');
  
  const today = new Date();
  const yesterday = new Date(today);
  yesterday.setDate(yesterday.getDate() - 1);
  
  console.log('üìä –ò—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:');
  await logNutritionState('–ò—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ');
  
  // –ò–º–∏—Ç–∏—Ä—É–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞
  console.log('\nüçΩÔ∏è –ò–º–∏—Ç–∞—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞...');
  // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç
  
  console.log('üß™ === –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù ===\n');
}; 