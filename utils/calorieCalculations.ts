import AsyncStorage from '@react-native-async-storage/async-storage';

// –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤ —Ä–∞–º–∫–∞—Ö —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
let hasCheckedFirstTimeInSession = false;
let isFirstTimeInSession = false;

/**
 * –ü–æ–ª—É—á–∏—Ç—å –∫–∞–ª–æ—Ä–∏–∏ –∑–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é –¥–∞—Ç—É
 */
export const getCaloriesForDate = async (date: string): Promise<number> => {
  try {
    const storageKey = `daily_calories_${date}`;
    const savedCalories = await AsyncStorage.getItem(storageKey);
    return savedCalories ? parseFloat(savedCalories) : 0;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞–ª–æ—Ä–∏–π –∑–∞ –¥–∞—Ç—É:', error);
    return 0;
  }
};

/**
 * –ü–æ–ª—É—á–∏—Ç—å –∫–∞–ª–æ—Ä–∏–∏ –∑–∞ –≤—á–µ—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å
 */
export const getYesterdayCalories = async (): Promise<number | null> => {
  try {
    const yesterday = new Date();
    yesterday.setDate(yesterday.getDate() - 1);
    const yesterdayString = yesterday.toISOString().split('T')[0]; // YYYY-MM-DD
    
    const calories = await getCaloriesForDate(yesterdayString);
    return calories > 0 ? calories : null; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º null –µ—Å–ª–∏ –∫–∞–ª–æ—Ä–∏–π –Ω–µ—Ç
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞–ª–æ—Ä–∏–π –∑–∞ –≤—á–µ—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å:', error);
    return null;
  }
};

/**
 * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –ø–µ—Ä–≤—ã–π –ª–∏ —ç—Ç–æ –∑–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 */
export const isFirstTimeUser = async (): Promise<boolean> => {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –∑–∞ —Å–µ—Å—Å–∏—é
    if (hasCheckedFirstTimeInSession) {
      console.log('üîç –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—ã–∑–æ–≤ isFirstTimeUser –≤ —Å–µ—Å—Å–∏–∏:', isFirstTimeInSession);
      return isFirstTimeInSession;
    }

    const hasUsedApp = await AsyncStorage.getItem('app_used_before');
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞:', { hasUsedApp });
    
    if (!hasUsedApp) {
      // –≠—Ç–æ –ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫
      console.log('‚úÖ –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è!');
      isFirstTimeInSession = true;
      hasCheckedFirstTimeInSession = true;
      
      // –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–æ—Å—å
      await AsyncStorage.setItem('app_used_before', 'true');
      return true;
    } else {
      // –ù–µ –ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫
      console.log('‚ùå –ù–µ –ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫');
      isFirstTimeInSession = false;
      hasCheckedFirstTimeInSession = true;
      return false;
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞:', error);
    hasCheckedFirstTimeInSession = true;
    isFirstTimeInSession = false;
    return false;
  }
};

/**
 * –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ü–µ–ª—å –ø–æ –∫–∞–ª–æ—Ä–∏—è–º
 */
export const getCurrentCalorieGoal = async (): Promise<number> => {
  try {
    const savedGoal = await AsyncStorage.getItem('calorie_goal');
    return savedGoal ? parseFloat(savedGoal) : 1842; // –î–µ—Ñ–æ–ª—Ç–Ω–∞—è —Ü–µ–ª—å 1842
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–ª–∏ –ø–æ –∫–∞–ª–æ—Ä–∏—è–º:', error);
    return 1842;
  }
};

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–±—Ä–æ—Å–∞ —Ñ–ª–∞–≥–∞ –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
 */
export const resetFirstTimeUser = async (): Promise<void> => {
  try {
    await AsyncStorage.removeItem('app_used_before');
    hasCheckedFirstTimeInSession = false;
    isFirstTimeInSession = false;
    console.log('üîÑ –§–ª–∞–≥ –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ —Å–±—Ä–æ—à–µ–Ω');
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ —Ñ–ª–∞–≥–∞ –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞:', error);
  }
}; 