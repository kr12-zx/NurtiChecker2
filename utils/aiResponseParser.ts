// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ AI –æ—Ç–≤–µ—Ç–∞ –∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç

interface ParsedAIRecommendations {
  nutritionRecommendations: {
    shortSummary: string;
    bulletPoints: string[];
  };
  weeklyFocus: {
    mainGoal: string;
    specificFoods: string[];
    avoidOrReduce: string[];
  };
  progressNotes: {
    weightProgress: string;
    nutritionQuality: string;
    challengeEvolution: string;
    encouragement: string;
  };
  nextWeekTargets: {
    calorieTarget: string;
    macroFocus: string;
    behavioralGoal: string;
    activitySuggestion: string;
  };
}

export const parseAIResponse = (aiResponse: any): ParsedAIRecommendations | null => {
  try {
    console.log('üîç –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ AI –æ—Ç–≤–µ—Ç–∞:', typeof aiResponse, Array.isArray(aiResponse));
    
    // –ï—Å–ª–∏ —ç—Ç–æ –º–∞—Å—Å–∏–≤ - –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç
    if (Array.isArray(aiResponse) && aiResponse.length > 0) {
      console.log('üì¶ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–∞—Å—Å–∏–≤, –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç');
      return parseAIResponse(aiResponse[0]);
    }
    
    // –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ä–µ–∫—Ç —Å –ø–æ–ª–µ–º "text" - –∏–∑–≤–ª–µ–∫–∞–µ–º text
    if (aiResponse && typeof aiResponse === 'object' && aiResponse.text) {
      console.log('üìù –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ text, –∏–∑–≤–ª–µ–∫–∞–µ–º...');
      return parseAIResponse(aiResponse.text);
    }
    
    // –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ —Å markdown –∫–æ–¥–æ–º - –∏–∑–≤–ª–µ–∫–∞–µ–º JSON
    if (typeof aiResponse === 'string') {
      let cleanJson = aiResponse;
      
      // –£–±–∏—Ä–∞–µ–º markdown –∫–æ–¥-–±–ª–æ–∫–∏
      if (aiResponse.includes('```json') || aiResponse.includes('```')) {
        console.log('üßπ –û—á–∏—â–∞–µ–º markdown –∫–æ–¥-–±–ª–æ–∫–∏...');
        cleanJson = aiResponse
          .replace(/```json\s*/g, '')
          .replace(/```\s*/g, '')
          .trim();
      }
      
      // –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON
      try {
        const parsed = JSON.parse(cleanJson);
        console.log('‚úÖ JSON —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω');
        return parseAIResponse(parsed); // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
      } catch (jsonError) {
        console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON, –ø—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–µ–∫—Å—Ç–∞');
        return parseTextResponse(aiResponse);
      }
    }
    
    // –ï—Å–ª–∏ —ç—Ç–æ —É–∂–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç - –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—è
    if (aiResponse && typeof aiResponse === 'object') {
      if (
        aiResponse.nutritionRecommendations &&
        aiResponse.weeklyFocus &&
        aiResponse.progressNotes &&
        aiResponse.nextWeekTargets
      ) {
        console.log('‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –≤–∞–ª–∏–¥–µ–Ω');
        return aiResponse as ParsedAIRecommendations;
      } else {
        console.warn('‚ö†Ô∏è –ù–µ–ø–æ–ª–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ–±—ä–µ–∫—Ç–∞:', Object.keys(aiResponse));
      }
    }

    console.warn('‚ö†Ô∏è –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç AI –æ—Ç–≤–µ—Ç–∞');
    return null;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ AI –æ—Ç–≤–µ—Ç–∞:', error);
    return null;
  }
};

// –ü–∞—Ä—Å–∏–Ω–≥ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ (fallback) - –ù–ï –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞—Ö–∞—Ä–¥–∫–æ–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
const parseTextResponse = (text: string): ParsedAIRecommendations | null => {
  try {
    console.log('üîç –ü–∞—Ä—Å–∏–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç:', text.substring(0, 200) + '...');
    
    // –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏–∑ —Ç–µ–∫—Å—Ç–∞
    const lines = text.split('\n').filter(line => line.trim());
    
    // –ò—â–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Å–µ–∫—Ü–∏–∏
    let summary = '';
    const bulletPoints: string[] = [];
    let mainGoal = '';
    let encouragement = '';
    const specificFoods: string[] = [];
    const avoidOrReduce: string[] = [];
    let weightProgress = '';
    let nutritionQuality = '';
    let challengeEvolution = '';
    let calorieTarget = '';
    let macroFocus = '';
    let behavioralGoal = '';
    let activitySuggestion = '';

    let currentSection = '';
    
    for (const line of lines) {
      const trimmed = line.trim();
      const lower = trimmed.toLowerCase();
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Å–µ–∫—Ü–∏—é
      if (lower.includes('—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏') && lower.includes('–ø–∏—Ç–∞–Ω')) {
        currentSection = 'nutrition';
        continue;
      }
      if (lower.includes('—Ñ–æ–∫—É—Å') || lower.includes('—Ü–µ–ª—å')) {
        currentSection = 'focus';
        continue;
      }
      if (lower.includes('–ø—Ä–æ–≥—Ä–µ—Å—Å') || lower.includes('–∞–Ω–∞–ª–∏–∑')) {
        currentSection = 'progress';
        continue;
      }
      if (lower.includes('—Å–ª–µ–¥—É—é—â') && lower.includes('–Ω–µ–¥–µ–ª—é')) {
        currentSection = 'targets';
        continue;
      }
      
      // –ò—â–µ–º –º–∞—Ä–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ø–∏—Å–∫–∏
      if (trimmed.match(/^[‚Ä¢\-\*]\s/)) {
        const content = trimmed.replace(/^[‚Ä¢\-\*]\s/, '');
        
        if (currentSection === 'nutrition') {
          bulletPoints.push(content);
        } else if (currentSection === 'focus') {
          // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ–±–∞–≤–∏—Ç—å –∏–ª–∏ –∏—Å–∫–ª—é—á–∏—Ç—å
          if (lower.includes('–¥–æ–±–∞–≤') || lower.includes('–≤–∫–ª—é—á') || 
              content.includes('–∞—Å–∞–¥–æ') || content.includes('–±–∏—Ñ–µ') || 
              content.includes('–∞–≤–æ–∫–∞–¥–æ') || content.includes('palta') ||
              content.includes('–∫–∏–Ω–æ–∞') || content.includes('—á–µ—á–µ–≤–∏—Ü–∞')) {
            specificFoods.push(content);
          } else if (lower.includes('–∏—Å–∫–ª—é—á') || lower.includes('–∏–∑–±–µ–≥') || 
                     lower.includes('–æ–≥—Ä–∞–Ω–∏—á') || content.includes('facturas') ||
                     content.includes('—Å–ª–∞–¥–æ—Å—Ç') || content.includes('—Å–∞—Ö–∞—Ä')) {
            avoidOrReduce.push(content);
          }
        }
      }
      
      // –ò—â–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      if (lower.includes('–≤–µ—Å') && (lower.includes('—É–≤–µ–ª–∏—á') || lower.includes('—É–º–µ–Ω—å—à') || lower.includes('–∏–∑–º–µ–Ω–µ–Ω'))) {
        weightProgress = trimmed;
      }
      
      if (lower.includes('–∫–∞–ª–æ—Ä') && (lower.includes('–∫–∫–∞–ª') || lower.includes('–¥–µ—Ñ–∏—Ü–∏—Ç'))) {
        calorieTarget = trimmed;
      }
      
      if (lower.includes('–±–µ–ª–æ–∫') && (lower.includes('–≥—Ä–∞–º') || lower.includes('–ø–æ—Ä—Ü–∏'))) {
        macroFocus = trimmed;
      }
      
      if (lower.includes('–∑–∞–ø–∏—Å—ã–≤–∞') && lower.includes('–ø—Ä–∏—ë–º')) {
        behavioralGoal = trimmed;
      }
      
      if (lower.includes('–ø—Ä–æ–≥—É–ª–∫') || lower.includes('–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç')) {
        activitySuggestion = trimmed;
      }
      
      if (lower.includes('–º–æ—Ç–∏–≤–∞—Ü') || lower.includes('–ø–æ–¥–¥–µ—Ä–∂–∫') || trimmed.includes('üí™') || 
          lower.includes('–ø—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ') || lower.includes('–≥–ª–∞–≤–Ω—ã–π –∞–∫—Ç–∏–≤')) {
        encouragement = trimmed;
      }
      
      if (lower.includes('–∫–ª–µ—Ç—á–∞—Ç–∫') || lower.includes('–∫–∞—á–µ—Å—Ç–≤') && lower.includes('–ø–∏—Ç–∞–Ω')) {
        nutritionQuality = trimmed;
      }
      
      if (lower.includes('—Ç—Ä–∏–≥–≥–µ—Ä') || lower.includes('–ø—Ä–æ–±–ª–µ–º') || lower.includes('–≤—ã–∑–æ–≤')) {
        challengeEvolution = trimmed;
      }
      
      // –ï—Å–ª–∏ –Ω–µ—Ç summary, –±–µ—Ä–µ–º –ø–µ—Ä–≤—É—é —Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω—É—é —Å—Ç—Ä–æ–∫—É
      if (!summary && trimmed.length > 30 && !trimmed.match(/^[‚Ä¢\-\*]/) && 
          !lower.includes('—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏') && !lower.includes('–∞–Ω–∞–ª–∏–∑')) {
        summary = trimmed;
      }
      
      // –ò—â–µ–º –≥–ª–∞–≤–Ω—É—é —Ü–µ–ª—å
      if ((lower.includes('—Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü') || lower.includes('—Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á')) && 
          trimmed.length > 20 && !mainGoal) {
        mainGoal = trimmed;
      }
    }

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –±–µ–∑ fallback - –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö
    return {
      nutritionRecommendations: {
        shortSummary: summary || '',
        bulletPoints: bulletPoints.length > 0 ? bulletPoints : []
      },
      weeklyFocus: {
        mainGoal: mainGoal || '',
        specificFoods: specificFoods.length > 0 ? specificFoods : [],
        avoidOrReduce: avoidOrReduce.length > 0 ? avoidOrReduce : []
      },
      progressNotes: {
        weightProgress: weightProgress || '',
        nutritionQuality: nutritionQuality || '',
        challengeEvolution: challengeEvolution || '',
        encouragement: encouragement || ''
      },
      nextWeekTargets: {
        calorieTarget: calorieTarget || '',
        macroFocus: macroFocus || '',
        behavioralGoal: behavioralGoal || '',
        activitySuggestion: activitySuggestion || ''
      }
    };
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞:', error);
    return null;
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –∏–∑ AsyncStorage —Å –ø–∞—Ä—Å–∏–Ω–≥–æ–º
export const getStructuredRecommendations = async (): Promise<ParsedAIRecommendations | null> => {
  try {
    const AsyncStorage = require('@react-native-async-storage/async-storage').default;
    const stored = await AsyncStorage.getItem('ai_recommendations');
    
    if (!stored) {
      console.log('‚ÑπÔ∏è –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ AsyncStorage');
      return null;
    }

    const parsed = parseAIResponse(stored);
    if (parsed) {
      console.log('‚úÖ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω—ã');
      return parsed;
    }

    console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏');
    return null;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π:', error);
    return null;
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
export const saveStructuredRecommendations = async (recommendations: ParsedAIRecommendations): Promise<void> => {
  try {
    const AsyncStorage = require('@react-native-async-storage/async-storage').default;
    await AsyncStorage.setItem('ai_recommendations', JSON.stringify(recommendations));
    await AsyncStorage.setItem('ai_recommendations_timestamp', new Date().toISOString());
    console.log('‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π:', error);
    throw error;
  }
}; 