import * as FileSystem from 'expo-file-system';
import { Image } from 'expo-image';
import { getThumbnailUrl } from './imageUtils';

/**
 * –ü—Ä–æ–∞–∫—Ç–∏–≤–Ω–æ –∫—ç—à–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –ø–∞–º—è—Ç–∏
 * @param imageUrl URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
 * @returns Promise<boolean> - —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
 */
export const prefetchImage = async (imageUrl: string): Promise<boolean> => {
  try {
    if (!imageUrl) return false;
    
    // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞–∫ –º–∏–Ω–∏–∞—Ç—é—Ä—É, —Ç–∞–∫ –∏ –æ—Ä–∏–≥–∏–Ω–∞–ª
    const thumbnailUrl = getThumbnailUrl(imageUrl);
    
    // –°–Ω–∞—á–∞–ª–∞ –∫—ç—à–∏—Ä—É–µ–º –º–∏–Ω–∏–∞—Ç—é—Ä—É (–æ–Ω–∞ –º–µ–Ω—å—à–µ –∏ –∑–∞–≥—Ä—É–∑–∏—Ç—Å—è –±—ã—Å—Ç—Ä–µ–µ)
    if (thumbnailUrl && thumbnailUrl !== imageUrl) {
      await Image.prefetch(thumbnailUrl);
      console.log('‚úÖ –ú–∏–Ω–∏–∞—Ç—é—Ä–∞ –∑–∞–∫—ç—à–∏—Ä–æ–≤–∞–Ω–∞:', thumbnailUrl);
    }
    
    // –ó–∞—Ç–µ–º –∫—ç—à–∏—Ä—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª
    await Image.prefetch(imageUrl);
    console.log('‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–∫—ç—à–∏—Ä–æ–≤–∞–Ω–∞:', imageUrl);
    
    return true;
  } catch (error) {
    console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—ç—à–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:', error);
    return false;
  }
};

/**
 * –ü—Ä–æ–∞–∫—Ç–∏–≤–Ω–æ –∫—ç—à–∏—Ä—É–µ—Ç –º–∞—Å—Å–∏–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
 * @param imageUrls –ú–∞—Å—Å–∏–≤ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
 * @returns Promise<number> - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
 */
export const prefetchImages = async (imageUrls: string[]): Promise<number> => {
  let successCount = 0;
  
  // –ö—ç—à–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ, –Ω–æ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
  const batchSize = 3;
  
  for (let i = 0; i < imageUrls.length; i += batchSize) {
    const batch = imageUrls.slice(i, i + batchSize);
    
    const results = await Promise.allSettled(
      batch.map(url => prefetchImage(url))
    );
    
    results.forEach(result => {
      if (result.status === 'fulfilled' && result.value) {
        successCount++;
      }
    });
  }
  
  console.log(`üì¶ –ó–∞–∫—ç—à–∏—Ä–æ–≤–∞–Ω–æ ${successCount} –∏–∑ ${imageUrls.length} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π`);
  return successCount;
};

/**
 * –û—á–∏—â–∞–µ—Ç –∫—ç—à –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π Expo Image
 * @returns Promise<boolean> - —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ—á–∏—Å—Ç–∫–∏
 */
export const clearImageCache = async (): Promise<boolean> => {
  try {
    await Image.clearDiskCache();
    await Image.clearMemoryCache();
    console.log('üßπ –ö—ç—à –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –æ—á–∏—â–µ–Ω');
    return true;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫—ç—à–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:', error);
    return false;
  }
};

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Ä–∞–∑–º–µ—Ä –∫—ç—à–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–∞ –¥–∏—Å–∫–µ
 * @returns Promise<number> - —Ä–∞–∑–º–µ—Ä –≤ –±–∞–π—Ç–∞—Ö
 */
export const getCacheSize = async (): Promise<number> => {
  try {
    const cacheDir = FileSystem.cacheDirectory + 'ExpoImageCache/';
    const info = await FileSystem.getInfoAsync(cacheDir);
    
    if (info.exists && info.isDirectory) {
      // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –≤—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –≤ –∫—ç—à–µ
      const calculateDirectorySize = async (dirPath: string): Promise<number> => {
        const files = await FileSystem.readDirectoryAsync(dirPath);
        let totalSize = 0;
        
        for (const file of files) {
          const filePath = dirPath + file;
          const fileInfo = await FileSystem.getInfoAsync(filePath);
          
          if (fileInfo.exists) {
            if (fileInfo.isDirectory) {
              totalSize += await calculateDirectorySize(filePath + '/');
            } else {
              totalSize += fileInfo.size || 0;
            }
          }
        }
        
        return totalSize;
      };
      
      return await calculateDirectorySize(cacheDir);
    }
    
    return 0;
  } catch (error) {
    console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–∞–∑–º–µ—Ä –∫—ç—à–∞:', error);
    return 0;
  }
};

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–º–µ—Ä –≤ –±–∞–π—Ç–∞—Ö –≤ —á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
 * @param bytes –†–∞–∑–º–µ—Ä –≤ –±–∞–π—Ç–∞—Ö
 * @returns –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "2.5 MB")
 */
export const formatBytes = (bytes: number): string => {
  if (bytes === 0) return '0 Bytes';
  
  const k = 1024;
  const sizes = ['Bytes', 'KB', 'MB', 'GB'];
  const i = Math.floor(Math.log(bytes) / Math.log(k));
  
  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
}; 