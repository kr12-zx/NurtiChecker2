import React, { useEffect, useMemo } from 'react';
import { StyleSheet, useColorScheme, View } from 'react-native';
import Svg, { Circle, Text as SvgText } from 'react-native-svg';

interface VitaminMineralData {
  name: string;
  shortName: string;
  current: number;
  goal: number;
  color: string;
}

interface VitaminMineralCircleProps {
  data: VitaminMineralData[];
  title: string;
  totalScore: number;
  size?: number;
  showPlaceholder?: boolean; // –ù–æ–≤—ã–π –ø—Ä–æ–ø—Å –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
}

const VitaminMineralCircle: React.FC<VitaminMineralCircleProps> = ({
  data,
  title,
  totalScore,
  size = 120,
  showPlaceholder = false
}) => {
  const colorScheme = useColorScheme();
  const isDark = colorScheme === 'dark';
  
  // –ú–µ–º–æ–∏–∑–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã—Ö —Ä–µ–Ω–¥–µ—Ä–æ–≤
  const memoizedData = useMemo(() => ({
    dataLength: data?.length || 0,
    totalScore,
    firstItemColor: data?.[0]?.color || '#4CAF50',
    hasData: data && data.length > 0
  }), [data, totalScore]);
  
  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Ä–µ–∞–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –¥–∞–Ω–Ω—ã—Ö
  useEffect(() => {
    // –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    if (memoizedData.dataLength > 0 || totalScore > 0) {
      console.log(`üîµ VitaminMineralCircle ${title} –æ–±–Ω–æ–≤–ª–µ–Ω:`, {
        dataLength: memoizedData.dataLength,
        totalScore: memoizedData.totalScore,
        hasData: memoizedData.hasData
      });
    }
  }, [memoizedData.dataLength, memoizedData.totalScore, title]);
  
  const strokeWidth = 12;
  const radius = (size - strokeWidth) / 2;
  const centerX = size / 2;
  const centerY = size / 2;

  // –û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–∞–∫—É—é —á–∞—Å—Ç—å –∫–æ–ª—å—Ü–∞ –∑–∞–π–º–µ—Ç —Ü–≤–µ—Ç–Ω–∞—è –¥—É–≥–∞
  const totalProgressAngle = showPlaceholder ? 0 : (Math.min(totalScore, 100) / 100) * 360;
  
  // –¶–≤–µ—Ç–∞ —Ç–µ–∫—Å—Ç–∞ –∫–∞–∫ –≤ CircularProgress
  const textColor = isDark ? '#FFFFFF' : '#000000';
  const secondaryTextColor = isDark ? '#AAAAAA' : '#666666';

  return (
    <View style={styles.container}>
        <Svg width={size} height={size}>
          {/* –§–æ–Ω–æ–≤—ã–π –∫—Ä—É–≥ */}
          <Circle
            cx={centerX}
            cy={centerY}
            r={radius}
            stroke={isDark ? '#3A3A3C' : '#E6E7E8'}
            strokeWidth={strokeWidth}
            fill="transparent"
          />
          
        {/* –ï–¥–∏–Ω—ã–π —Ü–≤–µ—Ç–Ω–æ–π –∫—Ä—É–≥ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ */}
        {totalProgressAngle > 0 && (
          <Circle
            cx={centerX}
            cy={centerY}
            r={radius}
            stroke={memoizedData.firstItemColor}
            strokeWidth={strokeWidth}
            fill="transparent"
            strokeDasharray={`${(totalProgressAngle / 360) * (2 * Math.PI * radius)} ${2 * Math.PI * radius}`}
            strokeDashoffset={0}
            strokeLinecap="round"
            transform={`rotate(-90 ${centerX} ${centerY})`}
          />
        )}
        
        {/* –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç - –∏—Å–ø–æ–ª—å–∑—É–µ–º SVG Text –∫–∞–∫ –≤ CircularProgress */}
        <SvgText
          x={centerX}
          y={centerY - 6} // –ù–µ–º–Ω–æ–≥–æ –≤—ã—à–µ —Ü–µ–Ω—Ç—Ä–∞ –¥–ª—è –¥–≤—É—Ö —Å—Ç—Ä–æ–∫
          textAnchor="middle"
          dy=".3em"
          fontSize="22" // –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç CircularProgress
          fontWeight="bold"
          fill={textColor}
        >
          {showPlaceholder ? '?' : `${totalScore}%`}
        </SvgText>
        
        {/* –ü–æ–¥–ø–∏—Å—å */}
        <SvgText
          x={centerX}
          y={centerY + 12} // –ù–∏–∂–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
          textAnchor="middle"
          dy=".3em"
          fontSize="12"
          fill={secondaryTextColor}
        >
            {title}
        </SvgText>
      </Svg>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    alignItems: 'center',
  },
});

export default VitaminMineralCircle; 