import * as Device from 'expo-device';
import * as Notifications from 'expo-notifications';
import { Platform } from 'react-native';
import { getUserId } from './userService';

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–≤–µ–¥–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
Notifications.setNotificationHandler({
  handleNotification: async () => ({
    shouldShowAlert: true,
    shouldPlaySound: true,
    shouldSetBadge: false,
    shouldShowBanner: true,
    shouldShowList: true,
  }),
});

export interface PushNotificationData {
  type?: string;
  userId?: string;
  adviceId?: string;
  [key: string]: any;
}

export class PushNotificationService {
  private static pushToken: string | null = null;
  private static isInitialized = false;

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
   */
  static async initialize(): Promise<boolean> {
    try {
      console.log('üîî –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...');

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Ä–µ–∞–ª—å–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
      if (!Device.isDevice) {
        console.warn('‚ö†Ô∏è Push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö');
        return false;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–ª–∞—Ç—Ñ–æ—Ä–º—É
      if (Platform.OS === 'ios') {
        console.log('üì± iOS —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ - –ø—Ä–æ–≤–µ—Ä—è–µ–º entitlements...');
      }

      // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
      const { status: existingStatus } = await Notifications.getPermissionsAsync();
      let finalStatus = existingStatus;

      console.log('üîê –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π:', existingStatus);

      if (existingStatus !== 'granted') {
        console.log('üìù –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è...');
        const { status } = await Notifications.requestPermissionsAsync();
        finalStatus = status;
        console.log('‚úÖ –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π:', status);
      }

      if (finalStatus !== 'granted') {
        console.warn('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–∞–∑–∞–ª—Å—è –æ—Ç push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π');
        return false;
      }

      // –ü–æ–ª—É—á–∞–µ–º push —Ç–æ–∫–µ–Ω —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
      let token;
      try {
        console.log('üé´ –ü–æ–ª—É—á–∞–µ–º Expo push —Ç–æ–∫–µ–Ω...');
        token = await Notifications.getExpoPushTokenAsync({
          projectId: '1b53789e-f7d8-40d1-a7aa-c65414b28b1d', // Project ID –∏–∑ app.json
        });
        console.log('‚úÖ Push —Ç–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ');
      } catch (tokenError: any) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è push —Ç–æ–∫–µ–Ω–∞:', tokenError);
        
        // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è iOS
        if (Platform.OS === 'ios' && tokenError.message?.includes('aps-environment')) {
          console.error('üçé iOS –æ—à–∏–±–∫–∞: –ü—Ä–æ–±–ª–µ–º–∞ —Å aps-environment entitlement');
          console.error('üí° –†–µ—à–µ–Ω–∏–µ: –ü–µ—Ä–µ—Å–æ–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ entitlements');
        }
        
        return false;
      }

      this.pushToken = token.data;
      console.log('‚úÖ Push —Ç–æ–∫–µ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω:', token.data.substring(0, 50) + '...');

      // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
      await this.registerTokenOnServer(token.data);

      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
      this.setupNotificationHandlers();

      this.isInitialized = true;
      console.log('üéâ Push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
      return true;

    } catch (error: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error);
      
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
      if (error.message?.includes('aps-environment')) {
        console.error('üîß –¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ aps-environment –≤ app.json');
      }
      
      console.log('‚ö†Ô∏è Push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã (—Å–∏–º—É–ª—è—Ç–æ—Ä –∏–ª–∏ –æ—Ç–∫–∞–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)');
      return false;
    }
  }

  /**
   * –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
   */
  private static async registerTokenOnServer(pushToken: string): Promise<void> {
    try {
      const userId = await getUserId();
      
      const payload = {
        userId: userId,
        pushToken: pushToken,
        platform: Platform.OS,
        deviceInfo: {
          brand: Device.brand,
          modelName: Device.modelName,
          osName: Device.osName,
          osVersion: Device.osVersion,
        },
        registeredAt: new Date().toISOString(),
      };

      console.log('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–æ–∫–µ–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä:', { userId, platform: Platform.OS });

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ N8N webhook
      const response = await fetch('https://ttagent.website/webhook/register-push-token', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(payload),
      });

      if (response.ok) {
        console.log('‚úÖ Push —Ç–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ');
      } else {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞:', response.status);
      }

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–æ–∫–µ–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä:', error);
    }
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
   */
  private static setupNotificationHandlers(): void {
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–∫–æ–≥–¥–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç–æ)
    Notifications.addNotificationReceivedListener(notification => {
      console.log('üì® –ü–æ–ª—É—á–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:', notification);
      
      // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–∞—Å—Ç–æ–º–Ω—É—é –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏
      const data = notification.request.content.data as PushNotificationData;
      
      if (data?.type === 'nutrition_advice') {
        console.log('ü•ó –ü–æ–ª—É—á–µ–Ω —Å–æ–≤–µ—Ç –ø–æ –ø–∏—Ç–∞–Ω–∏—é');
      }
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    Notifications.addNotificationResponseReceivedListener(response => {
      console.log('üëÜ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:', response);
      
      const data = response.notification.request.content.data as PushNotificationData;
      
      // –ù–∞–≤–∏–≥–∞—Ü–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      this.handleNotificationPress(data);
    });
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
   */
  private static handleNotificationPress(data: PushNotificationData): void {
    if (!data?.type) return;

    switch (data.type) {
      case 'nutrition_advice':
        // –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —ç–∫—Ä–∞–Ω —Å —Å–æ–≤–µ—Ç–∞–º–∏
        console.log('ü•ó –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–æ–≤–µ—Ç–∞–º –ø–æ –ø–∏—Ç–∞–Ω–∏—é');
        // router.push('/nutrition-advice'); // –î–æ–±–∞–≤–∏—à—å –ø–æ–∑–∂–µ
        break;
        
      case 'weekly_summary':
        // –ü–µ—Ä–µ—Ö–æ–¥ –∫ –Ω–µ–¥–µ–ª—å–Ω–æ–π —Å–≤–æ–¥–∫–µ
        console.log('üìä –ü–µ—Ä–µ—Ö–æ–¥ –∫ –Ω–µ–¥–µ–ª—å–Ω–æ–π —Å–≤–æ–¥–∫–µ');
        // router.push('/weekly-summary');
        break;
        
      default:
        console.log('üì± –û–±—ã—á–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ');
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π push —Ç–æ–∫–µ–Ω
   */
  static getPushToken(): string | null {
    return this.pushToken;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
   */
  static isReady(): boolean {
    return this.isInitialized && this.pushToken !== null;
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (–¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
   */
  static async sendTestNotification(): Promise<void> {
    if (!this.pushToken) {
      console.warn('‚ö†Ô∏è Push —Ç–æ–∫–µ–Ω –Ω–µ –ø–æ–ª—É—á–µ–Ω');
      return;
    }

    try {
      const userId = await getUserId();
      
      await fetch('https://ttagent.website/webhook/send-test-push', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          userId: userId,
          pushToken: this.pushToken,
        }),
      });

      console.log('‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
    }
  }

  /**
   * –û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  static async disableNotifications(): Promise<void> {
    try {
      const userId = await getUserId();
      
      await fetch('https://ttagent.website/webhook/disable-push', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          userId: userId,
        }),
      });

      console.log('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error);
    }
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
export const initializePushNotifications = () => PushNotificationService.initialize();
export const sendTestNotification = () => PushNotificationService.sendTestNotification();
export const disableNotifications = () => PushNotificationService.disableNotifications();
export const getPushToken = () => PushNotificationService.getPushToken(); 