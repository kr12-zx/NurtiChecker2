import AsyncStorage from '@react-native-async-storage/async-storage';
import { ScanHistoryItem } from './scanHistory';

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–∏ –∑–∞ –¥–µ–Ω—å
export interface DailyNutritionData {
  date: string; // –§–æ—Ä–º–∞—Ç: DD.MM.YYYY
  caloriesConsumed: number;
  protein: number;
  fat: number;
  carbs: number;
  sugar: number; // –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–∫—Ä—ã—Ç–æ–≥–æ —Å–∞—Ö–∞—Ä–∞
  fiber: number; // –ö–ª–µ—Ç—á–∞—Ç–∫–∞
  saturatedFat: number; // –ù–∞—Å—ã—â–µ–Ω–Ω—ã–µ –∂–∏—Ä—ã
  addedProducts: {
    productId: string;
    name: string;
    servingMultiplier: number; // –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ø–æ—Ä—Ü–∏–∏ (1.0 = —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ø–æ—Ä—Ü–∏—è)
    baseWeight?: number; // –ë–∞–∑–æ–≤—ã–π –≤–µ—Å –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ –≥—Ä–∞–º–º–∞—Ö (–¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è)
    calories: number;
    protein: number;
    fat: number;
    carbs: number;
    sugar: number;
    fiber: number; // –ö–ª–µ—Ç—á–∞—Ç–∫–∞
    saturatedFat: number; // –ù–∞—Å—ã—â–µ–Ω–Ω—ã–µ –∂–∏—Ä—ã
    image?: string; // URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞
    timestamp?: number; // –í—Ä–µ–º—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞
    fullData?: string; // –ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–¥—É–∫—Ç–∞
  }[];
}

// –ö–ª—é—á –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ AsyncStorage
const DAILY_NUTRITION_KEY = '@nutrichecker:daily_nutrition';

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø–∏—Ç–∞–Ω–∏–∏ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É
 */
export const getDailyNutrition = async (date?: string): Promise<DailyNutritionData | null> => {
  try {
    // –ï—Å–ª–∏ –¥–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é
    const targetDate = date || formatDateToString(new Date());
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –æ –ø–∏—Ç–∞–Ω–∏–∏
    const allData = await getAllDailyNutrition();
    
    // –ò—â–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –Ω—É–∂–Ω—ã–π –¥–µ–Ω—å
    const dayData = allData.find(day => day.date === targetDate);
    
    if (dayData) {
      return dayData;
    }
    
    // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –∑–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    return {
      date: targetDate,
      caloriesConsumed: 0,
      protein: 0,
      fat: 0,
      carbs: 0,
      sugar: 0,
      fiber: 0,
      saturatedFat: 0,
      addedProducts: []
    };
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø–∏—Ç–∞–Ω–∏–∏ –∑–∞ –¥–µ–Ω—å:', error);
    return null;
  }
};

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø–∏—Ç–∞–Ω–∏–∏ –∑–∞ –≤—Å–µ –¥–Ω–∏
 */
export const getAllDailyNutrition = async (): Promise<DailyNutritionData[]> => {
  try {
    const json = await AsyncStorage.getItem(DAILY_NUTRITION_KEY);
    if (!json) return [];
    
    return JSON.parse(json) as DailyNutritionData[];
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –æ –ø–∏—Ç–∞–Ω–∏–∏:', error);
    return [];
  }
};

/**
 * –î–æ–±–∞–≤–ª—è–µ—Ç –ø—Ä–æ–¥—É–∫—Ç –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–∏—Ç–∞–Ω–∏—è –∑–∞ –¥–µ–Ω—å
 */
export const addProductToDay = async (
  product: ScanHistoryItem, 
  servingMultiplier: number = 1.0, // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ø–æ—Ä—Ü–∏—è
  date?: string, // –ù–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - —Å–µ–≥–æ–¥–Ω—è
  portionDetails?: {
    portionSize: 'small' | 'regular' | 'large';
    quantity: number;
    quantityEaten: 'all' | 'three_quarters' | 'half' | 'third' | 'quarter' | 'tenth' | 'sip';
    addons: {
      sauce: number;
      sugar: number;
      oil: number;
      cream: number;
      cheese: number;
      nuts: number;
    };
    totalMultiplier: number;
    baseGrams: number;
    preparationMethod: 'raw' | 'boiled' | 'fried' | 'grilled' | 'baked';
  }
): Promise<DailyNutritionData> => {
  try {
    console.log('\nüîÑ === –î–û–ë–ê–í–õ–ï–ù–ò–ï –ü–†–û–î–£–ö–¢–ê –í –î–ù–ï–í–ù–ò–ö ===');
    console.log('üì¶ –ü—Ä–æ–¥—É–∫—Ç:', {
      id: product.id,
      name: product.name,
      calories: product.calories,
      sugar: product.sugar || 0
    });
    console.log('üéØ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:', {
      servingMultiplier,
      targetDate: date || '—Å–µ–≥–æ–¥–Ω—è',
      hasPortionDetails: !!portionDetails
    });

    const targetDate = date || formatDateToString(new Date());
    console.log('üìÖ –¶–µ–ª–µ–≤–∞—è –¥–∞—Ç–∞:', targetDate);
    
    // –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∑–∞ –¥–µ–Ω—å –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ
    let dayData = await getDailyNutrition(targetDate);
    console.log('üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–Ω—è –î–û –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:', {
      exists: !!dayData,
      calories: dayData?.caloriesConsumed || 0,
      sugar: dayData?.sugar || 0,
      productsCount: dayData?.addedProducts.length || 0
    });
    
    if (!dayData) {
      dayData = {
        date: targetDate,
        caloriesConsumed: 0,
        protein: 0,
        fat: 0,
        carbs: 0,
        sugar: 0,
        fiber: 0,
        saturatedFat: 0,
        addedProducts: []
      };
      console.log('‚ú® –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –¥–µ–Ω—å');
    }
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –º—É–ª—å—Ç–∏–ø–ª–∏–∫–∞—Ç–æ—Ä
    let finalMultiplier = servingMultiplier;
    if (portionDetails) {
      finalMultiplier = portionDetails.totalMultiplier;
      console.log('üî¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –º—É–ª—å—Ç–∏–ø–ª–∏–∫–∞—Ç–æ—Ä –∏–∑ –ø–æ—Ä—Ü–∏–∏:', finalMultiplier);
    }
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–∏—Ç–∞—Ç–µ–ª—å–Ω—ã–µ –≤–µ—â–µ—Å—Ç–≤–∞ —Å —É—á–µ—Ç–æ–º –ø–æ—Ä—Ü–∏–∏
    const adjustedCalories = Math.round(product.calories * finalMultiplier);
    const adjustedProtein = Math.round((product.protein || 0) * finalMultiplier * 10) / 10;
    const adjustedFat = Math.round((product.fat || 0) * finalMultiplier * 10) / 10;
    const adjustedCarbs = Math.round((product.carbs || 0) * finalMultiplier * 10) / 10;
    const adjustedSugar = Math.round((product.sugar || 0) * finalMultiplier * 10) / 10;
    const adjustedFiber = Math.round(((product as any).fiber || 0) * finalMultiplier * 10) / 10;
    const adjustedSaturatedFat = Math.round(((product as any).saturatedFat || 0) * finalMultiplier * 10) / 10;
    
    console.log('üßÆ –†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:', {
      adjustedCalories,
      adjustedSugar,
      finalMultiplier
    });
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –±–∞–∑–æ–≤—ã–π –≤–µ—Å –∏–∑ –ø–æ–ª–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∞–Ω–∞–ª–∏–∑–∞
    let baseWeight = 100; // –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if ((product as any).fullData) {
      try {
        const fullData = JSON.parse((product as any).fullData);
        if (fullData.foodData?.portionInfo?.estimatedWeight) {
          baseWeight = fullData.foodData.portionInfo.estimatedWeight;
          console.log('üîç –ò–∑–≤–ª–µ—á–µ–Ω –±–∞–∑–æ–≤—ã–π –≤–µ—Å –∏–∑ fullData:', baseWeight);
        }
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –±–∞–∑–æ–≤–æ–≥–æ –≤–µ—Å–∞ –∏–∑ fullData:', error);
      }
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–¥—É–∫—Ç –≤ –º–∞—Å—Å–∏–≤
    const productToAdd = {
      productId: product.id,
      name: product.name,
      servingMultiplier: finalMultiplier,
      baseWeight: baseWeight, // –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–∞–∑–æ–≤—ã–π –≤–µ—Å –ø—Ä–æ–¥—É–∫—Ç–∞
      calories: adjustedCalories,
      protein: adjustedProtein,
      fat: adjustedFat,
      carbs: adjustedCarbs,
      sugar: adjustedSugar,
      fiber: adjustedFiber,
      saturatedFat: adjustedSaturatedFat,
      image: product.image,
      timestamp: Date.now(), // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π timestamp
      fullData: (product as any).fullData // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏–∑–∞
    };
    
    console.log('üì¶ –ü—Ä–æ–¥—É–∫—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:', productToAdd);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É–º–º–∞—Ä–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    const updatedData: DailyNutritionData = {
      ...dayData,
      caloriesConsumed: dayData.caloriesConsumed + adjustedCalories,
      protein: Math.round((dayData.protein + adjustedProtein) * 10) / 10,
      fat: Math.round((dayData.fat + adjustedFat) * 10) / 10,
      carbs: Math.round((dayData.carbs + adjustedCarbs) * 10) / 10,
      sugar: Math.round((dayData.sugar + adjustedSugar) * 10) / 10,
      fiber: Math.round((dayData.fiber + adjustedFiber) * 10) / 10,
      saturatedFat: Math.round((dayData.saturatedFat + adjustedSaturatedFat) * 10) / 10,
      addedProducts: [...dayData.addedProducts, productToAdd]
    };
    
    console.log('üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–Ω—è –ü–û–°–õ–ï –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:', {
      calories: updatedData.caloriesConsumed,
      sugar: updatedData.sugar,
      productsCount: updatedData.addedProducts.length
    });
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—É–º–º—ã
    const calculatedCalories = updatedData.addedProducts.reduce((sum, p) => sum + p.calories, 0);
    const calculatedSugar = updatedData.addedProducts.reduce((sum, p) => sum + p.sugar, 0);
    
    console.log('‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—É–º–º:', {
      caloriesMatch: Math.abs(calculatedCalories - updatedData.caloriesConsumed) < 1,
      sugarMatch: Math.abs(calculatedSugar - updatedData.sugar) < 0.1,
      calculatedCalories,
      storedCalories: updatedData.caloriesConsumed,
      calculatedSugar,
      storedSugar: updatedData.sugar
    });
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    await saveDailyNutrition(updatedData);
    console.log('üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
    console.log('üîÑ === –î–û–ë–ê–í–õ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û ===\n');
    
    return updatedData;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ –¥–Ω–µ–≤–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É:', error);
    throw error;
  }
};

/**
 * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø–∏—Ç–∞–Ω–∏–∏ –∑–∞ –¥–µ–Ω—å
 */
export const saveDailyNutrition = async (dayData: DailyNutritionData): Promise<void> => {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
    const allData = await getAllDailyNutrition();
    
    // –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è, –µ—Å–ª–∏ –æ–Ω —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    const existingIndex = allData.findIndex(day => day.date === dayData.date);
    
    let updatedData: DailyNutritionData[];
    
    if (existingIndex >= 0) {
      // –ó–∞–º–µ–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –¥–µ–Ω—å
      updatedData = [...allData];
      updatedData[existingIndex] = dayData;
    } else {
      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –¥–µ–Ω—å
      updatedData = [...allData, dayData];
    }
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ (–æ—Ç –Ω–æ–≤—ã—Ö –∫ —Å—Ç–∞—Ä—ã–º)
    updatedData.sort((a, b) => {
      const dateA = parseDateString(a.date);
      const dateB = parseDateString(b.date);
      return dateB.getTime() - dateA.getTime();
    });
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    await AsyncStorage.setItem(DAILY_NUTRITION_KEY, JSON.stringify(updatedData));
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø–∏—Ç–∞–Ω–∏–∏ –∑–∞ –¥–µ–Ω—å:', error);
    throw error;
  }
};

/**
 * –£–¥–∞–ª—è–µ—Ç –ø—Ä–æ–¥—É–∫—Ç –∏–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ –¥–µ–Ω—å
 */
export const removeProductFromDay = async (
  productId: string,
  date?: string // –ù–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - —Å–µ–≥–æ–¥–Ω—è
): Promise<DailyNutritionData | null> => {
  try {
    console.log('\nüóëÔ∏è === –£–î–ê–õ–ï–ù–ò–ï –ü–†–û–î–£–ö–¢–ê –ò–ó –î–ù–ï–í–ù–ò–ö–ê ===');
    console.log('üîç –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —É–¥–∞–ª–µ–Ω–∏—è:', {
      productId,
      targetDate: date || '—Å–µ–≥–æ–¥–Ω—è'
    });

    const targetDate = date || formatDateToString(new Date());
    console.log('üìÖ –¶–µ–ª–µ–≤–∞—è –¥–∞—Ç–∞:', targetDate);
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –¥–µ–Ω—å
    const dayData = await getDailyNutrition(targetDate);
    if (!dayData) {
      console.log('‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É');
      return null;
    }
    
    console.log('üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–Ω—è –î–û —É–¥–∞–ª–µ–Ω–∏—è:', {
      calories: dayData.caloriesConsumed,
      sugar: dayData.sugar,
      productsCount: dayData.addedProducts.length,
      products: dayData.addedProducts.map(p => `${p.name} (${p.productId})`)
    });
    
    // –ù–∞—Ö–æ–¥–∏–º –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å–Ω–∞—á–∞–ª–∞
    let productIndex = dayData.addedProducts.findIndex(product => 
      product.productId === productId
    );
    
    // –ï—Å–ª–∏ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—â–µ–º –ø–æ —á–∞—Å—Ç—è–º ID
    if (productIndex === -1) {
      console.log('üîç –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—â–µ–º –ø–æ —á–∞—Å—Ç—è–º ID...');
      
      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ –ø–µ—Ä–≤–æ–π —á–∞—Å—Ç–∏ ID (–±–∞–∑–æ–≤—ã–π timestamp)
      const firstPart = productId.split('-')[0];
      console.log('üîç –ü–µ—Ä–≤–∞—è —á–∞—Å—Ç—å ID –¥–ª—è –ø–æ–∏—Å–∫–∞:', firstPart);
      
      productIndex = dayData.addedProducts.findIndex(product => 
        product.productId.startsWith(firstPart)
      );
      
      if (productIndex !== -1) {
        console.log('‚úÖ –ù–∞–π–¥–µ–Ω –ø—Ä–æ–¥—É–∫—Ç –ø–æ –ø–µ—Ä–≤–æ–π —á–∞—Å—Ç–∏ ID:', dayData.addedProducts[productIndex].productId);
      } else {
        // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø–µ—Ä–≤–æ–π —á–∞—Å—Ç–∏, –ø—Ä–æ–±—É–µ–º –ø–æ –±–∞–∑–æ–≤–æ–º—É ID (–ø–µ—Ä–≤—ã–µ –¥–≤–µ —á–∞—Å—Ç–∏)
        const baseId = productId.split('-').slice(0, 2).join('-');
        console.log('üîç –ë–∞–∑–æ–≤—ã–π ID –¥–ª—è –ø–æ–∏—Å–∫–∞:', baseId);
        
        productIndex = dayData.addedProducts.findIndex(product => 
          product.productId.startsWith(baseId)
        );
        
        if (productIndex !== -1) {
          console.log('‚úÖ –ù–∞–π–¥–µ–Ω –ø—Ä–æ–¥—É–∫—Ç –ø–æ –±–∞–∑–æ–≤–æ–º—É ID:', dayData.addedProducts[productIndex].productId);
        }
      }
    }
    
    console.log('üìç –ù–∞–π–¥–µ–Ω –∏–Ω–¥–µ–∫—Å:', productIndex);
    
    if (productIndex === -1) {
      console.log('‚ùå –ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –¥–Ω–µ–≤–Ω–∏–∫–µ');
      return dayData; // –ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω
    }
    
    // –î–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–¥—É–∫—Ç–µ, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å
    const productToRemove = dayData.addedProducts[productIndex];
    console.log('‚úÖ –ü—Ä–æ–¥—É–∫—Ç –Ω–∞–π–¥–µ–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:', {
      name: productToRemove.name,
      id: productToRemove.productId,
      calories: productToRemove.calories,
      sugar: productToRemove.sugar,
      timestamp: productToRemove.timestamp ? new Date(productToRemove.timestamp).toLocaleString() : '–ù–ï–¢'
    });
    console.log('üìä –¢–µ–∫—É—â–∏–µ –∫–∞–ª–æ—Ä–∏–∏ –¥–Ω—è –¥–æ —É–¥–∞–ª–µ–Ω–∏—è:', dayData.caloriesConsumed);
    console.log('üìä –ö–∞–ª–æ—Ä–∏–∏ —É–¥–∞–ª—è–µ–º–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞:', productToRemove.calories);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É–º–º–∞—Ä–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    const updatedData: DailyNutritionData = {
      ...dayData,
      caloriesConsumed: dayData.caloriesConsumed - productToRemove.calories,
      protein: Math.round((dayData.protein - productToRemove.protein) * 10) / 10,
      fat: Math.round((dayData.fat - productToRemove.fat) * 10) / 10,
      carbs: Math.round((dayData.carbs - productToRemove.carbs) * 10) / 10,
      sugar: Math.round((dayData.sugar - productToRemove.sugar) * 10) / 10,
      fiber: Math.round((dayData.fiber - productToRemove.fiber) * 10) / 10,
      saturatedFat: Math.round((dayData.saturatedFat - productToRemove.saturatedFat) * 10) / 10,
      addedProducts: dayData.addedProducts.filter((_, index) => index !== productIndex)
    };
    
    console.log('üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–Ω—è –ü–û–°–õ–ï —É–¥–∞–ª–µ–Ω–∏—è:', {
      calories: updatedData.caloriesConsumed,
      sugar: updatedData.sugar,
      productsCount: updatedData.addedProducts.length,
      remainingProducts: updatedData.addedProducts.map(p => `${p.name} (${p.productId})`)
    });
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—É–º–º—ã
    const calculatedCalories = updatedData.addedProducts.reduce((sum, p) => sum + p.calories, 0);
    const calculatedSugar = updatedData.addedProducts.reduce((sum, p) => sum + p.sugar, 0);
    
    console.log('‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—É–º–º –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è:', {
      caloriesMatch: Math.abs(calculatedCalories - updatedData.caloriesConsumed) < 1,
      sugarMatch: Math.abs(calculatedSugar - updatedData.sugar) < 0.1,
      calculatedCalories,
      storedCalories: updatedData.caloriesConsumed,
      calculatedSugar,
      storedSugar: updatedData.sugar
    });
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    await saveDailyNutrition(updatedData);
    
    console.log('‚úÖ –ü—Ä–æ–¥—É–∫—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –¥–Ω–µ–≤–Ω–∏–∫–∞');
    console.log('üóëÔ∏è === –£–î–ê–õ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û ===\n');
    
    return updatedData;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞ –∏–∑ –¥–Ω–µ–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
    return null;
  }
};

/**
 * –û—á–∏—â–∞–µ—Ç –≤—Å—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–∏—Ç–∞–Ω–∏—è
 */
export const clearAllNutritionData = async (): Promise<void> => {
  try {
    await AsyncStorage.removeItem(DAILY_NUTRITION_KEY);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–∏—Ç–∞–Ω–∏–∏:', error);
    throw error;
  }
};

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞—Ç—É –≤ —Å—Ç—Ä–æ–∫—É —Ñ–æ—Ä–º–∞—Ç–∞ DD.MM.YYYY
 */
export const formatDateToString = (date: Date): string => {
  const day = date.getDate().toString().padStart(2, '0');
  const month = (date.getMonth() + 1).toString().padStart(2, '0');
  const year = date.getFullYear();
  return `${day}.${month}.${year}`;
};

/**
 * –ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫—É –¥–∞—Ç—ã —Ñ–æ—Ä–º–∞—Ç–∞ DD.MM.YYYY –≤ –æ–±—ä–µ–∫—Ç Date
 */
export const parseDateString = (dateString: string): Date => {
  const [day, month, year] = dateString.split('.').map(Number);
  return new Date(year, month - 1, day);
};

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç timestamp –≤ –∫—Ä–∞—Å–∏–≤—ã–π —Ñ–æ—Ä–º–∞—Ç "–¥–µ–Ω—å –º–µ—Å—è—Ü, –≤—Ä–µ–º—è"
 */
export const formatAddedDateTime = (timestamp?: number, fallbackDate?: string): string => {
  const monthNames = [
    '—è–Ω–≤', '—Ñ–µ–≤', '–º–∞—Ä', '–∞–ø—Ä', '–º–∞—è', '–∏—é–Ω',
    '–∏—é–ª', '–∞–≤–≥', '—Å–µ–Ω', '–æ–∫—Ç', '–Ω–æ—è', '–¥–µ–∫'
  ];

  if (timestamp) {
    const date = new Date(timestamp);
    const day = date.getDate();
    const month = monthNames[date.getMonth()];
    const hours = date.getHours().toString().padStart(2, '0');
    const minutes = date.getMinutes().toString().padStart(2, '0');
    return `${day} ${month}, ${hours}:${minutes}`;
  }

  // Fallback –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö –±–µ–∑ timestamp
  if (fallbackDate) {
    const [day, month] = fallbackDate.split('.');
    const monthIndex = parseInt(month) - 1;
    return `${day} ${monthNames[monthIndex]}`;
  }

  return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
};

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã, –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –≤ –¥–∞—à–±–æ—Ä–¥ –∑–∞ –≤—Å–µ –¥–Ω–∏
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö –∏ –¥–∞—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
 */
export const getDashboardAddedProducts = async (): Promise<Array<{
  productId: string;
  name: string;
  calories: number;
  protein: number;
  fat: number;
  carbs: number;
  sugar: number;
  fiber: number;
  saturatedFat: number;
  dateAdded: string;
  servingMultiplier: number;
  baseWeight?: number; // –ë–∞–∑–æ–≤—ã–π –≤–µ—Å –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ –≥—Ä–∞–º–º–∞—Ö
  image?: string; // URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞
  timestamp?: number; // –í—Ä–µ–º—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞
  fullData?: string; // –ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–¥—É–∫—Ç–∞
}>> => {
  try {
    const allDays = await getAllDailyNutrition();
    const allProducts: Array<{
      productId: string;
      name: string;
      calories: number;
      protein: number;
      fat: number;
      carbs: number;
      sugar: number;
      fiber: number;
      saturatedFat: number;
      dateAdded: string;
      servingMultiplier: number;
      baseWeight?: number; // –ë–∞–∑–æ–≤—ã–π –≤–µ—Å –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ –≥—Ä–∞–º–º–∞—Ö
      image?: string; // URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞
      timestamp?: number; // –í—Ä–µ–º—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞
      fullData?: string; // –ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–¥—É–∫—Ç–∞
    }> = [];

    // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –¥–Ω—è–º –∏ —Å–æ–±–∏—Ä–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã
    for (const day of allDays) {
      for (const product of day.addedProducts) {
        // –ï—Å–ª–∏ —É –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –µ–≥–æ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
        let productImage = product.image;
        if (!productImage) {
          productImage = await getProductImageById(product.productId);
        }
        
        allProducts.push({
          ...product,
          dateAdded: day.date,
          image: productImage,
          timestamp: product.timestamp,
          fullData: product.fullData,
          baseWeight: product.baseWeight // –ü–µ—Ä–µ–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π –≤–µ—Å
        });
      }
    }

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è (–æ—Ç –Ω–æ–≤—ã—Ö –∫ —Å—Ç–∞—Ä—ã–º)
    allProducts.sort((a, b) => {
      // –ï—Å–ª–∏ —É –æ–±–æ–∏—Ö –µ—Å—Ç—å timestamp, —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ timestamp
      if (a.timestamp && b.timestamp) {
        return b.timestamp - a.timestamp;
      }
      
      // –ï—Å–ª–∏ timestamp –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ —É –æ–¥–Ω–æ–≥–æ - –æ–Ω –∏–¥–µ—Ç –ø–µ—Ä–≤—ã–º
      if (a.timestamp && !b.timestamp) {
        return -1;
      }
      if (!a.timestamp && b.timestamp) {
        return 1;
      }
      
      // –ï—Å–ª–∏ —É –æ–±–æ–∏—Ö –Ω–µ—Ç timestamp, —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
      const dateA = parseDateString(a.dateAdded);
      const dateB = parseDateString(b.dateAdded);
      return dateB.getTime() - dateA.getTime();
    });

    return allProducts;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–∞—à–±–æ—Ä–¥–∞:', error);
    return [];
  }
};

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –ø–æ ID –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
 */
const getProductImageById = async (productId: string): Promise<string | undefined> => {
  try {
    const { getScanHistory } = await import('./scanHistory');
    const scanHistory = await getScanHistory();
    const foundProduct = scanHistory.find(item => item.id === productId);
    return foundProduct?.image;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞:', error);
    return undefined;
  }
};
