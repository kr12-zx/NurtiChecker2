import AsyncStorage from '@react-native-async-storage/async-storage';
import { useCallback, useEffect, useState } from 'react';
import { parseAIResponse } from '../utils/aiResponseParser';

interface AIRecommendations {
  nutritionRecommendations: {
    shortSummary: string;
    bulletPoints: string[];
  };
  weeklyFocus: {
    mainGoal: string;
    specificFoods: string[];
    avoidOrReduce: string[];
  };
  progressNotes: {
    weightProgress: string;
    nutritionQuality: string;
    challengeEvolution: string;
    encouragement: string;
  };
  nextWeekTargets: {
    calorieTarget: string;
    macroFocus: string;
    behavioralGoal: string;
    activitySuggestion: string;
  };
}

export const useAIRecommendations = () => {
  const [recommendations, setRecommendations] = useState<AIRecommendations | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [lastRefresh, setLastRefresh] = useState(0);

  const loadRecommendations = useCallback(async () => {
    try {
      setLoading(true);
      setError(null);
      
      console.log('üîÑ Hook –∑–∞–≥—Ä—É–∂–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏–∑ AsyncStorage...', new Date().toISOString());
      
      // –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤—ã–π —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
      const newFormat = await AsyncStorage.getItem('ai_recommendations');
      if (newFormat) {
        console.log('üì¶ Hook –Ω–∞–π–¥–µ–Ω –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π');
        const parsed = parseAIResponse(newFormat);
        if (parsed) {
          setRecommendations(parsed);
          console.log('‚úÖ Hook –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω');
          return;
        }
      }
      
      // –ï—Å–ª–∏ –Ω–µ—Ç –Ω–æ–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞, –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ä—ã–π
      const oldFormat = await AsyncStorage.getItem('weekly_recommendations');
      if (oldFormat) {
        console.log('üì¶ Hook –Ω–∞–π–¥–µ–Ω —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º...');
        const parsed = parseAIResponse(oldFormat);
        if (parsed) {
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –Ω–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –∏ —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π
          await AsyncStorage.setItem('ai_recommendations', JSON.stringify(parsed));
          await AsyncStorage.removeItem('weekly_recommendations');
          setRecommendations(parsed);
          console.log('‚úÖ Hook —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –∏ –∑–∞–≥—Ä—É–∂–µ–Ω');
          return;
        }
      }
      
      console.log('‚ÑπÔ∏è Hook —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      setRecommendations(null);
    } catch (err) {
      console.error('‚ùå Hook –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π:', err);
      setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π');
    } finally {
      setLoading(false);
    }
  }, [lastRefresh]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
  const refresh = useCallback(() => {
    console.log('üîÑ Hook –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π...');
    setLastRefresh(Date.now());
  }, []);

  const saveRecommendations = async (newRecommendations: AIRecommendations) => {
    try {
      await AsyncStorage.setItem('ai_recommendations', JSON.stringify(newRecommendations));
      await AsyncStorage.setItem('ai_recommendations_timestamp', new Date().toISOString());
      setRecommendations(newRecommendations);
      console.log('‚úÖ Hook —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ AsyncStorage');
    } catch (err) {
      console.error('‚ùå Hook –æ—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π:', err);
      setError('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π');
    }
  };

  const clearRecommendations = async () => {
    try {
      await AsyncStorage.removeItem('ai_recommendations');
      await AsyncStorage.removeItem('ai_recommendations_timestamp');
      // –¢–∞–∫–∂–µ —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç
      await AsyncStorage.removeItem('weekly_recommendations');
      setRecommendations(null);
      console.log('üóëÔ∏è Hook —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —É–¥–∞–ª–µ–Ω—ã –∏–∑ AsyncStorage');
    } catch (err) {
      console.error('‚ùå Hook –æ—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π:', err);
      setError('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π');
    }
  };

  const hasRecommendations = () => {
    return recommendations !== null;
  };

  const getLastUpdated = async () => {
    try {
      const timestamp = await AsyncStorage.getItem('ai_recommendations_timestamp');
      return timestamp ? new Date(timestamp) : null;
    } catch (err) {
      console.error('‚ùå Hook –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', err);
      return null;
    }
  };

  const setLastUpdated = async () => {
    try {
      await AsyncStorage.setItem('ai_recommendations_timestamp', new Date().toISOString());
    } catch (err) {
      console.error('‚ùå Hook –æ—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', err);
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–≤–æ–≥–æ AI –æ—Ç–≤–µ—Ç–∞ (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –≤—Å–µ —Ñ–æ—Ä–º–∞—Ç—ã)
  const processNewAIResponse = async (aiResponse: any) => {
    try {
      console.log('üîÑ Hook –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–æ–≤—ã–π AI –æ—Ç–≤–µ—Ç...', typeof aiResponse, Array.isArray(aiResponse));
      
      const parsed = parseAIResponse(aiResponse);
      if (parsed) {
        await saveRecommendations(parsed);
        console.log('‚úÖ Hook –Ω–æ–≤—ã–π AI –æ—Ç–≤–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω');
        return true;
      } else {
        console.warn('‚ö†Ô∏è Hook –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å AI –æ—Ç–≤–µ—Ç');
        setError('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏');
        return false;
      }
    } catch (err) {
      console.error('‚ùå Hook –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ AI –æ—Ç–≤–µ—Ç–∞:', err);
      setError('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π');
      return false;
    }
  };

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
  useEffect(() => {
    const interval = setInterval(async () => {
      try {
        const timestamp = await AsyncStorage.getItem('ai_recommendations_timestamp');
        const currentTimestamp = await getLastUpdated();
        
        if (timestamp && currentTimestamp) {
          const stored = new Date(timestamp);
          const current = currentTimestamp;
          
          // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ AsyncStorage –Ω–æ–≤–µ–µ, —á–µ–º –≤ hook - –æ–±–Ω–æ–≤–ª—è–µ–º
          if (stored > current) {
            console.log('üîÑ Hook –æ–±–Ω–∞—Ä—É–∂–∏–ª –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ AsyncStorage, –æ–±–Ω–æ–≤–ª—è–µ–º...');
            refresh();
          }
        }
      } catch (err) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏
      }
    }, 2000);

    return () => clearInterval(interval);
  }, [refresh, getLastUpdated]);

  useEffect(() => {
    loadRecommendations();
  }, [loadRecommendations]);

  return {
    recommendations,
    loading,
    error,
    loadRecommendations,
    saveRecommendations,
    clearRecommendations,
    hasRecommendations,
    getLastUpdated,
    setLastUpdated,
    processNewAIResponse,
    refresh, // –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
  };
}; 